{"title":"CPP1 字符串的使用","uid":"d469c0aa6900bf80ac5103ca8bfe40c5","slug":"CPP/C1 字符串的使用","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:22.000Z","comments":true,"path":"api/articles/CPP/C1 字符串的使用.json","keywords":null,"cover":null,"content":"<h1 id=\"字符串的使用\"><a href=\"#字符串的使用\" class=\"headerlink\" title=\"字符串的使用\"></a>字符串的使用</h1><h2 id=\"输入\"><a href=\"#输入\" class=\"headerlink\" title=\"输入\"></a>输入</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//请某人输入其姓名</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Plz Enter ur name:\"</span> <span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//读姓名</span>\n  std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">;</span> <span class=\"token comment\">//定义变量name</span>\n  std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> name<span class=\"token punctuation\">;</span><span class=\"token comment\">//将姓名读进name</span>\n\n  <span class=\"token comment\">//输出对该人的问候语</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Hello,\"</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"!\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">'\\n'</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>名词</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>变量</td>\n<td>具有名称的对象<br />为了读入输入必须找个地方存放他，这样的地方就叫变量</td>\n</tr>\n<tr>\n<td>对象</td>\n<td>计算机中一段具有类型的内存空间</td>\n</tr>\n<tr>\n<td>接口</td>\n<td>可实现的操作的集合</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>使用一个变量 <code>std::string name</code></p>\n<ul>\n<li>告诉系统环境它应该有一个什么样的名称</li>\n<li>我们希望它所具有的类型</li>\n<li>提供名称和类型的请求会让系统环境更加方便地为程序产生高效的机器代码</li>\n<li>这个请求同时也会让编译器检测到拼写错误的变量名称</li>\n</ul>\n<p>局部变量<code>name</code></p>\n<ul>\n<li>定义存活在花括号括起的程序运行期内</li>\n<li>一旦程序运行到”}”，变量<code>name</code>被销毁，同时这个变量所占用的全部内存也会被系统回收而用于其他用途</li>\n</ul>\n<p>输入操作<code>std::cin&gt;&gt;name;</code></p>\n<pre class=\"mermaid\">graph TD\n从标准输入读进一个词\n--> 将构成这个词的字符存储在`name`变量中\n从标准输入读进一个词 --> 产生一个出现在计算机输出装置上的提示\n--> 输入/输出库将它的输出保存在buffer --为减少对应每个输出请求的写操作的系统开销-->库使用缓冲区来累积待写的字符\n\n--只在有必要的时候-->将缓冲区的内容写到输出装置中从而刷新缓冲区</pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>刷新buffer的三种事件</p>\n<ul>\n<li>缓冲区已满 -&gt; 自动刷新</li>\n<li>请求库从标准输入流中读数据 -&gt; 不用等到buffer满就可以刷新</li>\n<li>明确要求刷新</li>\n</ul></blockquote>\n<p>新的输出<code>std::cout &lt;&lt; &quot;Hello,&quot; &lt;&lt; name &lt;&lt; &quot;!&quot; &lt;&lt; &#39;\\n&#39;;</code></p>\n<ul>\n<li>明确命令库刷新缓冲区</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>编写大量时间运行的程序</p>\n<ul>\n<li>养成适当时刻刷新缓冲区的好习惯</li>\n<li>否则有些程序输出长时间滞留在缓冲区中</li>\n</ul></blockquote>\n<h2 id=\"将姓名装框\"><a href=\"#将姓名装框\" class=\"headerlink\" title=\"将姓名装框\"></a>将姓名装框</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Please Enter your name:\"</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>cin <span class=\"token operator\">>></span> name<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string greeting <span class=\"token operator\">=</span> <span class=\"token string\">\"Hello,\"</span> <span class=\"token operator\">+</span> name <span class=\"token operator\">+</span> <span class=\"token string\">\"!\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">spaces</span><span class=\"token punctuation\">(</span>greeting<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string second <span class=\"token operator\">=</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">+</span> spaces <span class=\"token operator\">+</span> <span class=\"token string\">\"*\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">first</span><span class=\"token punctuation\">(</span>second<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">'*'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> first <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> second <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">&lt;&lt;</span> greeting <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> second <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> first <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>greeting</code>变量的定义中包含3个新的概念</p>\n<ul>\n<li>定一个一个变量时，可以赋给它一个值<ul>\n<li>如果变量具有不同的类型，系统环境将初始值的类型转换成变量的类型</li>\n</ul>\n</li>\n<li>可以用“+”将一个字符串和一个字符串字面量连接起来</li>\n<li>Const可以作为变量定义的一部分<ul>\n<li>保证在变量的生存期内我们不会改变它的值</li>\n<li>⚠️：如果说一个变量是常量，必须在定义它的时候对其进行初始化</li>\n</ul>\n</li>\n</ul>\n<p><code>const std::string spaces(greeting.size(),&#39;&#39;);</code></p>\n<ul>\n<li><code>greeting.size()</code>调用成员函数的例子<ul>\n<li>名为greeting的对象有一个被称为size的实际为函数的成员</li>\n<li>字符字面量 -&gt; ‘’</li>\n<li>字符串字面量 -&gt; “”</li>\n</ul>\n</li>\n</ul>\n","text":"字符串的使用输入#include&lt;iostream> #include&lt;string> int main() &#123; //请某人输入其姓名 std::cout &lt;&lt; \"Plz Enter ur name:\" ; //读姓名 std::string n...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">字符串的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BE%93%E5%85%A5\"><span class=\"toc-text\">输入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%86%E5%A7%93%E5%90%8D%E8%A3%85%E6%A1%86\"><span class=\"toc-text\">将姓名装框</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CPP11 定义抽象数据类型","uid":"6f7b722034727aa8d501a289bcdc43b2","slug":"CPP/C11 定义抽象数据类型","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:48:48.000Z","comments":true,"path":"api/articles/CPP/C11 定义抽象数据类型.json","keywords":null,"cover":null,"text":"定义抽象数据类型 创建一个类似于向量的类以加深我们对如何设计和实现一个类的理解 先写一些简单的成员函数，再回来看看如何控制进行复制、赋值以及删除操作 Vec类开始设计类时，通常需要首先确定要在类中提供什么样的接口$\\to$研究类的使用者将用我们所写的类编写什么样的程序，比如说： ...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CPP12 使类对象获得数值功能","uid":"32d2985524fbdfade0b6b9e9b6071676","slug":"CPP/C12使类对象获得数值功能","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:48:46.000Z","comments":true,"path":"api/articles/CPP/C12使类对象获得数值功能.json","keywords":null,"cover":null,"text":"使类对象获得数值功能 定义了自己的类之后，就可以控制对类进行的扩展，使其对象可以想数值一样工作 Box3 = Box1 + Box2 类的编写者可以设法让各个对象之间彼此保持独立 上一章我们在写Vec类时已经完成大部分工作 本章大部分讨论如何为Str类设计一个友好的接口 一个简单...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}