{"title":"B3 C++菜鸟教程","uid":"fceb7de2def1c17dcd8f404b9c66b25c","slug":"CPP/C++菜鸟教程","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:34:13.566Z","comments":true,"path":"api/articles/CPP/C++菜鸟教程.json","keywords":null,"cover":null,"content":"<h1 id=\"代码组成结构\"><a href=\"#代码组成结构\" class=\"headerlink\" title=\"代码组成结构\"></a>代码组成结构</h1><p>在 C++ 中，分别使用.h 和.cpp 来定义一个类。</p>\n<p><strong>.h</strong> 中存放类的声明，函数原型（放在类的声明中）。</p>\n<p><strong>.cpp</strong> 存放函数体。</p>\n<p>也就是说，一个存放声明(declaration)，一个存放定义（definition)。</p>\n<p>如果我们在一个头文件里声明了一个函数，当我们需要定义这个函数（这个定义是唯一的，也就是只能定义一次），或者需要使用这个函数时，我们在 cpp 中需要 include 这个头文件。</p>\n<p>同样地，如果我们在一个头文件里声明了一个类，当我们需要定义类里的成员函数，或者我们需要使用这个类时，我们在 cpp 中需要 include 这个头文件。</p>\n<p>对于类的设计者来说，头文件就像他们和类的使用者的一个合同，编译器会强化这一合同，它会要求你在使用这些类里的函数或结构时必须要声明。</p>\n<h1 id=\"头文件的include\"><a href=\"#头文件的include\" class=\"headerlink\" title=\"头文件的include\"></a>头文件的include</h1><p><strong>&lt;&gt;</strong> 先去系统目录中找头文件，如果没有在到当前目录下找。所以像标准的头文件 stdio.h、stdlib.h 等用这个方法。 </p>\n<p><strong>“ “</strong> 首先在当前目录下寻找，如果找不到，再到系统目录中寻找。 这个用于 include 自定义的头文件，让系统优先使用当前目录中定义的。</p>\n<h1 id=\"避免使用using-namespace-std\"><a href=\"#避免使用using-namespace-std\" class=\"headerlink\" title=\"避免使用using namespace std\"></a>避免使用<code>using namespace std</code></h1><p>真正的开发过程中， 尽量避免使用 <strong>using namespace std;</strong> 等直接引入整个命名空间，否则会因为命名空间污染导致很多不必要的问题， 比如自己写的某个函数，名称正好和 <strong>std</strong> 中的一样， 编译器会不知道使用哪一个， 引起编译报错， 建议使用:</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">std::cout &lt;&lt; &quot;Hello World&quot; &lt;&lt; std::endl;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>等直接由命名空间组合起来的全称。</p>\n<h1 id=\"C-存储类\"><a href=\"#C-存储类\" class=\"headerlink\" title=\"C++存储类\"></a>C++存储类</h1><ul>\n<li><p>auto</p>\n<ul>\n<li>```cpp<br>auto f=3.14;      //double<br>auto s(“hello”);  //const char<em><br>auto z = new auto(9); // int</em><br>auto x1 = 5, x2 = 5.0, x3=’r’;//错误，必须是初始化为同一类型<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n- register\n\n  - &#96;&#96;&#96;cpp\n    &#123;\n       register int  miles;\n    &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n</li>\n</ul>\n</li>\n<li><p>static</p>\n</li>\n<li><p>extern</p>\n</li>\n<li><p>mutable</p>\n</li>\n<li><p>thread_local (C++11)</p>\n</li>\n</ul>\n<h1 id=\"C-函数\"><a href=\"#C-函数\" class=\"headerlink\" title=\"C++ 函数\"></a>C++ 函数</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数类型</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主函数<strong>main()</strong></td>\n<td>都有的函数</td>\n</tr>\n<tr>\n<td>函数<strong>声明</strong></td>\n<td>告诉编译器函数的名称、返回类型和参数</td>\n</tr>\n<tr>\n<td>函数<strong>定义</strong></td>\n<td>提供了函数的实际主体</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"函数声明\"><a href=\"#函数声明\" class=\"headerlink\" title=\"函数声明\"></a>函数声明</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h2 id=\"函数定义\"><a href=\"#函数定义\" class=\"headerlink\" title=\"函数定义\"></a>函数定义</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 函数返回两个数中较大的那个数</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 局部变量声明</span>\n   <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> num2<span class=\"token punctuation\">)</span>\n      result <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">else</span>\n      result <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"调用函数\"><a href=\"#调用函数\" class=\"headerlink\" title=\"调用函数\"></a>调用函数</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 函数声明</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 局部变量声明</span>\n   <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> ret<span class=\"token punctuation\">;</span>\n \n   <span class=\"token comment\">// 调用函数来获取最大值</span>\n   ret <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Max value is : \"</span> <span class=\"token operator\">&lt;&lt;</span> ret <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token comment\">// 函数返回两个数中较大的那个数</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> num2<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 局部变量声明</span>\n   <span class=\"token keyword\">int</span> result<span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>num1 <span class=\"token operator\">></span> num2<span class=\"token punctuation\">)</span>\n      result <span class=\"token operator\">=</span> num1<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">else</span>\n      result <span class=\"token operator\">=</span> num2<span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"函数参数\"><a href=\"#函数参数\" class=\"headerlink\" title=\"函数参数\"></a>函数参数</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">调用类型</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/cplusplus/cpp-function-call-by-value.html\">传值调用</a></td>\n<td style=\"text-align:left\">该方法把参数的实际值赋值给函数的形式参数。在这种情况下，修改函数内的形式参数对实际参数没有影响。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/cplusplus/cpp-function-call-by-pointer.html\">指针调用</a></td>\n<td style=\"text-align:left\">该方法把参数的地址赋值给形式参数。在函数内，该地址用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/cplusplus/cpp-function-call-by-reference.html\">引用调用</a></td>\n<td style=\"text-align:left\">该方法把参数的引用赋值给形式参数。在函数内，该引用用于访问调用中要用到的实际参数。这意味着，修改形式参数会影响实际参数。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"传值调用\"><a href=\"#传值调用\" class=\"headerlink\" title=\"传值调用\"></a>传值调用</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 函数声明</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 函数定义</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n \n   temp <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 保存 x 的值 */</span>\n   x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 把 y 赋值给 x */</span>\n   y <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 把 x 赋值给 y */</span>\n  \n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 局部变量声明</span>\n   <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n \n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"交换前，a 的值：\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"交换前，b 的值：\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n \n   <span class=\"token comment\">// 调用函数来交换值</span>\n   <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"交换后，a 的值：\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"交换后，b 的值：\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"指针调用\"><a href=\"#指针调用\" class=\"headerlink\" title=\"指针调用\"></a>指针调用</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 函数声明</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 函数定义</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n   temp <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>x<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 保存地址 x 的值 */</span>\n   <span class=\"token operator\">*</span>x <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>y<span class=\"token punctuation\">;</span>        <span class=\"token comment\">/* 把 y 赋值给 x */</span>\n   <span class=\"token operator\">*</span>y <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 把 x 赋值给 y */</span>\n  \n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 局部变量声明</span>\n   <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n \n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"交换前，a 的值：\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"交换前，b 的值：\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">/* 调用函数来交换值\n    * &amp;a 表示指向 a 的指针，即变量 a 的地址 \n    * &amp;b 表示指向 b 的指针，即变量 b 的地址 \n    */</span>\n   <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"交换后，a 的值：\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"交换后，b 的值：\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"引用调用\"><a href=\"#引用调用\" class=\"headerlink\" title=\"引用调用\"></a>引用调用</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n \n<span class=\"token comment\">// 函数声明</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 函数定义</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">&amp;</span>y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">int</span> temp<span class=\"token punctuation\">;</span>\n   temp <span class=\"token operator\">=</span> x<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 保存地址 x 的值 */</span>\n   x <span class=\"token operator\">=</span> y<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* 把 y 赋值给 x */</span>\n   y <span class=\"token operator\">=</span> temp<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 把 x 赋值给 y  */</span>\n  \n   <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 局部变量声明</span>\n   <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> b <span class=\"token operator\">=</span> <span class=\"token number\">200</span><span class=\"token punctuation\">;</span>\n \n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"交换前，a 的值：\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"交换前，b 的值：\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n \n   <span class=\"token comment\">/* 调用函数来交换值 */</span>\n   <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n \n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"交换后，a 的值：\"</span> <span class=\"token operator\">&lt;&lt;</span> a <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"交换后，b 的值：\"</span> <span class=\"token operator\">&lt;&lt;</span> b <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Lambda-函数与表达式\"><a href=\"#Lambda-函数与表达式\" class=\"headerlink\" title=\"Lambda 函数与表达式\"></a>Lambda 函数与表达式</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token punctuation\">[</span>capture<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>parameters<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span><span class=\"token keyword\">return</span><span class=\"token operator\">-</span>type<span class=\"token punctuation\">&#123;</span>body<span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span> <span class=\"token keyword\">return</span> x <span class=\"token operator\">&lt;</span> y <span class=\"token punctuation\">;</span> <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n<h1 id=\"数组\"><a href=\"#数组\" class=\"headerlink\" title=\"数组\"></a>数组</h1><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>声明数组</td>\n<td><code>double balance[10];</code></td>\n</tr>\n<tr>\n<td>初始化数组</td>\n<td><code>double balance[5] = &#123;1000.0, 2.0, 3.4, 7.0, 50.0&#125;;</code></td>\n</tr>\n<tr>\n<td>访问数组元素</td>\n<td><code>double salary = balance[9];</code></td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th style=\"text-align:left\">概念</th>\n<th style=\"text-align:left\">描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/cplusplus/cpp-multi-dimensional-arrays.html\">多维数组</a></td>\n<td style=\"text-align:left\">C++ 支持多维数组。多维数组最简单的形式是二维数组。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/cplusplus/cpp-pointer-to-an-array.html\">指向数组的指针</a></td>\n<td style=\"text-align:left\">您可以通过指定不带索引的数组名称来生成一个指向数组中第一个元素的指针。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/cplusplus/cpp-passing-arrays-to-functions.html\">传递数组给函数</a></td>\n<td style=\"text-align:left\">您可以通过指定不带索引的数组名称来给函数传递一个指向数组的指针。</td>\n</tr>\n<tr>\n<td style=\"text-align:left\"><a href=\"https://www.runoob.com/cplusplus/cpp-return-arrays-from-function.html\">从函数返回数组</a></td>\n<td style=\"text-align:left\">C++ 允许从函数返回数组。</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> std<span class=\"token punctuation\">;</span>\n \n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">// 带有 5 个元素的双精度浮点型数组</span>\n   <span class=\"token keyword\">double</span> runoobAarray<span class=\"token punctuation\">[</span><span class=\"token number\">5</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">1000.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">17.0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">50.0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">double</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n \n   p <span class=\"token operator\">=</span> runoobAarray<span class=\"token punctuation\">;</span>\n \n   <span class=\"token comment\">// 输出数组中每个元素的值</span>\n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"使用指针的数组值 \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> \n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#123;</span>\n       cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*(p + \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\") : \"</span><span class=\"token punctuation\">;</span>\n       cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n \n   cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"使用 runoobAarray 作为地址的数组值 \"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span> <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span> <span class=\"token punctuation\">)</span>\n   <span class=\"token punctuation\">&#123;</span>\n       cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*(runoobAarray + \"</span> <span class=\"token operator\">&lt;&lt;</span> i <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\") : \"</span><span class=\"token punctuation\">;</span>\n       cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>runoobAarray <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n   <span class=\"token punctuation\">&#125;</span>\n \n   <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"指针\"><a href=\"#指针\" class=\"headerlink\" title=\"指针\"></a>指针</h2>","text":"代码组成结构在 C++ 中，分别使用.h 和.cpp 来定义一个类。 .h 中存放类的声明，函数原型（放在类的声明中）。 .cpp 存放函数体。 也就是说，一个存放声明(declaration)，一个存放定义（definition)。 如果我们在一个头文件里声明了一个函数，当我们...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E7%BB%84%E6%88%90%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">代码组成结构</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%B4%E6%96%87%E4%BB%B6%E7%9A%84include\"><span class=\"toc-text\">头文件的include</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E9%81%BF%E5%85%8D%E4%BD%BF%E7%94%A8using-namespace-std\"><span class=\"toc-text\">避免使用using namespace std</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C-%E5%AD%98%E5%82%A8%E7%B1%BB\"><span class=\"toc-text\">C++存储类</span></a></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#C-%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">C++ 函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%A3%B0%E6%98%8E\"><span class=\"toc-text\">函数声明</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%AE%9A%E4%B9%89\"><span class=\"toc-text\">函数定义</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B0%83%E7%94%A8%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">调用函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">函数参数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BC%A0%E5%80%BC%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">传值调用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">指针调用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BC%95%E7%94%A8%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">引用调用</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Lambda-%E5%87%BD%E6%95%B0%E4%B8%8E%E8%A1%A8%E8%BE%BE%E5%BC%8F\"><span class=\"toc-text\">Lambda 函数与表达式</span></a></li></ol></li><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84\"><span class=\"toc-text\">数组</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8C%87%E9%92%88\"><span class=\"toc-text\">指针</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"B1 多文件编译","uid":"af14c5521b037875d1206060f4590b98","slug":"CPP/B1 多文件编译","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:32:19.899Z","comments":true,"path":"api/articles/CPP/B1 多文件编译.json","keywords":null,"cover":[],"text":"Ubuntu下g++编译多个*.h和*.cpp文件文件介绍 文件 内容 main.cpp 主函数 median.cpp 用于返回一个序列的中位数 median.h median函数声明 grade.cpp 若干个重载的grade函数函数体 grade.h grade函数声明 St...","link":"","photos":[],"count_time":{"symbolsCount":575,"symbolsTime":"1 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CPP1 字符串的使用","uid":"d469c0aa6900bf80ac5103ca8bfe40c5","slug":"CPP/C1 字符串的使用","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:22.200Z","comments":true,"path":"api/articles/CPP/C1 字符串的使用.json","keywords":null,"cover":null,"text":"字符串的使用输入#include&lt;iostream> #include&lt;string> int main() &#123; //请某人输入其姓名 std::cout &lt;&lt; \"Plz Enter ur name:\" ; //读姓名 std::string n...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}