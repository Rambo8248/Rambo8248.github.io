{"title":"CPP4 组织程序和数据 代码纯享","uid":"fb94724ad6a11796aa7671876e21935b","slug":"CPP/C4 组织程序和数据_精简版","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:11.031Z","comments":true,"path":"api/articles/CPP/C4 组织程序和数据_精简版.json","keywords":null,"cover":null,"content":"<h1 id=\"组织程序和数据\"><a href=\"#组织程序和数据\" class=\"headerlink\" title=\"组织程序和数据\"></a>组织程序和数据</h1><h2 id=\"C-多文件理解\"><a href=\"#C-多文件理解\" class=\"headerlink\" title=\"C++多文件理解\"></a>C++多文件理解</h2><p><a href=\"https://zhuanlan.zhihu.com/p/348798266\">https://zhuanlan.zhihu.com/p/348798266</a></p>\n<p>C++程序一般分三类文件：</p>\n<ul>\n<li><strong>头文件( .h )</strong>放置各种<strong>声明</strong>，用于被cpp文件包含</li>\n<li><strong>模块文件（.cpp）</strong>放置一些函数定义，也称为功能模块</li>\n<li><strong>主程序文件（.cpp）</strong>包含main()的文件，程序入口，调用模块文件实现的方法</li>\n</ul>\n<h2 id=\"main-cpp\"><a href=\"#main-cpp\" class=\"headerlink\" title=\"main.cpp\"></a><code>main.cpp</code></h2><p>:star:C++工程文件的组织​</p>\n<pre class=\"mermaid\">graph TD\n包含头文件.既有标准头也有自定义头文件 --> 提一下在源文件中使用到的声明 \n--> 进入主函数 -->以Student_info为元素构建向量对象students --> 以Student_info类构建对象record\n--> 调用read函数循环读入并存储学生数据 -->调用sort函数排列学生记录  -->输出姓名和成绩</pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iomanip></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ios></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdexcept></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"grade.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"Student_info.h\"</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>domain_error<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>max<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>setprecision<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>sort<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>streamsize<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span> students<span class=\"token punctuation\">;</span>\n  Student_info record<span class=\"token punctuation\">;</span>\n  string<span class=\"token double-colon punctuation\">::</span>size_type maxlen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//读入并存储所有学生的数据</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    maxlen <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxlen<span class=\"token punctuation\">,</span>record<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    students<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">//按字母顺序排列学生记录</span>\n  <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//输出姓名和成绩</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//输出姓名，将姓名填充至maxlen+1个字符的长度</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>maxlen<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>；\n    <span class=\"token comment\">//计算并输出成绩</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">double</span> final_grade <span class=\"token operator\">=</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      streamsize prec <span class=\"token operator\">=</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">precision</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> final_grade <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span>prec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>domain_error e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Student-info-h\"><a href=\"#Student-info-h\" class=\"headerlink\" title=\"Student_info.h\"></a><code>Student_info.h</code></h2><p>:star:宏定义判断</p>\n<p>:star:结构体</p>\n<p>:star:函数原型声明​</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>#ifndef GUARD_Student_info</code></td>\n<td>检查<code>GUARD_Student_info</code>是否被定义<br />应该刚好位于文件的第一行，就算是注释也不能跑到它前头</td>\n</tr>\n<tr>\n<td><code>GUARD_Student_info</code></td>\n<td>预处理程序变量的名称</td>\n</tr>\n<tr>\n<td><code>#include</code></td>\n<td>包含头文件</td>\n</tr>\n<tr>\n<td>struct Student_info{<br/>  std::string name;<br/>  double midterm,final;<br/>  std::vector<double> homework;<br/>};</td>\n<td>定义了<code>Student_info</code>的结构体<br />包含了name、midterm、final、homework几个字段</td>\n</tr>\n<tr>\n<td><code>bool compare(const Student_info&amp;, const Student_info&amp;);</code></td>\n<td>compare函数调用了<br />两个<code>Student_info</code>的常量引用</td>\n</tr>\n<tr>\n<td><code>std::istream&amp; read(std::istream&amp;, Student_info&amp;);</code></td>\n<td>1.read函数以 istream和Student_info的引用为参数<br />2.声明了read函数</td>\n</tr>\n<tr>\n<td><code>std::istream&amp; read_hw(std::istream&amp;, std::vector&lt;double&gt;&amp;);</code></td>\n<td>1.read_hw函数以 istream和vector的引用为参数<br />2.声明了read_hw函数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">GUARD_Student_info</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GUARD_Student_info</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student_info</span><span class=\"token punctuation\">&#123;</span>\n  std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> homework<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Student_info<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read_hw</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"Student-info-cpp\"><a href=\"#Student-info-cpp\" class=\"headerlink\" title=\"Student_info.cpp\"></a><code>Student_info.cpp</code></h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>#include&quot;Student_info.h&quot;</code></td>\n<td>包含头文件</td>\n</tr>\n<tr>\n<td>bool compare(const Student_info&amp; x, const Student_info&amp; y)<br/>{<br/>  return x.name &lt; y.name ;<br/>}</td>\n<td>定义比较bool类型</td>\n</tr>\n<tr>\n<td>istream&amp; read(istream&amp; is, Student_info&amp; s)<br/>{<br/>    //读入并存储学生的姓名以及期中、期末考试成绩<br/>    is &gt;&gt; s.name &gt;&gt; s.midterm &gt;&gt; s.final;<br/>    // 将数值读到对象s的成员name、midterm、final中<br/>    read_hw(is,s.homework);<br/>    // 调用read_hw读取家庭作业成绩<br/>    return is;<br/>}</td>\n<td>定义read函数</td>\n</tr>\n<tr>\n<td>istream&amp; read_hw(istream&amp; in, vector<double>&amp; hw)<br/>{<br/>    if(in){<br/>        //清除原先内容<br/>        hw.clear();<br/><br/>        //读家庭作业成绩<br/>        double x;<br/>        while(in &gt; x)<br/>            hw.push_back(x);<br/><br/>        //清除流以使输入动作对下一个学生有效<br/>        in.clear();<br/>    }<br/>    return in;</td>\n<td>定义read_hw函数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"Student_info.h\"</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nistream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> Student_info<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//读入并存储学生的姓名以及期中、期末考试成绩</span>\n    is <span class=\"token operator\">>></span> s<span class=\"token punctuation\">.</span>name <span class=\"token operator\">>></span> s<span class=\"token punctuation\">.</span>midterm <span class=\"token operator\">>></span> s<span class=\"token punctuation\">.</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 将数值读到对象s的成员name、midterm、final中</span>\n    <span class=\"token function\">read_hw</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span>homework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 调用read_hw读取家庭作业成绩</span>\n    <span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nistream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read_hw</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> hw<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//清除原先内容</span>\n        hw<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//读家庭作业成绩</span>\n        <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>in <span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span>\n            hw<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//清除流以使输入动作对下一个学生有效</span>\n        in<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"median-h\"><a href=\"#median-h\" class=\"headerlink\" title=\"median.h\"></a><code>median.h</code></h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">GUARD_median_h</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GUARD_median_h</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">median</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"median-cpp\"><a href=\"#median-cpp\" class=\"headerlink\" title=\"median.cpp\"></a><code>median.cpp</code></h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdexcept></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>domain_error<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>sort<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">median</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> vec<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">typedef</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type vec_sz<span class=\"token punctuation\">;</span>\n\n    vec_sz size <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">domain_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"median of an empty vector\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    vec_sz mid <span class=\"token operator\">=</span> size<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> size $ <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> vec<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> vec<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"grade-h\"><a href=\"#grade-h\" class=\"headerlink\" title=\"grade.h\"></a><code>grade.h</code></h2><p>:star:函数重载​</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">GUARD_grade_h</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GUARD_grade_h</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"Student_info.h\"</span></span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"grade-cpp\"><a href=\"#grade-cpp\" class=\"headerlink\" title=\"grade.cpp\"></a><code>grade.cpp</code></h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdexcept></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"grade.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"median.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Student_info.h\"</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>domain_error<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> homework<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0.2</span><span class=\"token operator\">*</span>midterm <span class=\"token operator\">+</span> <span class=\"token number\">0.4</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">final</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.4</span> <span class=\"token operator\">*</span> homework<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> midterm<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> hw<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">domain_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student has done no  homework\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span><span class=\"token function\">median</span><span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//const引用在调用时不会产生额外开销</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>midterm<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span>homework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"组织程序和数据C++多文件理解https://zhuanlan.zhihu.com/p/348798266 C++程序一般分三类文件： 头文件( .h )放置各种声明，用于被cpp文件包含 模块文件（.cpp）放置一些函数定义，也称为功能模块 主程序文件（.cpp）包含main(...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%84%E7%BB%87%E7%A8%8B%E5%BA%8F%E5%92%8C%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">组织程序和数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#C-%E5%A4%9A%E6%96%87%E4%BB%B6%E7%90%86%E8%A7%A3\"><span class=\"toc-text\">C++多文件理解</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#main-cpp\"><span class=\"toc-text\">main.cpp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Student-info-h\"><span class=\"toc-text\">Student_info.h</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Student-info-cpp\"><span class=\"toc-text\">Student_info.cpp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#median-h\"><span class=\"toc-text\">median.h</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#median-cpp\"><span class=\"toc-text\">median.cpp</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#grade-h\"><span class=\"toc-text\">grade.h</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#grade-cpp\"><span class=\"toc-text\">grade.cpp</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CPP7 使用关联容器","uid":"c6bbdc5859805502fec5f66437416592","slug":"CPP/C7 使用关联容器","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:01.416Z","comments":true,"path":"api/articles/CPP/C7 使用关联容器.json","keywords":null,"cover":[],"text":"使用关联容器 顺序容器：给容器元素选择适当顺序后，它们会按照我们所选择的顺序将元素保存起来 关联容器：容器会自动将它们的元素安排在一个序列中 支持高效查找的容器关联容器：自动将它们元素安排在一个序列中，利用这种排序方法让我们可以更快速地对特定元素进行定位—并不需要我们自己保持容器...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CPP9 定义新类型","uid":"260ea000f421b3eddad461c7e5d42b80","slug":"CPP/C9 定义新类型","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:48:54.644Z","comments":true,"path":"api/articles/CPP/C9 定义新类型.json","keywords":null,"cover":[],"text":"定义新类型可以将C++分成两种 内部类型 -&gt; 被定义成语言核心的一部分 自定义类型(class type) C+设计思想 应该让程序员创建与内部类型一样易于使用的类型 创建具有简明直观的接口的类型 实质性的语言支持 类的设计过程中的体验和判断 Student_info回顾...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}