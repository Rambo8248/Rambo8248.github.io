{"title":"CPP4 组织程序与数据","uid":"bc5e708322b6829557ee8bb706942cbe","slug":"CPP/C4 组织程序和数据","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:14.000Z","comments":true,"path":"api/articles/CPP/C4 组织程序和数据.json","keywords":null,"cover":[],"content":"<h1 id=\"组织程序和数据\"><a href=\"#组织程序和数据\" class=\"headerlink\" title=\"组织程序和数据\"></a>组织程序和数据</h1><p>库工具特征</p>\n<ul>\n<li>能够解决某些特定类型的问题</li>\n<li>独立于其他大多数工具</li>\n<li>都有一个名称</li>\n</ul>\n<p>我们自己编写的程序具备特性中的第一个，不具备另外两个。</p>\n<ul>\n<li>对于小程序→不是坏事</li>\n<li>更困难的问题→除非将解决方案分割成相互独立的具有名称的各个部分，否则会变得无法控制</li>\n</ul>\n<p>C++提供两种基本方法以便让我们组织大型程序</p>\n<ul>\n<li>函数</li>\n<li>数据结构</li>\n<li>类</li>\n</ul>\n<h2 id=\"整体代码\"><a href=\"#整体代码\" class=\"headerlink\" title=\"整体代码\"></a>整体代码</h2><p><code>main.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iomanip></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;ios></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdexcept></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"grade.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"Student_info.h\"</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cin<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>cout<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>domain_error<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>max<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>setprecision<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>sort<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>streamsize<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>string<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span> students<span class=\"token punctuation\">;</span>\n  Student_info record<span class=\"token punctuation\">;</span>\n  string<span class=\"token double-colon punctuation\">::</span>size_type maxlen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//读入并存储所有学生的数据</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    maxlen <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxlen<span class=\"token punctuation\">,</span>record<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    students<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">//按字母顺序排列学生记录</span>\n  <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//输出姓名和成绩</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i <span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//输出姓名，将姓名填充至maxlen+1个字符的长度</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>maxlen<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span>；\n    <span class=\"token comment\">//计算并输出成绩</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">double</span> final_grade <span class=\"token operator\">=</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      streamsize prec <span class=\"token operator\">=</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">precision</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> final_grade <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span>prec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">(</span>domain_error e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"知识点\"><a href=\"#知识点\" class=\"headerlink\" title=\"知识点\"></a>知识点</h2><ul>\n<li>函数调用<ul>\n<li>函数参数</li>\n</ul>\n</li>\n<li>错误提示</li>\n<li>引用</li>\n<li>重载</li>\n<li>try &amp; catch</li>\n</ul>\n<h2 id=\"组织计算\"><a href=\"#组织计算\" class=\"headerlink\" title=\"组织计算\"></a>组织计算</h2><p>编写一个函数用于计算某个学生总成绩（用函数来明确代替重复的计算）</p>\n<ul>\n<li>减轻程序工作量</li>\n<li>必要时更为方便地改变运算过程</li>\n<li>函数具有名称，对计算命名则能<strong>以更抽象的方式去思考它</strong>，从而更加细致思考它的用途</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> homework<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0.2</span><span class=\"token operator\">*</span>midterm <span class=\"token operator\">+</span> <span class=\"token number\">0.4</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">final</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.4</span> <span class=\"token operator\">*</span> homework<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>函数参数为midterm、final、homework，作为函数中的局部变量被使用，则</p>\n<ul>\n<li>调用函数→参数创建 :star:参数定义并不代表会马上创建，只是函数被调用时才会创建</li>\n<li>函数返回→参数销毁</li>\n</ul>\n<h3 id=\"查找中值\"><a href=\"#查找中值\" class=\"headerlink\" title=\"查找中值\"></a>查找中值</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> <span class=\"token function\">median</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> vec<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">typedef</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type vec_sz<span class=\"token punctuation\">;</span>\n    \n    vec_sz size <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">domain_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"median of an empty vector\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    vec_sz mid <span class=\"token operator\">=</span> size<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> size $ <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> vec<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> vec<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>向量命名为vec而非homework，中值计算的普适性</li>\n<li>去掉变量median，因为计算中值后可马上返回</li>\n<li>size和mid作为median函数的局部变量<ul>\n<li>从其他地方这两个变量不可访问（而且不相关）→函数调用创建，函数返回销毁→不冲突带来的安全性</li>\n</ul>\n</li>\n<li>空向量的更为通用的错误提示<ul>\n<li>向量为空→抛出异常→抛出异常的地方终止执行并转移到程序的另一部分→向这部分提供异常对象→异常对象中含有调用程序，可以用来处理异常的信息</li>\n<li><code>domain_error</code>→头文件<code>stdexcept</code>中定义的一种类型→向我们报告函数参数的取值是函数所不能接受的</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"重新指定计算成绩的策略\"><a href=\"#重新指定计算成绩的策略\" class=\"headerlink\" title=\"重新指定计算成绩的策略\"></a>重新指定计算成绩的策略</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> midterm<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> hw<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">domain_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student has done no  homework\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span><span class=\"token function\">median</span><span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>const vector&lt;double&gt;&amp; hw</code></td>\n<td>对参数类型为double的向量常量的引用<br />双精度向量常量引用<br />定义一个引用的引用与定义原来对象的引用的效果是一致的</td>\n</tr>\n<tr>\n<td><code>vector&lt;double&gt;&amp; hw2 = chw;</code></td>\n<td>错误：不能定义一个非常量引用指向一个常量对象或常量引用</td>\n</tr>\n<tr>\n<td><code>grade</code>函数名重复</td>\n<td>重载：能够使几个函数具有同样的函数名的概念<br />系统环境能够根据参数的类来辨别我们所指的是哪一个函数</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"读家庭作业成绩\"><a href=\"#读家庭作业成绩\" class=\"headerlink\" title=\"读家庭作业成绩\"></a>读家庭作业成绩</h3><h4 id=\"如何将家庭作业读进一个向量\"><a href=\"#如何将家庭作业读进一个向量\" class=\"headerlink\" title=\"如何将家庭作业读进一个向量\"></a>如何将家庭作业读进一个向量</h4><p>如何将家庭作业成绩读进一个向量中呢？要求一次返回两个值</p>\n<ul>\n<li>它读到的家庭作业成绩</li>\n<li>指示输入尝试是否成功</li>\n</ul>\n<p>如何解决从函数中返回多于一个的值呢？:question:</p>\n<ul>\n<li>给函数一个参数，这个参数是对一个对象的引用，而函数的其中一个结果值会放置在这个参数里面</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read_hw</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> hw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//这一部分代码有待补充</span>\n    <span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>vector&lt;double&gt;&amp; hw</code></p>\n<p>一个不包含const的引用参数通常表示我们可以修改作为函数参数的对象的值</p>\n<h4 id=\"尝试1\"><a href=\"#尝试1\" class=\"headerlink\" title=\"尝试1\"></a>尝试1</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin <span class=\"token operator\">>></span> x<span class=\"token punctuation\">)</span>\n    hw<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>不好的原因</p>\n<ul>\n<li><code>hw</code>并非由我们定义，而是由调用程序定义<ul>\n<li>我们不知道里面是不是已经有了某些数据，可以调用<code>hw.clear()</code></li>\n</ul>\n</li>\n<li>不十分明确应在何时停止</li>\n</ul>\n<h4 id=\"尝试2-完整的read-hw函数\"><a href=\"#尝试2-完整的read-hw函数\" class=\"headerlink\" title=\"尝试2-完整的read_hw函数\"></a>尝试2-完整的<code>read_hw函数</code></h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read_hw</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> hw<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//清除原先内容</span>\n        hw<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">//读家庭作业成绩</span>\n        <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>in <span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span>\n            hw<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        \n        <span class=\"token comment\">//清除流以使输入动作对下一个学生有效</span>\n        in<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"三种函数参数\"><a href=\"#三种函数参数\" class=\"headerlink\" title=\"三种函数参数\"></a>三种函数参数</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>调用参数</th>\n<th>意义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>median</code></td>\n<td><code>vector&lt;double&gt;</code></td>\n<td>对这个函数的调用会导致此参数的复制<br />效率不高但正确</td>\n</tr>\n<tr>\n<td><code>grade</code></td>\n<td><code>const vector&lt;double&gt;&amp;</code></td>\n<td><code>&amp;</code>让系统环境无需复制对应参数→节省开销<br /><code>const</code>确保程序不会改变参数值→安全性</td>\n</tr>\n<tr>\n<td><code>read_hw</code></td>\n<td><code>vector&lt;double&gt;&amp;</code></td>\n<td><code>&amp;</code>让系统环境无需复制对应参数→节省开销<br />之所以要避免复制操作是因为函数要改变参数的值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"使用函数计算学生成绩\"><a href=\"#使用函数计算学生成绩\" class=\"headerlink\" title=\"使用函数计算学生成绩\"></a>使用函数计算学生成绩</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//include指令和对库工具的using声明</span>\n<span class=\"token comment\">//median</span>\n<span class=\"token comment\">//grade(double , double , double)</span>\n<span class=\"token comment\">//grade(double , double , const vector&lt;double>&amp;)</span>\n<span class=\"token comment\">//read_hw(istream&amp; , vector&lt;double>&amp;)</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//请求并输入学生姓名</span>\n    <span class=\"token comment\">//请求并输入期中和期末考试成绩</span>\n    <span class=\"token comment\">//请求用户输入家庭作业成绩</span>\n    cout<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> homework<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//读入家庭作业成绩</span>\n    <span class=\"token function\">read_hw</span> <span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span> homework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//如果可以，计算生成总成绩</span>\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token keyword\">double</span> final_grade <span class=\"token operator\">=</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span>homework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        streamsize prec <span class=\"token operator\">=</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">precision</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        cout<span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Your final grade is\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> final_grade <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span>prec<span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>domain_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"You must enter your grades.\"</span>\n            <span class=\"token string\">\"Please try again.\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>try&amp;catch</code></p>\n<pre class=\"mermaid\">graph TD\n尝试执行在花括号中紧跟在try关键字之后的语句 --语句的任何地方发生了一个domain_error --> 停止执行这些语句\n-->转去执行另外一系列catch子句\n\n尝试执行在花括号中紧跟在try关键字之后的语句 --语句正常结束 --> 程序跳过全部catch子句从而执行下一条语句</pre>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu80zemmjj60jm08gdgj02.jpg\" alt=\"image-20210811221342361\"></p>\n<h2 id=\"组织数据\"><a href=\"#组织数据\" class=\"headerlink\" title=\"组织数据\"></a>组织数据</h2><p>我们的要求</p>\n<ul>\n<li>不只报告一个学生的成绩</li>\n<li>假设有一个包含有许多学生的姓名以及成绩的文件</li>\n</ul>\n<h3 id=\"将一个学生的所有数据放置在一起\"><a href=\"#将一个学生的所有数据放置在一起\" class=\"headerlink\" title=\"将一个学生的所有数据放置在一起\"></a>将一个学生的所有数据放置在一起</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student_info</span><span class=\"token punctuation\">&#123;</span>\n    string name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span>homework\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//分号不可省</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>用<code>vector&lt;Student_info&gt;</code>来保存任意数目的学生的信息</p>\n<h3 id=\"处理学生记录\"><a href=\"#处理学生记录\" class=\"headerlink\" title=\"处理学生记录\"></a>处理学生记录</h3><p>步骤</p>\n<pre class=\"mermaid\">graph TD\n将数据读到一个Student_info类型的对象中 --> 为一个Student_info类型的对象生成总成绩 --> 找到一种方法以对一个Student_info类型的向量进行排序</pre>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu811uyitj60o9080q3g02.jpg\" alt=\"image-20210810151658597\"></p>\n<p><code>read</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> Student_info<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//读入并存储学生的姓名以及期中、期末考试成绩</span>\n    is <span class=\"token operator\">>></span> s<span class=\"token punctuation\">.</span>name <span class=\"token operator\">>></span> s<span class=\"token punctuation\">.</span>midterm <span class=\"token operator\">>></span> s<span class=\"token punctuation\">.</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span> \n    <span class=\"token comment\">// 将数值读到对象s的成员name、midterm、final中</span>\n    <span class=\"token function\">read_hw</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span>homework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 调用read_hw读取家庭作业成绩</span>\n    <span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>grade</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//const引用在调用时不会产生额外开销</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>midterm<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span>homework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>compare</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">.</span>name\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<p>这个函数将比较<code>Student_info</code>对象的工作交给类<code>string</code>去完成</p>\n<p><code>string</code>类提供一个<code>&lt;</code>运算符以比较字符串，按照普通的字典排序法比较字符串</p>\n<p>定义<code>compare</code>之后可以将compare函数作为第三个参数传递给库函数<code>sort</code>从而对向量进行排序</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"生成报表\"><a href=\"#生成报表\" class=\"headerlink\" title=\"生成报表\"></a>生成报表</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span>Students<span class=\"token punctuation\">;</span>\n    Student_info record<span class=\"token punctuation\">;</span>\n    string<span class=\"token double-colon punctuation\">::</span>size_type maxlen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      maxlen <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxlen<span class=\"token punctuation\">,</span>record<span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      students<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>maxlen<span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">-</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">double</span> final_grade <span class=\"token operator\">=</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      streamsize prec <span class=\"token operator\">=</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">precision</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> final_grade <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span>prec<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>domain_error e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"将各部分代码连接到一起\"><a href=\"#将各部分代码连接到一起\" class=\"headerlink\" title=\"将各部分代码连接到一起\"></a>将各部分代码连接到一起</h2><ul>\n<li>目前为止，定义了非常多的抽象（函数和数据结构）</li>\n<li>之前使用抽象的方法为：将他们的全部定义都放在同一个文件中并编译这个文件<ul>\n<li>越来越复杂</li>\n<li><strong>为降低复杂度而分块编译</strong><ul>\n<li>将程序放进不同的文件中并独立编译这些文件中的每一个</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>思路</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu814xjunj60nf07swet02.jpg\" alt=\"image-20210811221355826\"></p>\n<pre class=\"mermaid\">graph TD\n要让median函数对其他用户也可用median.cpp --> 编写自己的头文件median.h\n--> 主文件中使用#include/median.h</pre>\n\n<p><code>median.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;algorithm></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdexcept></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>domain_error<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>sort<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">median</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> vec<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">typedef</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type vec_sz<span class=\"token punctuation\">;</span>\n\n    vec_sz size <span class=\"token operator\">=</span> vec<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">domain_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"median of an empty vector\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>vec<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    vec_sz mid <span class=\"token operator\">=</span> size<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> size $ <span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token punctuation\">(</span>vec<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> vec<span class=\"token punctuation\">[</span>mid <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span> <span class=\"token operator\">:</span> vec<span class=\"token punctuation\">[</span>mid<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>median.h</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">GUARD_median_h</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GUARD_median_h</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">median</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>#include &quot;median.h&quot;</code> 置于<code>main.cpp</code>中</td>\n<td>要求编译器将与此名称对应的头文件中的所有内容都复制到程序中</td>\n</tr>\n<tr>\n<td><code>double median(std::vector&lt;double&gt;);</code></td>\n<td>为median编写一个声明</td>\n</tr>\n<tr>\n<td><code>#include&lt;vector&gt;</code></td>\n<td>将声明本身所用到的所有名称都包含进去</td>\n</tr>\n<tr>\n<td>使用<code>std::vertor</code>而非<code>using std::vector</code></td>\n<td>避免所有包含头文件的程序都使用了<code>using std::vector</code>的声明，而实际中不一定需要</td>\n</tr>\n<tr>\n<td><code>#ifndef</code></td>\n<td>检查<code>GUARD_median_h</code>是否被定义<br />应该刚好位于文件的第一行，就算是注释也不能跑到它前头</td>\n</tr>\n<tr>\n<td><code>GUARD_median_h</code></td>\n<td>预处理程序变量的名称</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>:star:</p>\n<ul>\n<li>自己的头文件称作头文件</li>\n<li>系统环境提供的头文件称作标准头，而非标准头文件</li>\n</ul>\n<h2 id=\"将计算成绩的程序分块\"><a href=\"#将计算成绩的程序分块\" class=\"headerlink\" title=\"将计算成绩的程序分块\"></a>将计算成绩的程序分块</h2><ul>\n<li>将<code>Student_info</code>结构和相关的函数组装起来</li>\n</ul>\n<p><code>Student_info.h</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">GUARD_Student_info</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GUARD_Student_info</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;iostream></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;string></span></span>\n##include<span class=\"token operator\">&lt;</span>vector<span class=\"token operator\">></span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Student_info</span><span class=\"token punctuation\">&#123;</span>\n  std<span class=\"token double-colon punctuation\">::</span>string name<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">double</span> midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>\n  std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> homework<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> Student_info<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nstd<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read_hw</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>声明了与<code>Student_info</code>结构密切相关的compare、read和read_hw函数<ul>\n<li>函数在如下的源文件中定义</li>\n</ul>\n</li>\n</ul>\n<p><code>Student_info.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"Student_info.h\"</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span> y<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> x<span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;</span> y<span class=\"token punctuation\">.</span>name <span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nistream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">,</span> Student_info<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//读入并存储学生的姓名以及期中、期末考试成绩</span>\n    is <span class=\"token operator\">>></span> s<span class=\"token punctuation\">.</span>name <span class=\"token operator\">>></span> s<span class=\"token punctuation\">.</span>midterm <span class=\"token operator\">>></span> s<span class=\"token punctuation\">.</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 将数值读到对象s的成员name、midterm、final中</span>\n    <span class=\"token function\">read_hw</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span>homework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 调用read_hw读取家庭作业成绩</span>\n    <span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\nistream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read_hw</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> hw<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        <span class=\"token comment\">//清除原先内容</span>\n        hw<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//读家庭作业成绩</span>\n        <span class=\"token keyword\">double</span> x<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>in <span class=\"token operator\">></span> x<span class=\"token punctuation\">)</span>\n            hw<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">//清除流以使输入动作对下一个学生有效</span>\n        in<span class=\"token punctuation\">.</span><span class=\"token function\">clear</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>有必要在源文件中包含相应的头文件<ul>\n<li>便于检查：C++语言要求函数的声明和定义在返回值类型、参数的个数以及类型这几个方面严格匹配</li>\n</ul>\n</li>\n</ul>\n<p><code>grade.h</code></p>\n<ul>\n<li>编写头文件来声明不同的<code>grade</code>重载函数</li>\n<li>将这些重载函数的声明放在一起会让这些可供选择的函数更易查找<ul>\n<li>三个函数密切相关，因此我们将在同一个文件中定义它们</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">ifndef</span> <span class=\"token expression\">GUARD_grade_h</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">GUARD_grade_h</span></span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">\"Student_info.h\"</span></span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Studein <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">endif</span></span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>grade.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdexcept></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;vector></span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"grade.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"median.h\"</span></span>\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span> <span class=\"token string\">\"Student_info.h\"</span></span>\n\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>domain_error<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">using</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">double</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> homework<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0.2</span><span class=\"token operator\">*</span>midterm <span class=\"token operator\">+</span> <span class=\"token number\">0.4</span> <span class=\"token operator\">*</span> <span class=\"token keyword\">final</span> <span class=\"token operator\">+</span> <span class=\"token number\">0.4</span> <span class=\"token operator\">*</span> homework<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">double</span> midterm<span class=\"token punctuation\">,</span> <span class=\"token keyword\">double</span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> hw<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token function\">domain_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"student has done no  homework\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span><span class=\"token function\">median</span><span class=\"token punctuation\">(</span>hw<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//const引用在调用时不会产生额外开销</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>midterm<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span>homework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"组织程序和数据库工具特征 能够解决某些特定类型的问题 独立于其他大多数工具 都有一个名称 我们自己编写的程序具备特性中的第一个，不具备另外两个。 对于小程序→不是坏事 更困难的问题→除非将解决方案分割成相互独立的具有名称的各个部分，否则会变得无法控制 C++提供两种基本方法以便让...","link":"","photos":[],"count_time":{"symbolsCount":"10k","symbolsTime":"9 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%84%E7%BB%87%E7%A8%8B%E5%BA%8F%E5%92%8C%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">组织程序和数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E4%BD%93%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">整体代码</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%9F%A5%E8%AF%86%E7%82%B9\"><span class=\"toc-text\">知识点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E7%BB%87%E8%AE%A1%E7%AE%97\"><span class=\"toc-text\">组织计算</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E4%B8%AD%E5%80%BC\"><span class=\"toc-text\">查找中值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%87%8D%E6%96%B0%E6%8C%87%E5%AE%9A%E8%AE%A1%E7%AE%97%E6%88%90%E7%BB%A9%E7%9A%84%E7%AD%96%E7%95%A5\"><span class=\"toc-text\">重新指定计算成绩的策略</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A%E6%88%90%E7%BB%A9\"><span class=\"toc-text\">读家庭作业成绩</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%B0%86%E5%AE%B6%E5%BA%AD%E4%BD%9C%E4%B8%9A%E8%AF%BB%E8%BF%9B%E4%B8%80%E4%B8%AA%E5%90%91%E9%87%8F\"><span class=\"toc-text\">如何将家庭作业读进一个向量</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%9D%E8%AF%951\"><span class=\"toc-text\">尝试1</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%B0%9D%E8%AF%952-%E5%AE%8C%E6%95%B4%E7%9A%84read-hw%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">尝试2-完整的read_hw函数</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%89%E7%A7%8D%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0\"><span class=\"toc-text\">三种函数参数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%87%BD%E6%95%B0%E8%AE%A1%E7%AE%97%E5%AD%A6%E7%94%9F%E6%88%90%E7%BB%A9\"><span class=\"toc-text\">使用函数计算学生成绩</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%84%E7%BB%87%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">组织数据</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B0%86%E4%B8%80%E4%B8%AA%E5%AD%A6%E7%94%9F%E7%9A%84%E6%89%80%E6%9C%89%E6%95%B0%E6%8D%AE%E6%94%BE%E7%BD%AE%E5%9C%A8%E4%B8%80%E8%B5%B7\"><span class=\"toc-text\">将一个学生的所有数据放置在一起</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E5%AD%A6%E7%94%9F%E8%AE%B0%E5%BD%95\"><span class=\"toc-text\">处理学生记录</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E6%8A%A5%E8%A1%A8\"><span class=\"toc-text\">生成报表</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%86%E5%90%84%E9%83%A8%E5%88%86%E4%BB%A3%E7%A0%81%E8%BF%9E%E6%8E%A5%E5%88%B0%E4%B8%80%E8%B5%B7\"><span class=\"toc-text\">将各部分代码连接到一起</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%86%E8%AE%A1%E7%AE%97%E6%88%90%E7%BB%A9%E7%9A%84%E7%A8%8B%E5%BA%8F%E5%88%86%E5%9D%97\"><span class=\"toc-text\">将计算成绩的程序分块</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CPP3 使用批量数据","uid":"3555062c5fedfb27efa69ce78e83937d","slug":"CPP/C3 使用批量数据","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:16.000Z","comments":true,"path":"api/articles/CPP/C3 使用批量数据.json","keywords":null,"cover":[],"text":"使用批量数据 通常需要在程序中处理多个相似数据段 编写程序读取学生的考试和家庭作业成绩并计算出总成绩 计算学生成绩 学生课程总成绩为加权平均 第一次尝试的程序如下 #include&lt;iomanip> #include&lt;ios> #include&lt;iostream...","link":"","photos":[],"count_time":{"symbolsCount":"3.5k","symbolsTime":"3 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CPP2 循环与计数","uid":"0a24b61512170bdfb39d64a4b932bf18","slug":"CPP/C2 循环与计数","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:19.000Z","comments":true,"path":"api/articles/CPP/C2 循环与计数.json","keywords":null,"cover":[],"text":"循环与计数本章中进一步增加程序的灵活性，允许我们无需重新编写程序就可以直接改变框架的长度 问题上一节中的输出 存在如下缺陷 每行输出都要与程序的某一部分（以及一个变量）相对应 即使大堆输出格式的一个简单修改，都要求我们重新编写程序 故 构造一个更为灵活的输出形式$\\to$​无需将...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}