{"title":"CPP6 使用库算法","uid":"626917d17fb14af0007b94f4b30e0461","slug":"CPP/C6 使用库算法","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:05.173Z","comments":true,"path":"api/articles/CPP/C6 使用库算法.json","keywords":null,"cover":[],"content":"<h1 id=\"使用库算法\"><a href=\"#使用库算法\" class=\"headerlink\" title=\"使用库算法\"></a>使用库算法</h1><ul>\n<li>全部容器都提供了配套的迭代器类型</li>\n<li>库保证了全部提供同一个操作的迭代器都通过同样的接口以实现其功能</li>\n</ul>\n<p>本章</p>\n<ul>\n<li>库如何利用公用接口来提供一个标准算法集合<ul>\n<li>通过使用这些算法能够避免重复编写同样的代码</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"字符处理\"><a href=\"#字符处理\" class=\"headerlink\" title=\"字符处理\"></a>字符处理</h2><h3 id=\"应用1：连接两幅字符图案\"><a href=\"#应用1：连接两幅字符图案\" class=\"headerlink\" title=\"应用1：连接两幅字符图案\"></a>应用1：连接两幅字符图案</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//方案1</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator it <span class=\"token operator\">=</span> bottom<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> bottom<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span>\n    ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//方案2</span>\nret<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>bottom<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>bottom<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//方案3</span>\n<span class=\"token function\">copy</span> <span class=\"token punctuation\">(</span>bottom<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>bottom<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">bach_inserter</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>在此处，<code>copy</code>是一个泛型算法示例，而<code>back_inserter</code>则是一个迭代器适配器的示例</p>\n<p>泛型算法</p>\n<ul>\n<li>不属于任何特定类别容器的算法</li>\n<li>会从其参数类型获得关于如何访问它所使用数据的提示</li>\n<li>标准库的泛型算法通常在它们的参数间采用迭代器来处理基本容器的元素<ul>\n<li>例如，<code>copy</code>采用了三个迭代器<code>begin</code>,<code>end</code>,<code>out</code><ul>\n<li>其作用为将区间[begin,end)中的全部元素复制到一连串从out开始的元素中，并且在必要的时候对out所属容器进行扩展</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<p>即</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token function\">copy</span><span class=\"token punctuation\">(</span>begin<span class=\"token punctuation\">,</span>end<span class=\"token punctuation\">,</span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<p>与</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>begin <span class=\"token operator\">!=</span> end<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">*</span>out<span class=\"token operator\">++</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>begin<span class=\"token operator\">++</span>\n<span class=\"token comment\">//等价于 &#123;*out = *begin; ++out; ++begin&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n<p>不同之处在于</p>\n<ul>\n<li>while循环体修改了迭代器的值</li>\n<li>copy不会对其进行修改</li>\n</ul>\n<h4 id=\"迭代器适配器\"><a href=\"#迭代器适配器\" class=\"headerlink\" title=\"迭代器适配器\"></a>迭代器适配器</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>种类</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>迭代器 iterator</td>\n<td>一种函数，会产生有着与其参数相关的属性的迭代器以做他用</td>\n</tr>\n<tr>\n<td>迭代器适配器 eg:back_inserter</td>\n<td>用一个容器作为它的参数并产生一个迭代器，在生成的迭代器被用作一个目的地的时候，会向容器末端添加数值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"应用2：实现split的另一种方法\"><a href=\"#应用2：实现split的另一种方法\" class=\"headerlink\" title=\"应用2：实现split的另一种方法\"></a>应用2：实现split的另一种方法</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">space</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//标准库提供的让我们检查一个字符是否是空格的函数，是一个重载的函数</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">not_space</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\nvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> str<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">typedef</span> string<span class=\"token double-colon punctuation\">::</span>const_iterator iter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用typedef简化迭代器类型，从而能够使用iter代替string::const_iterator</span>\n  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span>\n  iter i <span class=\"token operator\">=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    i <span class=\"token operator\">=</span> <span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span> str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>not_space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//find_if 前两个参数为一个序列的迭代器，第三个参数则是一个谓词</span>\n      \n      <span class=\"token comment\">//此处用于查找第一个非空白字符，这个字符是一个单词的开头</span>\n\n    iter j <span class=\"token operator\">=</span> <span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>space<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">//此处用于查找第二个非空白字符，这个字符是一个单词的开头</span>\n      \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> i <span class=\"token operator\">!=</span> str<span class=\"token punctuation\">,</span> <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   i <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"应用3：回文\"><a href=\"#应用3：回文\" class=\"headerlink\" title=\"应用3：回文\"></a>应用3：回文</h3><p>要求：使用库轻松解决判断一个单词是不是一个回文</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">is_palindrome</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">equal</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"应用4：查找URL\"><a href=\"#应用4：查找URL\" class=\"headerlink\" title=\"应用4：查找URL\"></a>应用4：查找URL</h3><p>要求：编写函数用来查找被称为“统一资源地址URL”的万维网地址，希望函数能够查找在它的输入中的全部URL。</p>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>URL具有如下形式的字符序列</p>\n<p>protocol-name://resource-name</p>\n<p>protocol：仅包含字母</p>\n<p>resource-name：字母、数字以及某些标点符号</p></blockquote>\n<p>代码实现</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">find_urls</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span> <span class=\"token comment\">//用于保存查找到的URL</span>\n  <span class=\"token keyword\">typedef</span> string<span class=\"token double-colon punctuation\">::</span>const_iterator iter<span class=\"token punctuation\">;</span>\n  iter b <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e <span class=\"token operator\">=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    b <span class=\"token operator\">=</span> <span class=\"token function\">url_beg</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//url_beg函数用于找出输入中的URL的开头</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b <span class=\"token operator\">!=</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      iter after <span class=\"token operator\">=</span> <span class=\"token function\">url_end</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//url_end函数用于找出输入中的URL的结尾</span>\n\n      ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">string</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>after<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      b  <span class=\"token operator\">=</span> after<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>内嵌函数<code>url_beg</code>与<code>url_end</code></p>\n<p><code>url_end</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//url_end函数用于找出输入中的URL的结尾</span>\nstring<span class=\"token double-colon punctuation\">::</span>const_iterator\n<span class=\"token function\">url_end</span><span class=\"token punctuation\">(</span>string<span class=\"token double-colon punctuation\">::</span>const_iterator b<span class=\"token punctuation\">,</span> string<span class=\"token double-colon punctuation\">::</span>const_iterator e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">find_if</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>not_url_char<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//not_url_char函数</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">not_url_char</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> string url_ch <span class=\"token operator\">=</span> <span class=\"token string\">\"~;/?:@=&amp;$-_+.!*()',\"</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>   <span class=\"token function\">isalnum</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span>url_ch<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>url_ch<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>c<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> url_ch<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//find函数会查找由它的第三个参数所给定的特定值</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>:star:新概念</p>\n<ul>\n<li>static：静态存储类别说明符<ul>\n<li>被声明为static的局部变量具有全局寿命，即其生存期贯穿了整个函数调用过程</li>\n</ul>\n</li>\n</ul>\n<p><code>url_beg</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//url_beg函数用于找出输入中的URL的开头</span>\nstring<span class=\"token double-colon punctuation\">::</span>const_iterator\n<span class=\"token function\">url_beg</span><span class=\"token punctuation\">(</span>string<span class=\"token double-colon punctuation\">::</span>const_iterator b<span class=\"token punctuation\">,</span>string<span class=\"token double-colon punctuation\">::</span>const_iterator e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n   <span class=\"token comment\">//声明并初始化一个局部变量，保存分隔符的组成字符，这个分隔符用来识别潜在的URL</span>\n  <span class=\"token keyword\">static</span> <span class=\"token keyword\">const</span> string sep <span class=\"token operator\">=</span> <span class=\"token string\">\"://\"</span><span class=\"token punctuation\">;</span> \n    \n  <span class=\"token keyword\">typedef</span> string<span class=\"token double-colon punctuation\">::</span>const_iterator iter<span class=\"token punctuation\">;</span>\n\n  iter i <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    \n   <span class=\"token comment\">//调用search查找分隔符，第一对迭代器指示我们要查找的序列，第二对迭代器指示我们希望定位的序列</span>\n  <span class=\"token comment\">// search失败则返回第二个迭代器</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token function\">search</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">,</span>sep<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>sep<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n     \n      <span class=\"token comment\">//检查这个分隔符是否填满整个输入行</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> b <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">+</span> sep<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> e<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        \n      <span class=\"token comment\">//beg标记协议名称的开头</span>\n        <span class=\"token comment\">//beg[-1]就是位置紧位于由beg所指示的字符之前的那一个字符</span>\n        <span class=\"token comment\">//isalpha检验了它的参数是否为一个字母</span>\n      iter beg <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>beg <span class=\"token operator\">!=</span> b <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isalpha</span><span class=\"token punctuation\">(</span>beg<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token operator\">--</span>beg<span class=\"token punctuation\">;</span>\n        \n        \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>beg <span class=\"token operator\">!=</span>i <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">not_url_char</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">[</span>sep<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> beg<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    i <span class=\"token operator\">+=</span> sep<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> e<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"比较计算成绩的方案\"><a href=\"#比较计算成绩的方案\" class=\"headerlink\" title=\"比较计算成绩的方案\"></a>比较计算成绩的方案</h2><p>我们想知道，从平均上来说，那些漏交家庭作业的学生和那些做了全部家庭作业的学生的总成绩上是否会有所不同，提出以下两个方案</p>\n<ul>\n<li>使用平均值代替中值，将学生没有上交的作业成绩设定为0</li>\n<li>仅使用学生实际提交的作业成绩的中值</li>\n</ul>\n<p>要实现交了全部家庭作业学生的中值成绩和漏交了一次以上作业的学生中值成绩的比较。</p>\n<p>要编写程序处理下列问题</p>\n<ul>\n<li>读全部学生记录，将做了全部家庭作业的学生与其他的学生<strong>分隔开</strong></li>\n<li>对每一组中的全部学生分别使用每一个的计算成绩的方案，报告每一组的中值成绩</li>\n</ul>\n<h3 id=\"步骤1：处理学生记录\"><a href=\"#步骤1：处理学生记录\" class=\"headerlink\" title=\"步骤1：处理学生记录\"></a>步骤1：处理学生记录</h3><p>要求：读入学生记录并对记录进行分类</p>\n<p>子函数1：<code>did_all_hw</code>用于检查是否做了全部作业</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">bool</span> <span class=\"token function\">did_all_hw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> student_info<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//find函数如果找不到所要查找的值(第三个参数)，则会返回s.homework.end()(第二个参数)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span> <span class=\"token punctuation\">(</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>homework<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span>homework<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">==</span> s<span class=\"token punctuation\">.</span>homework<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>主函数：<code>classify</code>用于读入记录并分类</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span>student_info<span class=\"token operator\">></span> did<span class=\"token punctuation\">,</span>didnt<span class=\"token punctuation\">;</span>\nstudent_info student<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//读全部的记录，根据是否做了全部的家庭作业而对它们进行分类</span>\n<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">did_all_hw</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    did<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n    didnt<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>student<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">//检查两个向量是否有包含数据</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>did<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"No student did all the homework!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>didnt<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Every student did all the homework!\"</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"步骤2：分析成绩\"><a href=\"#步骤2：分析成绩\" class=\"headerlink\" title=\"步骤2：分析成绩\"></a>步骤2：分析成绩</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu82zdy04j60ly0ammxh02.jpg\" alt=\"image-20210812205732932\"></p>\n<pre class=\"mermaid\">graph TD\nwrite_analysis --> median_analysis --> transform -->back_inserter\nmedian_analysis --> median\nmedian_analysis --> 辅助函数grade_aux</pre>\n\n<h4 id=\"write-analysis-cpp\"><a href=\"#write-analysis-cpp\" class=\"headerlink\" title=\"write_analysis.cpp\"></a><code>write_analysis.cpp</code></h4><p>要求：定义三个分析函数并将每一个分析函数当做一个参数传递给报告函数</p>\n<p>具体要求：<code>write_analysis(cout,&quot;median&quot;,median_analysis,did,didnt);</code></p>\n<p>代码实现</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// ostream&amp; out 接收输出的流</span>\n<span class=\"token comment\">// const string&amp; name 一个表示分析名称的字符串</span>\n<span class=\"token comment\">// double analysis(const vector&lt;Student_info>&amp;) 用于分析的函数</span>\n<span class=\"token comment\">// const vector&lt;Student_info>&amp; did 所分析的向量1</span>\n<span class=\"token comment\">// const vector&lt;Student_info>&amp; didnt 所分析的向量2</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">write_analysis</span><span class=\"token punctuation\">(</span>ostream<span class=\"token operator\">&amp;</span> out<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> name<span class=\"token punctuation\">,</span>\n   <span class=\"token keyword\">double</span> <span class=\"token function\">analysis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n   <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> did<span class=\"token punctuation\">,</span>\n   <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> didnt<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  out <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":median(did) = \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">analysis</span><span class=\"token punctuation\">(</span>did<span class=\"token punctuation\">)</span>\n  <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\":median(didnt)=\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">analysis</span><span class=\"token punctuation\">(</span>didnt<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>:star:新概念</p>\n<ul>\n<li><code>void</code><ul>\n<li>我们说某个函数”返回”一个void时，实际上在说它不返回值</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"median-analysis-cpp\"><a href=\"#median-analysis-cpp\" class=\"headerlink\" title=\"median_analysis.cpp\"></a><code>median_analysis.cpp</code></h5><p>子函数1：<code>median_analysis</code>，输入保存学生记录的向量，输出根据普通计算成绩的方案以计算学生成绩并返回成绩中值</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> <span class=\"token function\">median_analysis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> students<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> grades<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>grades<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">median</span><span class=\"token punctuation\">(</span>grades<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//transform将grade函数应用于students的每一个元素，并将每一个成绩添加到名为grades的向量中</span>\n<span class=\"token comment\">// 开头两个迭代器：指定待转换元素的区间</span>\n<span class=\"token comment\">// 第三个迭代器：一个目的地，保存函数的运行结果</span>\n<span class=\"token comment\">// 第四个参数：一个函数，将这个函数应用于输入序列的每个元素中以获得输出序列中的对应元素</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>函数不太有效<a href=\"#修正版本\">修正版本</a><ul>\n<li>原因1：grade函数有几个重载版本，要找一个办法来告知编译器执行具体哪个版本的grade</li>\n<li>原因2：如果有学生没做作业，grade函数将抛出一个异常，且transform函数不会对异常做任何处理动作</li>\n</ul>\n</li>\n</ul>\n<h5 id=\"median-analysis-better-cpp\"><a href=\"#median-analysis-better-cpp\" class=\"headerlink\" title=\"median_analysis_better.cpp\"></a><code>median_analysis_better.cpp</code></h5><p> <span name = \"修正版本\">修正版本</span></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> <span class=\"token function\">median_analysis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> students<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> grades<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>grades<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>grade_aux<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">median</span><span class=\"token punctuation\">(</span>grades<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//grade_aux在grade内执行try语句并处理异常</span>\n<span class=\"token comment\">//先调用第一个`grade(s)`版本</span>\n<span class=\"token comment\">//如果发生异常，将捕获并调用`grade(s.midterm,s.final,0)`版本</span>\n<span class=\"token keyword\">double</span> <span class=\"token function\">grade_aux</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">try</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>domain_error<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>midterm<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"average-analysis-cpp\"><a href=\"#average-analysis-cpp\" class=\"headerlink\" title=\"average_analysis.cpp\"></a><code>average_analysis.cpp</code></h5><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> <span class=\"token function\">average_analysis</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> students<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> grades<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">transform</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>grades<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>average_grade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">median</span><span class=\"token punctuation\">(</span>grades<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">average_grade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>midterm<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span><span class=\"token function\">average</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>homework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">double</span> <span class=\"token function\">average</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//accumulate在&lt;numeric>中声明，头两个参数指示了一个区间</span>\n  <span class=\"token comment\">//第三个参数给定值是求和结果的开始，使用0.0为了保证求和结果有小数</span>\n  <span class=\"token comment\">//函数所做工作是对区间中的值求和</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">accumulate</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0.0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h5 id=\"optimistic-median-analysis-cpp\"><a href=\"#optimistic-median-analysis-cpp\" class=\"headerlink\" title=\"optimistic_median_analysis.cpp\"></a><code>optimistic_median_analysis.cpp</code></h5><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">double</span> <span class=\"token function\">optimistic_median</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> nonzero<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">remove_copy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>homework<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span>homework<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>nonzero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>nonzero<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>midterm<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span>midterm<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">.</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span><span class=\"token function\">median</span><span class=\"token punctuation\">(</span>nonzero<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"对学生进行分类并回顾我们的问题\"><a href=\"#对学生进行分类并回顾我们的问题\" class=\"headerlink\" title=\"对学生进行分类并回顾我们的问题\"></a>对学生进行分类并回顾我们的问题</h2><p>问题：记录中某一部分复制到单独向量并从现有向量删除这些记录</p>\n<p>上述问题在输入长度增加时，对这个问题的明显而简单的求解方法的性能难以断定</p>\n<p>解决方法：用一个链表来代替向量从而解决这个性能问题</p>\n<h3 id=\"方案1：两次传递\"><a href=\"#方案1：两次传递\" class=\"headerlink\" title=\"方案1：两次传递\"></a>方案1：两次传递</h3><p><code>extract_fails1.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span>\n<span class=\"token function\">extract_fails</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> students<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span> fail<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//remove_copy_if 请求删除每一个满足谓词pgrade的元素</span>\n  <span class=\"token function\">remove_copy_if</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">back_inserter</span><span class=\"token punctuation\">(</span>fail<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>pgrade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  students<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token function\">remove_if</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>fgrade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> fail<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//pgrade</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">pgrade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">!</span><span class=\"token function\">fgrade</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"方案2：一次传递\"><a href=\"#方案2：一次传递\" class=\"headerlink\" title=\"方案2：一次传递\"></a>方案2：一次传递</h3><p><code>extract_fails2.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span>\n<span class=\"token function\">extract_fails</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> students<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span> <span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span>\n    <span class=\"token function\">stable_partition</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>pgrade<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nvector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span> <span class=\"token function\">fail</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nstudents<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">return</span> fail<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"算法、容器以及迭代器\"><a href=\"#算法、容器以及迭代器\" class=\"headerlink\" title=\"算法、容器以及迭代器\"></a>算法、容器以及迭代器</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>算法作用于容器的元素—并非作用于容器</p>\n<p>容器-算法</p>\n<p>迭代器-算法</p>\n<p>迭代器-容器</p></blockquote>\n<p><code>sort</code>,<code>remove_if</code>,<code>partition</code>函数都会讲基本容器中的元素移动到新的位置，但是并没有改变容器本身的特性</p>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>代码</th>\n<th>名称</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>static type variable</code></td>\n<td>类型修饰符</td>\n<td>用于局部声明，声明具有static存储类型的variable<br />此变量值会在这个作用域的执行过程中保持不变</td>\n</tr>\n<tr>\n<td><code>void</code></td>\n<td>类型</td>\n<td>用它表示一个函数并没有产生返回值<br />这样的函数可以通过一条<code>return;</code>语句退出</td>\n</tr>\n<tr>\n<td><code>insert_iterators</code></td>\n<td>迭代器适配器</td>\n<td>让关联的容器动态增长</td>\n</tr>\n</tbody>\n</table>\n</div>\n","text":"使用库算法 全部容器都提供了配套的迭代器类型 库保证了全部提供同一个操作的迭代器都通过同样的接口以实现其功能 本章 库如何利用公用接口来提供一个标准算法集合 通过使用这些算法能够避免重复编写同样的代码 字符处理应用1：连接两幅字符图案//方案1 for (vector&lt;st...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%BA%93%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">使用库算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E5%A4%84%E7%90%86\"><span class=\"toc-text\">字符处理</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A81%EF%BC%9A%E8%BF%9E%E6%8E%A5%E4%B8%A4%E5%B9%85%E5%AD%97%E7%AC%A6%E5%9B%BE%E6%A1%88\"><span class=\"toc-text\">应用1：连接两幅字符图案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E9%80%82%E9%85%8D%E5%99%A8\"><span class=\"toc-text\">迭代器适配器</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A82%EF%BC%9A%E5%AE%9E%E7%8E%B0split%E7%9A%84%E5%8F%A6%E4%B8%80%E7%A7%8D%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">应用2：实现split的另一种方法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A83%EF%BC%9A%E5%9B%9E%E6%96%87\"><span class=\"toc-text\">应用3：回文</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BA%94%E7%94%A84%EF%BC%9A%E6%9F%A5%E6%89%BEURL\"><span class=\"toc-text\">应用4：查找URL</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%AF%94%E8%BE%83%E8%AE%A1%E7%AE%97%E6%88%90%E7%BB%A9%E7%9A%84%E6%96%B9%E6%A1%88\"><span class=\"toc-text\">比较计算成绩的方案</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A41%EF%BC%9A%E5%A4%84%E7%90%86%E5%AD%A6%E7%94%9F%E8%AE%B0%E5%BD%95\"><span class=\"toc-text\">步骤1：处理学生记录</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AD%A5%E9%AA%A42%EF%BC%9A%E5%88%86%E6%9E%90%E6%88%90%E7%BB%A9\"><span class=\"toc-text\">步骤2：分析成绩</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#write-analysis-cpp\"><span class=\"toc-text\">write_analysis.cpp</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#median-analysis-cpp\"><span class=\"toc-text\">median_analysis.cpp</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#median-analysis-better-cpp\"><span class=\"toc-text\">median_analysis_better.cpp</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#average-analysis-cpp\"><span class=\"toc-text\">average_analysis.cpp</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#optimistic-median-analysis-cpp\"><span class=\"toc-text\">optimistic_median_analysis.cpp</span></a></li></ol></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E5%AD%A6%E7%94%9F%E8%BF%9B%E8%A1%8C%E5%88%86%E7%B1%BB%E5%B9%B6%E5%9B%9E%E9%A1%BE%E6%88%91%E4%BB%AC%E7%9A%84%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">对学生进行分类并回顾我们的问题</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%A1%881%EF%BC%9A%E4%B8%A4%E6%AC%A1%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">方案1：两次传递</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%96%B9%E6%A1%882%EF%BC%9A%E4%B8%80%E6%AC%A1%E4%BC%A0%E9%80%92\"><span class=\"toc-text\">方案2：一次传递</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E3%80%81%E5%AE%B9%E5%99%A8%E4%BB%A5%E5%8F%8A%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">算法、容器以及迭代器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"Manim1 Installation","uid":"45e3d46203ca5cc5718cda218b7c4f03","slug":"manim/C1 installation","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:58:07.799Z","comments":true,"path":"api/articles/manim/C1 installation.json","keywords":null,"cover":[],"text":"manim安装(MacOS)相关依赖项的安装https://docs.manim.community/en/stable/installation/mac.html To install cairo: brew install cairo To install ffmpeg: b...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"Manim","slug":"Manim","count":3,"path":"api/categories/Manim.json"}],"tags":[{"name":"Manim","slug":"Manim","count":3,"path":"api/tags/Manim.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"Manim3 UsingText","uid":"60bd8fd469f282ac6b13a9d5e27c3f6b","slug":"manim/C3 UsingText","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:59:20.369Z","comments":true,"path":"api/articles/manim/C3 UsingText.json","keywords":null,"cover":[],"text":"使用文本without $LaTeX$​​文本helloworld.py from manim import * class HelloWorld(Scene): def construct(self): text = Text(\"Hello world\").scale(3) s...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"Manim","slug":"Manim","count":3,"path":"api/categories/Manim.json"}],"tags":[{"name":"Manim","slug":"Manim","count":3,"path":"api/tags/Manim.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}