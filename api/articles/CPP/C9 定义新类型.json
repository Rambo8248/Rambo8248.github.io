{"title":"CPP9 定义新类型","uid":"260ea000f421b3eddad461c7e5d42b80","slug":"CPP/C9 定义新类型","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:48:54.644Z","comments":true,"path":"api/articles/CPP/C9 定义新类型.json","keywords":null,"cover":[],"content":"<h1 id=\"定义新类型\"><a href=\"#定义新类型\" class=\"headerlink\" title=\"定义新类型\"></a>定义新类型</h1><p>可以将C++分成两种</p>\n<ul>\n<li>内部类型 -&gt; 被定义成语言核心的一部分</li>\n<li>自定义类型(class type) </li>\n</ul>\n<p>C+设计思想</p>\n<ul>\n<li>应该让程序员创建与内部类型一样易于使用的类型<ul>\n<li>创建具有简明直观的接口的类型<ul>\n<li>实质性的语言支持</li>\n<li>类的设计过程中的体验和判断</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"Student-info回顾\"><a href=\"#Student-info回顾\" class=\"headerlink\" title=\"Student_info回顾\"></a><code>Student_info</code>回顾</h2><p>三个问题</p>\n<ul>\n<li>希望使用我们的函数的程序员必须遵从某些规定</li>\n<li>代码在读取数据后不改变</li>\n<li><code>Student_info</code>结构的接口非常分散</li>\n</ul>\n<h2 id=\"自定义类型\"><a href=\"#自定义类型\" class=\"headerlink\" title=\"自定义类型\"></a>自定义类型</h2><p>自定义类型：用于将相关的数据值组合在一个数据结构中的技术</p>\n<ul>\n<li>能够将这个数据结构当做一个单独的实体进行处理</li>\n<li>使用<code>Student_info</code>类型的程序员可以而且必须直接操作这些数据元素<ul>\n<li>由于<code>Student_info</code>定义并没有限制对数据元素的访问<ul>\n<li>由于对于<code>Student_info</code>并没有其他可用的操作</li>\n</ul>\n</li>\n<li>我们的要求<ul>\n<li>不想让用户直接访问数据</li>\n<li>希望将<code>Student_info</code>对象的存储方式的实现细节隐藏起来</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"成员函数\"><a href=\"#成员函数\" class=\"headerlink\" title=\"成员函数\"></a>成员函数</h3><h3 id=\"非成员函数\"><a href=\"#非成员函数\" class=\"headerlink\" title=\"非成员函数\"></a>非成员函数</h3><h2 id=\"保护\"><a href=\"#保护\" class=\"headerlink\" title=\"保护\"></a>保护</h2><p>将grade和read函数定义为成员后，修正了问题的一半</p>\n<ul>\n<li><code>Student_info</code>类型的用户不需要再直接操控对象的内部状态</li>\n<li>我们希望将数据隐藏起来并允许用户仅仅通过成员函数访问这些数据</li>\n</ul>\n<p><code>Student_info.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student_info</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>homework<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    std<span class=\"token double-colon punctuation\">::</span>string n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> homework<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">compare</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中</p>\n<ul>\n<li>Public：接口可供调用</li>\n<li>Private：内部数据不可改变</li>\n</ul>\n<p><code>Class</code>于<code>Struct</code>的区别</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>class</code></td>\n<td>在第一个{和第一个保护标识符之间全部成员都是<strong>私有</strong></td>\n</tr>\n<tr>\n<td><code>struct</code></td>\n<td>在第一个{和第一个保护标识符之间全部成员都是<strong>公有</strong></td>\n</tr>\n</tbody></table>\n<h2 id=\"Student-info类\"><a href=\"#Student-info类\" class=\"headerlink\" title=\"Student_info类\"></a><code>Student_info</code>类</h2><p><code>Student_info.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student_info</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">valid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> <span class=\"token operator\">!</span>homework<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    std<span class=\"token double-colon punctuation\">::</span>string n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> homework<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">compare</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h2><p>构造函数的作用 ：定义对象的初始化方式</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Student_info</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  \t<span class=\"token function\">Student_info</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//构造一个空的Student_info对象</span>\n  \t<span class=\"token function\">Student_info</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 读一个流从而构造一个对象</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<table>\n<thead>\n<tr>\n<th>构造函数</th>\n<th>特点</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>默认构造函数</td>\n<td>不带参数的构造函数</td>\n<td><code>Student_info::Student_info():midterm(0),final(0)&#123; &#125;</code></td>\n</tr>\n<tr>\n<td>带参数的构造函数</td>\n<td>带参数的构造函数</td>\n<td><code>Student_info::Student_info() (istream&amp; is)&#123;read(is);&#125;</code></td>\n</tr>\n</tbody></table>\n<p>构造函数初始化程序</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu83thpxpj619m0u0tal02.jpg\" alt=\"截屏2021-08-26 下午3.29.34\"></p>\n<p>![截屏2021-08-17 下午10.34.03](/Users/zhangweijian/Desktop/公众号/AcceleratedCpp/C9 定义新类型.assets/截屏2021-08-17 下午10.34.03.png)</p>\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\">graph TD\n实现分配内存以保存这个对象 --&gt; 按照构造函数初始化程序列表而对对象进行初始化\n--&gt; 执行构造函数的函数体<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"使用Student-info类\"><a href=\"#使用Student-info类\" class=\"headerlink\" title=\"使用Student_info类\"></a>使用<code>Student_info</code>类</h2><p><code>main.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span> students<span class=\"token punctuation\">;</span>\n    Student_info record<span class=\"token punctuation\">;</span>\n    string<span class=\"token double-colon punctuation\">::</span>size_type maxlen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        maxlen <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxlen<span class=\"token punctuation\">,</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>maxlen <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">double</span> final_grade <span class=\"token operator\">=</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            streamsize prec <span class=\"token operator\">=</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">precision</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> final_grade <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span>prec<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>domain_error e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><table>\n<thead>\n<tr>\n<th>名词</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>用户自定义类型</td>\n<td>被定义成<code>struct</code>或者<code>class</code></td>\n</tr>\n<tr>\n<td>保护标识符</td>\n<td>控制着对一个类类型的成员的访问方式</td>\n</tr>\n<tr>\n<td>成员函数</td>\n<td>与数据相同，类型也可以定义成员函数<br />对一个特定对象的成员函数调用实际上隐含着对这个对象的引用<br />成员函数既可以在类定义的内部定义，也可以在类定义以外的地方定义</td>\n</tr>\n<tr>\n<td>构造函数</td>\n<td>特殊的成员函数<br />定义类型的对象是如何被初始化的</td>\n</tr>\n<tr>\n<td>构造函数初始化程序列表</td>\n<td>构造函数初始化程序是一个用逗号分隔的”member-name(value)”的列表<br />每一个member-name所表示的成员都会被初始化成相关联的value值</td>\n</tr>\n</tbody></table>\n","text":"定义新类型可以将C++分成两种 内部类型 -&gt; 被定义成语言核心的一部分 自定义类型(class type) C+设计思想 应该让程序员创建与内部类型一样易于使用的类型 创建具有简明直观的接口的类型 实质性的语言支持 类的设计过程中的体验和判断 Student_info回顾...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E6%96%B0%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">定义新类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Student-info%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\">Student_info回顾</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%87%AA%E5%AE%9A%E4%B9%89%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">自定义类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">成员函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%9D%9E%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">非成员函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BF%9D%E6%8A%A4\"><span class=\"toc-text\">保护</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Student-info%E7%B1%BB\"><span class=\"toc-text\">Student_info类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">构造函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8Student-info%E7%B1%BB\"><span class=\"toc-text\">使用Student_info类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CPP7 使用关联容器","uid":"c6bbdc5859805502fec5f66437416592","slug":"CPP/C7 使用关联容器","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:01.416Z","comments":true,"path":"api/articles/CPP/C7 使用关联容器.json","keywords":null,"cover":[],"text":"使用关联容器 顺序容器：给容器元素选择适当顺序后，它们会按照我们所选择的顺序将元素保存起来 关联容器：容器会自动将它们的元素安排在一个序列中 支持高效查找的容器关联容器：自动将它们元素安排在一个序列中，利用这种排序方法让我们可以更快速地对特定元素进行定位–并不需要我们自己保持容器...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CPP8 编写泛型函数","uid":"916993f3303db0d9f66253cbc5cc5316","slug":"CPP/C8 编写泛型函数","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:48:58.328Z","comments":true,"path":"api/articles/CPP/C8 编写泛型函数.json","keywords":null,"cover":null,"text":"编写泛型函数本书第一部分：编写程序以便解决某些具体问题 使用c++语言基本要素以及标准库提供的抽象 从这一章开始：学习编写抽象的方法 C8 讨论泛型函数 C9-C12 演示如何实现抽象数据类型 从C13开始：学习面向对象程序设计方法OOP 什么是泛型函数表面上看，我们在编写函数时...","link":"","photos":[],"count_time":{"symbolsCount":"4.9k","symbolsTime":"4 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}