{"title":"CPP13 继承与动态绑定的使用","uid":"f1fd64304e69297c15b134a3ddae98c2","slug":"CPP/C13 继承与动态绑定的使用","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:48:41.470Z","comments":true,"path":"api/articles/CPP/C13 继承与动态绑定的使用.json","keywords":null,"cover":[],"content":"<h1 id=\"继承与动态绑定的使用\"><a href=\"#继承与动态绑定的使用\" class=\"headerlink\" title=\"继承与动态绑定的使用\"></a>继承与动态绑定的使用</h1><h2 id=\"继承\"><a href=\"#继承\" class=\"headerlink\" title=\"继承\"></a>继承</h2><p>成绩问题中，研究生学分成绩的记录与本科生的学分成绩记录基本一致，唯一差别在于研究生学分成绩记录添加了一个与论文相关的属性。对于这种关系来说，最自然的解决办法就是使用<strong>继承(inheritance)</strong></p>\n<p>定义两个类</p>\n<ul>\n<li>一个类集成一些核心的公共操作</li>\n<li>另一个类增加了与研究生学分成绩有关的操作</li>\n</ul>\n<p><code>core_class.h</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Core</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  \t<span class=\"token comment\">//构造函数</span>\n    <span class=\"token function\">Core</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Core</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span>\n      \n    <span class=\"token comment\">//成员函数</span>\n    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read_common</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>string n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> homework<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>grad_class.h</code></p>\n<ul>\n<li>新定义名为<code>Grad</code>的新类型</li>\n<li>与<code>Core</code>的关系<ul>\n<li>派生</li>\n<li>继承</li>\n<li>基类</li>\n<li><code>Core</code>的每个成员(除构造函数、赋值运算符函数和析构函数外)都是<code>Grad</code>的成员</li>\n<li><code>Grad</code>可以加入自己的成员<ul>\n<li><code>thesis</code></li>\n<li>构造函数</li>\n</ul>\n</li>\n<li><code>Grad</code>可以重定义基类中的成员<ul>\n<li><code>grade</code></li>\n<li><code>read</code></li>\n</ul>\n</li>\n<li><code>Grad</code>不可以删除任何基类成员</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//此处的public关键字表明Grad类从Core类派生出来</span>\n<span class=\"token comment\">//Grad将Core的公有接口继承过来用于作为Grad公有接口的一部分</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Grad</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Core</span></span><span class=\"token punctuation\">&#123;</span> \n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  \t<span class=\"token comment\">//构造函数</span>\n    <span class=\"token function\">Grad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Grad</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  \t<span class=\"token comment\">//成员函数</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> thesis<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"回顾保护类型\"><a href=\"#回顾保护类型\" class=\"headerlink\" title=\"回顾保护类型\"></a>回顾保护类型</h3><p>问题：</p>\n<ul>\n<li><code>Core</code>类中的全部4个成员数据以及<code>read_common</code>成员函数都不能被<code>Grad</code>类中的成员函数所访问</li>\n<li>只有这个类本身与它的友元可以对该类的私有成员进行访问</li>\n<li>要实现<code>Grad</code>类中的<code>grade</code>函数与<code>read</code>函数，必须能够访问<code>Core</code>类中的私有成员</li>\n</ul>\n<p>解决方案：使用<code>protection</code>关键字重新编写<code>Core</code>类</p>\n<p><code>core_class_protected.h</code></p>\n<ul>\n<li>protected关键字<ul>\n<li>为<code>Grad</code>这样的派生类赋予了访问基类中保护成员的权力</li>\n<li>同时又能够使这些成员不被类的其他使用者所访问</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Core</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Core</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">Core</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span>\n    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read_common</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> homework<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    std<span class=\"token double-colon punctuation\">::</span>string n<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/*\n    std::istream&amp; read_common(std::istream&amp;);\n    double midterm,final;\n    std::vector&lt;double> homework;\n    */</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"操作函数\"><a href=\"#操作函数\" class=\"headerlink\" title=\"操作函数\"></a>操作函数</h3><p>问题：为了完成我们的类，还需要编写4个构造函数和6个操作函数</p>\n<ul>\n<li>构造函数<ul>\n<li><code>Core</code>类默认构造函数</li>\n<li><code>Core</code>类带istream类型参数的构造函数</li>\n<li><code>Grad</code>类默认构造函数</li>\n<li><code>Grad</code>类带istream类型参数的构造函数</li>\n</ul>\n</li>\n<li>操作函数<ul>\n<li><code>Core</code>类中的<code>name</code>与<code>read_common</code>函数</li>\n<li><code>Core</code>类中的<code>read</code>与<code>grade</code>函数</li>\n<li><code>Grad</code>类中的<code>read</code>与<code>grade</code>函数</li>\n</ul>\n</li>\n</ul>\n<p>解决：</p>\n<p><code>Core</code>类中的操作函数<code>core_class_func.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">string <span class=\"token class-name\">Core</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//Core类的操作函数</span>\n\n<span class=\"token comment\">//Core::name</span>\nstring <span class=\"token class-name\">Core</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//Core::grade</span>\n<span class=\"token keyword\">double</span> <span class=\"token class-name\">Core</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">,</span>homework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//Core::read_common</span>\nistream<span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Core</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">read_common</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//读出学生的姓名与考试成绩并储存起来</span>\n    in <span class=\"token operator\">>></span> n <span class=\"token operator\">>></span> midterm <span class=\"token operator\">>></span> <span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//Core::read</span>\nistream<span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Core</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">read_common</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">read_hw</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span>homework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>Grad</code>类中的操作函数<code>grad_class_func.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//Grad类的操作函数</span>\n\n<span class=\"token comment\">//Grad::read</span>\nistream<span class=\"token operator\">&amp;</span> <span class=\"token class-name\">Grad</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Core</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">read_common</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    in <span class=\"token operator\">>></span> thesis<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">read_hw</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span>Core<span class=\"token double-colon punctuation\">::</span>homework<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//Grad::grade</span>\n<span class=\"token keyword\">double</span> <span class=\"token class-name\">Grad</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">min</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Core</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>thesis<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"构造函数\"><a href=\"#构造函数\" class=\"headerlink\" title=\"构造函数\"></a>构造函数</h3><p>派生类对象在构造时经过的步骤</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu84jvfhnj61eq0lomzg02.jpg\" alt=\"截屏2021-08-26 下午3.30.13\"></p>\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\">graph TD\n为整个对象分配内存空间.包括基类与派生类中定义的数据\n--&gt; 调用基类的构造函数以便初始化对象中的基类部分数据\n--&gt; 使用构造初始化器对对象的派生类部分数据进行初始化\n--&gt; 如果有的话执行派生类构造函数的函数体<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>如何选择调用基类中的哪一个构造函数</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu84r5gynj61dr0u0add02.jpg\" alt=\"截屏2021-08-26 下午3.30.28\"></p>\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\">graph TD\n初始化\n--&gt;使用构造初始化器指定想要调用的基类构造函数\n--&gt; 在派生类的构造初始化器中使用它的基类名\n--&gt;在基类名后附上一个参数列表\n--&gt;参数用于构造对象中基类部分的初始值\n--&gt;同时编译器根据参数的个数与类型选择调用基类中的哪一个构造函数\n\n初始化--&gt;初始化时没有指定调用基类中的哪一个构造函数\n--&gt; 编译器调用基类默认构造函数以构造对象的基类部分<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//Core构造函数</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Core</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//Core类的默认构造函数</span>\n    <span class=\"token function\">Core</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">midterm</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//使用一个istream类型变量构造一个core对象</span>\n    <span class=\"token function\">Core</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//Grad构造函数</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Grad</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Core</span></span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//两个构造函数均隐式地调用Core::Core()函数，以初始化对象中的基类部分</span>\n    <span class=\"token function\">Grad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">thesis</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">Grad</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"多态与虚函数\"><a href=\"#多态与虚函数\" class=\"headerlink\" title=\"多态与虚函数\"></a>多态与虚函数</h2><h3 id=\"虚函数\"><a href=\"#虚函数\" class=\"headerlink\" title=\"虚函数\"></a>虚函数</h3><p>我们希望系统根据实际传递给函数的参数类型来运行正确版本的 <code>grade</code>函数，而参数类型只有到运行时才是已知的。</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Core</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p><code>grade</code>是一个虚函数</p>\n</li>\n<li><p>调用<code>compare_grades</code>函数，程序执行时由参数<code>c1</code>和<code>c2</code>的实际类型决定调用哪个<code>grade</code>函数</p>\n<ul>\n<li><p>参数为<code>Grad</code>类型对象，调用<code>Grad::grade</code>函数</p>\n<ul>\n<li>```cpp<br>bool compare_grades(const Grad&amp; c1,const Grad&amp; c2)<br>{<br>  return c1.grade() &lt; c2.grade();<br>}<pre class=\"line-numbers language-none\"><code class=\"language-none\">\n- 参数为&#96;Core&#96;类型对象，调用&#96;Core::grade&#96;函数\n\n  - &#96;&#96;&#96;cpp\n    bool compare_grades(const Core&amp; c1,const Core&amp; c2)\n    &#123;\n      return c1.grade() &lt; c2.grade();\n    &#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"动态绑定\"><a href=\"#动态绑定\" class=\"headerlink\" title=\"动态绑定\"></a>动态绑定</h3><table>\n<thead>\n<tr>\n<th align=\"center\">绑定类型</th>\n<th align=\"center\">特点</th>\n<th>参数类型</th>\n</tr>\n</thead>\n<tbody><tr>\n<td align=\"center\">动态绑定</td>\n<td align=\"center\">指在<strong>运行时</strong>才决定调用什么函数，<strong>而不是编译时候</strong>就决定下来</td>\n<td>指针或引用</td>\n</tr>\n<tr>\n<td align=\"center\">静态绑定</td>\n<td align=\"center\">以一个对象的名义调用一个虚拟函数，即在编译时就被绑定好</td>\n<td>对象</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">Core c<span class=\"token punctuation\">;</span>\nGrad g<span class=\"token punctuation\">;</span>\nCore<span class=\"token operator\">*</span> p<span class=\"token punctuation\">;</span>\nCore<span class=\"token operator\">&amp;</span> r <span class=\"token operator\">=</span> g<span class=\"token punctuation\">;</span>\n\nc<span class=\"token punctuation\">.</span><span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//对Core::grade()函数进行静态绑定</span>\ng<span class=\"token punctuation\">.</span><span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//对Grad::grade()函数进行静态绑定</span>\np <span class=\"token operator\">-></span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//根据p所指对象的类型进行动态绑定</span>\nr<span class=\"token punctuation\">.</span><span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//根据r所引用对象的类型进行动态绑定</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"多态性\"><a href=\"#多态性\" class=\"headerlink\" title=\"多态性\"></a>多态性</h3><p>多态</p>\n<ul>\n<li><p>在要求一个指向基类对象的指针或引用的地方，我们可以用一个指向派生类的指针或引用来代替</p>\n</li>\n<li><p>指用一个类型表示几种类型的能力</p>\n</li>\n<li><p><strong>C++通过虚函数的动态绑定特性以支持多态性</strong></p>\n</li>\n</ul>\n<h3 id=\"简单回顾\"><a href=\"#简单回顾\" class=\"headerlink\" title=\"简单回顾\"></a>简单回顾</h3><p>将read函数也声明为一个虚拟函数，改动后的类如下：</p>\n<p><code>core2.h</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Core</span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Core</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">midterm</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">Core</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>string <span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">virtual</span> std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//可以被全部派生类的成员访问</span>\n    std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read_common</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">double</span> midterm<span class=\"token punctuation\">,</span><span class=\"token keyword\">final</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span>homework<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token comment\">//只能被Core类的成员访问</span>\n    std<span class=\"token double-colon punctuation\">::</span>string n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>grad2.h</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">Grad</span><span class=\"token operator\">:</span><span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Core</span></span><span class=\"token punctuation\">&#123;</span>\n<span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Grad</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">:</span><span class=\"token function\">thesis</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token function\">Grad</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> is<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token keyword\">double</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span><span class=\"token punctuation\">;</span>\n    std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>istream<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">double</span> thesis<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">bool</span> <span class=\"token function\">compare</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Core<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> Core<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"使用继承解决问题\"><a href=\"#使用继承解决问题\" class=\"headerlink\" title=\"使用继承解决问题\"></a>使用继承解决问题</h2><p>处理Core类的程序</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    vector<span class=\"token operator\">&lt;</span>Core<span class=\"token operator\">></span> students<span class=\"token punctuation\">;</span>\n    Core record<span class=\"token punctuation\">;</span>\n    string<span class=\"token double-colon punctuation\">::</span>size_type maxlen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//读入并存储数据</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        maxlen <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxlen<span class=\"token punctuation\">,</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//将学生记录按字母排序</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//输出学生姓名与成绩</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Core<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>maxlen <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">double</span> final_grade <span class=\"token operator\">=</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            streamsize prec <span class=\"token operator\">=</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">precision</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">&lt;&lt;</span> final_grade <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span>prec<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>domain_error e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>      \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>处理Grad类的程序</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    vector<span class=\"token operator\">&lt;</span>Grad<span class=\"token operator\">></span> students<span class=\"token punctuation\">;</span>\n    Grad record<span class=\"token punctuation\">;</span>\n    string<span class=\"token double-colon punctuation\">::</span>size_type maxlen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//读入并存储数据</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">read</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">&#123;</span>\n        maxlen <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxlen<span class=\"token punctuation\">,</span>record<span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>record<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    <span class=\"token comment\">//将学生记录按字母排序</span>\n    <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>compare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//输出学生姓名与成绩</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Grad<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        cout <span class=\"token operator\">&lt;&lt;</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>maxlen <span class=\"token operator\">+</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token string\">' '</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">try</span>\n        <span class=\"token punctuation\">&#123;</span>\n            <span class=\"token keyword\">double</span> final_grade <span class=\"token operator\">=</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">grade</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            streamsize prec <span class=\"token operator\">=</span> cout<span class=\"token punctuation\">.</span><span class=\"token function\">precision</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">&lt;&lt;</span> final_grade <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">setprecision</span><span class=\"token punctuation\">(</span>prec<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>\n        <span class=\"token keyword\">catch</span><span class=\"token punctuation\">(</span>domain_error e<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">&#123;</span>\n            cout <span class=\"token operator\">&lt;&lt;</span> e<span class=\"token punctuation\">.</span><span class=\"token function\">what</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">&#125;</span>      \n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"一个简单的句柄类\"><a href=\"#一个简单的句柄类\" class=\"headerlink\" title=\"一个简单的句柄类\"></a>一个简单的句柄类</h2><h2 id=\"使用句柄类\"><a href=\"#使用句柄类\" class=\"headerlink\" title=\"使用句柄类\"></a>使用句柄类</h2><h2 id=\"微妙之处\"><a href=\"#微妙之处\" class=\"headerlink\" title=\"微妙之处\"></a>微妙之处</h2>","text":"继承与动态绑定的使用继承成绩问题中，研究生学分成绩的记录与本科生的学分成绩记录基本一致，唯一差别在于研究生学分成绩记录添加了一个与论文相关的属性。对于这种关系来说，最自然的解决办法就是使用继承(inheritance) 定义两个类 一个类集成一些核心的公共操作 另一个类增加了与研...","link":"","photos":[],"count_time":{"symbolsCount":"7k","symbolsTime":"6 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF%E4%B8%8E%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A%E7%9A%84%E4%BD%BF%E7%94%A8\"><span class=\"toc-text\">继承与动态绑定的使用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%BB%A7%E6%89%BF\"><span class=\"toc-text\">继承</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E9%A1%BE%E4%BF%9D%E6%8A%A4%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">回顾保护类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">操作函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9E%84%E9%80%A0%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">构造函数</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%80%81%E4%B8%8E%E8%99%9A%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">多态与虚函数</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%99%9A%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">虚函数</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8A%A8%E6%80%81%E7%BB%91%E5%AE%9A\"><span class=\"toc-text\">动态绑定</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%9A%E6%80%81%E6%80%A7\"><span class=\"toc-text\">多态性</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%80%E5%8D%95%E5%9B%9E%E9%A1%BE\"><span class=\"toc-text\">简单回顾</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E7%BB%A7%E6%89%BF%E8%A7%A3%E5%86%B3%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">使用继承解决问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%B8%AA%E7%AE%80%E5%8D%95%E7%9A%84%E5%8F%A5%E6%9F%84%E7%B1%BB\"><span class=\"toc-text\">一个简单的句柄类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%8F%A5%E6%9F%84%E7%B1%BB\"><span class=\"toc-text\">使用句柄类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E5%A6%99%E4%B9%8B%E5%A4%84\"><span class=\"toc-text\">微妙之处</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CPP10 管理内存与低级数据结构","uid":"f33231007a38d63e975cc1fea425a1a6","slug":"CPP/C10 管理内存与低级数据结构","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:48:51.512Z","comments":true,"path":"api/articles/CPP/C10 管理内存与低级数据结构.json","keywords":null,"cover":[],"text":"管理内存与低级数据结构由于使用标准库无法解决全部问题，因此非常多的C++程序经常使用“低级”技巧 本章 数组和指针 new和delete表达式动态地对内存进行分配 指针与数组 名词 定义 数组 容器的一种，与向量类似，但没有向量功能那么强大 指针 随机存取的迭代器，可用于存取数组...","link":"","photos":[],"count_time":{"symbolsCount":"2.3k","symbolsTime":"2 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CPP2 循环与计数","uid":"0a24b61512170bdfb39d64a4b932bf18","slug":"CPP/C2 循环与计数","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:19.523Z","comments":true,"path":"api/articles/CPP/C2 循环与计数.json","keywords":null,"cover":[],"text":"循环与计数本章中进一步增加程序的灵活性，允许我们无需重新编写程序就可以直接改变框架的长度 问题上一节中的输出 存在如下缺陷 每行输出都要与程序的某一部分（以及一个变量）相对应 即使大堆输出格式的一个简单修改，都要求我们重新编写程序 故 构造一个更为灵活的输出形式$\\to$​无需将...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}