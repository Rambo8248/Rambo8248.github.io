{"title":"CPP5 使用顺序容器和分析字符串","uid":"8634375c41badd07a389bc135cc9590c","slug":"CPP/C5 使用顺序容器和分析字符串","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:07.000Z","comments":true,"path":"api/articles/CPP/C5 使用顺序容器和分析字符串.json","keywords":null,"cover":[],"content":"<h1 id=\"使用顺序容器和分析字符串\"><a href=\"#使用顺序容器和分析字符串\" class=\"headerlink\" title=\"使用顺序容器和分析字符串\"></a>使用顺序容器和分析字符串</h1><p>本章</p>\n<ul>\n<li>更深入了解库的使用方法</li>\n<li>标准库<ul>\n<li>提供有用的数据结构和函数</li>\n<li>反映一个具有一致性的体系结构<ul>\n<li>一旦了解了一种容器的行为特性，就可以非常轻松地掌握全部库容器的使用方法</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"将学生进行分类\"><a href=\"#将学生进行分类\" class=\"headerlink\" title=\"将学生进行分类\"></a>将学生进行分类</h2><p>要求：算出学生成绩之外，区分学生能否通过课程</p>\n<p>实现思路：</p>\n<ul>\n<li><code>Student_info</code>记录的向量</li>\n<li>抽取不能通过的学生记录存储在另一个向量</li>\n<li>原先向量删除不能通过的学生数据</li>\n</ul>\n<p>代码实现1：保存两个副本</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//判断学生是否不及格</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">fgrade</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Student_info<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">grade</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">60</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 学生s的grade小于60则返回 True，否则返回False</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//第一次尝试将及格和不及格的学生记录分开</span>\nvector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span> <span class=\"token function\">extract_fails</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> students<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span> pass<span class=\"token punctuation\">,</span>fail<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token punctuation\">)</span><span class=\"token double-colon punctuation\">::</span>size_type i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fgrade</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      fail<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n      pass<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    students <span class=\"token operator\">=</span> pass<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> fail<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">//整体思路：定义两个向量，循环判断是否不及格，不及格则压入fail，否则压入pass</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>代码实现2：就地删除元素</p>\n<p>上述<code>extract_fails</code>函数缺陷</p>\n<ul>\n<li>要求有足够内存保存每个学生记录的两个副本<ul>\n<li>原因在于不断增加pass和fail长度的同时，原来记录依然存在</li>\n</ul>\n</li>\n</ul>\n<p>解决办法</p>\n<ul>\n<li>使用一个对我们算法更加合适的数据结构 :ballot_box_with_check:本节</li>\n<li>使用一个更加聪明的算法以避免在原先设计中额外开销</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//第二次尝试：函数正确，但是可能会相当慢</span>\nvector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span> <span class=\"token function\">extract_fails</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> students<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span>  fail<span class=\"token punctuation\">;</span>\n    vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fgrade</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        fail<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        students<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span>\n      <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> fail<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>小结：</p>\n<ul>\n<li>两个版本的<code>extract_fails</code>函数顺序访问容器中的元素<ul>\n<li>依次查看每一个学生记录，先对当前记录作出处理，然后继续查看下一条记录</li>\n</ul>\n</li>\n<li>顺序存取和随机存取<ul>\n<li>如果我们函数仅需要顺序访问，则没有必要使用那些提供了随机访问能力的索引</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"迭代器\"><a href=\"#迭代器\" class=\"headerlink\" title=\"迭代器\"></a>迭代器</h2><p><code>extract_fails</code>实际使用的容器操作</p>\n<ul>\n<li>使用索引i来从<code>Student_info</code>结构中取值</li>\n</ul>\n<p>如果用迭代器来代替索引，能让库应用知识</p>\n<ul>\n<li>一个迭代器(iterator)为一个值，能够<ul>\n<li>识别一个容器以及容器中的一个元素</li>\n<li>允许我们检查存储在这个元素中的值</li>\n<li>提供操作以移动在容器中的元素</li>\n<li>采用对应于容器所能够有效处理的方式对可用的操作进行约束</li>\n</ul>\n</li>\n</ul>\n<p>迭代器vs索引</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 索引</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> students<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// 迭代器</span>\n<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator iter <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">&lt;&lt;</span>endl<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"迭代器的类型\"><a href=\"#迭代器的类型\" class=\"headerlink\" title=\"迭代器的类型\"></a>迭代器的类型</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>容器迭代器类型</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>container-type::const_iterator</code></td>\n<td>仅需要读操作</td>\n</tr>\n<tr>\n<td><code>container-type::iterator</code></td>\n<td>想用一个迭代器修改存储在容器中的值</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"迭代器的操作\"><a href=\"#迭代器的操作\" class=\"headerlink\" title=\"迭代器的操作\"></a>迭代器的操作</h3><p><code>cout &lt;&lt; (*iter).name</code></p>\n<p>通过调用间接引用运算符*访问迭代器指向元素</p>\n<p>故上述为将当前元素的name成员写到标准输出中</p>\n<h3 id=\"一些语法知识\"><a href=\"#一些语法知识\" class=\"headerlink\" title=\"一些语法知识\"></a>一些语法知识</h3><p><code>(*iter).name</code> 等价于 <code>iter -&gt; name</code></p>\n<h2 id=\"用迭代器代替索引\"><a href=\"#用迭代器代替索引\" class=\"headerlink\" title=\"用迭代器代替索引\"></a>用迭代器代替索引</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//版本3：用迭代器代替索引；效率可能仍然很低</span>\nvector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span> <span class=\"token function\">extract_fails</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> students<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span> fail<span class=\"token punctuation\">;</span>\n  vector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">!=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fgrade</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      fail<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      iter <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span>\n    <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> fail<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>:star:使用了<code>iterator</code>而非<code>const_iterator</code></p>\n<ul>\n<li>因为调用erase时想用它来对students进行修改</li>\n</ul>\n<p>:star:将erase的返回值付给iter</p>\n<ul>\n<li>会让iter指向被删除元素后面那个元素</li>\n</ul>\n<h2 id=\"list类型\"><a href=\"#list类型\" class=\"headerlink\" title=\"list类型\"></a>list类型</h2><p>使用一个数据结构重新实现我们的程序，这个数据结构能让我们高效地从容器内删除元素</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//版本4：用list代替vector</span>\nlist<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token function\">extract_fails</span><span class=\"token punctuation\">(</span>list<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> students<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  list<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span> fail<span class=\"token punctuation\">;</span>\n  list<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>iterator iter <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>iter <span class=\"token operator\">!=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">fgrade</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      fail<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      iter <span class=\"token operator\">=</span> students<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span>\n    <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> fail<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th><code>vector</code></th>\n<th><code>list</code></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>删除元素</td>\n<td>全部指向被删除的元素及之后的元素迭代器都会失效</td>\n<td>不会使得指向其他元素的迭代器失效</td>\n</tr>\n<tr>\n<td>添加元素</td>\n<td>给新元素分配空间的动作可能导致整个vector的重新分配</td>\n<td>不会使得指向其他元素的迭代器失效</td>\n</tr>\n<tr>\n<td>访问</td>\n<td>高效随机访问</td>\n<td>不支持完全随机的访问</td>\n</tr>\n<tr>\n<td>排序</td>\n<td>可以使用全局的sort函数</td>\n<td>list有自己的成员函数sort</td>\n</tr>\n<tr>\n<td>实现</td>\n<td>数组</td>\n<td>双向链表</td>\n</tr>\n<tr>\n<td>适用场景</td>\n<td>小规模输入</td>\n<td>大规模输入</td>\n</tr>\n<tr>\n<td>特点</td>\n<td>快速随机访问<br />容器只是(主要是)从尾部增长和缩小，性能好<br />支持索引</td>\n<td>任何位置快速插入和删除元素<br />要从容器中删除许多元素，list速度更快</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h2 id=\"分割字符串。\"><a href=\"#分割字符串。\" class=\"headerlink\" title=\"分割字符串。\"></a>分割字符串。</h2><p>大部分时候，我们将字符串当做单独的实体处理；但有时还是需要查看字符串的特定字符</p>\n<p>事实上，我们可以将字符串看成一种特殊的容器</p>\n<ul>\n<li>仅包含字符</li>\n<li>支持某些容器操作 like 索引</li>\n</ul>\n<p>要求：将一个字符串每个单词划分开来</p>\n<p>split函数实现：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span> <span class=\"token comment\">//常量引用 -> 复制单词 -> 不会修改原先的字符串</span>\n<span class=\"token punctuation\">&#123;</span>\n  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 用于保存来自输入字符串的单词</span>\n  <span class=\"token keyword\">typedef</span> string<span class=\"token double-colon punctuation\">::</span>size_type string_size<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 定义索引i</span>\n  string_size i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//初始化索引i -> 索引i 用于找出每一个单词的开头</span>\n\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//最外层while -> 确保一旦处理完了输入的最后一个单词则会马上停止</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 找出s中的第一个非空白字符</span>\n      <span class=\"token operator\">++</span>i<span class=\"token punctuation\">;</span>\n    string_size j <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token function\">isspace</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">// 单词的后索引j</span>\n      <span class=\"token operator\">++</span>j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">substr</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span><span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// substr用于创建一个包含了原始字符串副本的新字符串</span>\n      i <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span> <span class=\"token comment\">//最外层while -> 确保一旦处理完了输入的最后一个单词则会马上停止</span>\n  <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>这个代码需要头文件<code>cctype</code>，定义了<code>isspace</code></li>\n</ul>\n<h2 id=\"测试split函数\"><a href=\"#测试split函数\" class=\"headerlink\" title=\"测试split函数\"></a>测试split函数</h2><p>测试程序</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  string s<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">//getline 函数读取输入流cin的数据并存储到字符串引用中</span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> v<span class=\"token operator\">=</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"连接字符串\"><a href=\"#连接字符串\" class=\"headerlink\" title=\"连接字符串\"></a>连接字符串</h2><h3 id=\"字符串装框\"><a href=\"#字符串装框\" class=\"headerlink\" title=\"字符串装框\"></a>字符串装框</h3><p>要求：建立一个数据结构以表示整个被框起的的字符串</p>\n<p>思路：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu82cidgtj60lg04w0ss02.jpg\" alt=\"image-20210811222402187\"></p>\n<pre class=\"mermaid\">graph TD\n找出向量中最长的字符串长度width --> 为文本装框frame</pre>\n\n<p><code>width.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">string<span class=\"token double-colon punctuation\">::</span>size_type <span class=\"token function\">width</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  string<span class=\"token double-colon punctuation\">::</span>size_type maxlen <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    maxlen <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span>maxlen<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> maxlen<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>frame.cpp</code></p>\n<pre class=\"line-numbers language-CPP\" data-language=\"CPP\"><code class=\"language-CPP\">vector&lt;string&gt; frame(const vector&lt;string&gt;&amp; v) &#x2F;&#x2F;常量引用 -&gt; 复制单词 -&gt; 不会修改原先的字符串\n  vector&lt;string&gt; ret;\n  string::size_type maxlen &#x3D; width(v);\n  string border (maxlen + 4, &#39;*&#39;); &#x2F;&#x2F;将border定义为一个长度确定的字符串\n\n  &#x2F;&#x2F;输出顶部的边框\n  ret.push_back(border);\n\n  &#x2F;&#x2F;输出内部的行，每一行都用一个星号和一个空格来框起\n  for(vector&lt;string&gt;::size_type i &#x3D; 0; i !&#x3D; v.size(); ++i)&#123;\n    ret.push_back(&quot;*&quot; + v[i] + string(maxlen - v[i].size(), &#39;&#39;) + &quot;*&quot; );\n  &#125;\n\n  &#x2F;&#x2F;输出底部的边框\n  ret.push_back(border);\n return ret;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"纵向连接\"><a href=\"#纵向连接\" class=\"headerlink\" title=\"纵向连接\"></a>纵向连接</h3><p>要求：按行将图案自然组织起来</p>\n<p>思路：用一个<code>vector&lt;string&gt;</code>类型的向量来表示一幅图案，向量中每一个元素都是图案的一行</p>\n<p>向量连接操作的实现：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">vcat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> top<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> bottom<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 复制顶部图案</span>\n  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ret <span class=\"token operator\">=</span> top<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 复制整个底部图案</span>\n  <span class=\"token keyword\">for</span>（vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator it <span class=\"token operator\">=</span> bottom<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> bottom<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it）\n    ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> ret\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>上述<code>for</code>循环中可用如下代替</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">ret<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>bottom<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>bottom<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"横向连接\"><a href=\"#横向连接\" class=\"headerlink\" title=\"横向连接\"></a>横向连接</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>\n<span class=\"token function\">hcat</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> left<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> right<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//对width(left)加1，在两幅图案之间留一个空格</span>\n  string<span class=\"token double-colon punctuation\">::</span>size_type widthl <span class=\"token operator\">=</span> <span class=\"token function\">width</span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 建立用于遍历left和right的索引</span>\n  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//循环操作直到查看完了两幅图案的全部行</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> j <span class=\"token operator\">!=</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 构造新字符串来保存字符，字符来自两幅输入图案</span>\n    string s<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//如果左侧图案还有待复制的行，则复制一行</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">!=</span> left<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      s <span class=\"token operator\">=</span> left<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//填充至适当的长度</span>\n  s <span class=\"token operator\">+=</span> <span class=\"token function\">string</span><span class=\"token punctuation\">(</span>widthl <span class=\"token operator\">-</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">''</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//如果右侧图案还有待复制的行，则复制一行</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span> j <span class=\"token operator\">!=</span> right<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    s <span class=\"token operator\">+=</span> right<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//将s添加到我们正在创建的图案中</span>\n  ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>容器及其操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>container&lt;T&gt;::iterator</code></td>\n<td>容器的迭代器的类型名</td>\n</tr>\n<tr>\n<td><code>container&lt;T&gt;::const_iterator</code></td>\n<td>容器的迭代器的类型名</td>\n</tr>\n<tr>\n<td><code>container&lt;T&gt;::size_type</code></td>\n<td>保存容器可能存在的最大实例的长度</td>\n</tr>\n<tr>\n<td><code>c.begin()</code> <code>c.end()</code></td>\n<td>指向容器<strong>第一个元素</strong>和<strong>紧跟在最后一个元素之后</strong>的那个位置的迭代器</td>\n</tr>\n<tr>\n<td><code>c.rbegin()</code> <code>c.rend()</code></td>\n<td>逆序访问，<strong>最后一个元素</strong>和<strong>第一个元素之前</strong>的那个位置的迭代器</td>\n</tr>\n<tr>\n<td><code>container&lt;T&gt;c;</code></td>\n<td>定义一个容器c</td>\n</tr>\n<tr>\n<td><code>container&lt;T&gt;c(c2);</code></td>\n<td>给定c2，则c是c2的一个副本；否则c为空</td>\n</tr>\n<tr>\n<td><code>container&lt;T&gt;c(n);</code></td>\n<td>定义一个有n个元素的容器c，c根据T的类型而被数值初始化</td>\n</tr>\n<tr>\n<td><code>container&lt;T&gt;c(n,t);</code></td>\n<td>定义一个有n个元素的容器c，c的元素是t的副本</td>\n</tr>\n<tr>\n<td><code>container&lt;T&gt;c (b,e);</code></td>\n<td>创建一个容器，容器保存了位于区间[b,e)中的迭代器所指示元素的一个副本</td>\n</tr>\n<tr>\n<td><code>c=c2;</code></td>\n<td>用容器c2的一个副本来替换容器c的内容</td>\n</tr>\n<tr>\n<td><code>c.size()</code></td>\n<td>返回c的元素个数</td>\n</tr>\n<tr>\n<td><code>c.empty()</code></td>\n<td>指示c是否没有元素</td>\n</tr>\n<tr>\n<td><code>c.insert(d,b,e)</code></td>\n<td>复制位于区间[b,e)中的迭代器所指示的元素，并且将它们插入到c中位于d之前的位置中</td>\n</tr>\n<tr>\n<td><code>c.erase(it)</code></td>\n<td>从容器中删除由it指示的元素</td>\n</tr>\n<tr>\n<td><code>c.erase(b,e)</code></td>\n<td>从容器中删除由[b,e)指示的元素</td>\n</tr>\n<tr>\n<td><code>c.push_back(t)</code></td>\n<td>在c的末尾添加一个元素，这个元素的值为t</td>\n</tr>\n<tr>\n<td><code>c[n]</code></td>\n<td>从容器c中取出位于位置n的字符</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>迭代器操作</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>*it</code></td>\n<td>间接引用迭代器it以获取存储在容器中位于it所指示的未知的值</td>\n</tr>\n<tr>\n<td><code>it -&gt; x</code></td>\n<td>与<code>(*it).x</code>等价</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><code>vector</code>内存分配</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>v.reserve(n)</code></td>\n<td>保留空间以保存n个元素，但不对这些元素进行初始化</td>\n</tr>\n<tr>\n<td><code>v.resize(n)</code></td>\n<td>给v个新长度，这个长度等于n</td>\n</tr>\n</tbody>\n</table>\n</div>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th><code>cctype</code>头文件提供的函数</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>isspace(c)</code></td>\n<td>空白字符</td>\n</tr>\n<tr>\n<td><code>isalpha(c)</code></td>\n<td>字母字符</td>\n</tr>\n<tr>\n<td><code>isdigit(c)</code></td>\n<td>数字字符</td>\n</tr>\n<tr>\n<td><code>isalnum(c)</code></td>\n<td>字母或数字</td>\n</tr>\n<tr>\n<td><code>ispunct(c)</code></td>\n<td>标点字符</td>\n</tr>\n<tr>\n<td><code>isupper(c)</code></td>\n<td>大写字母</td>\n</tr>\n<tr>\n<td><code>islower(c)</code></td>\n<td>小写字母</td>\n</tr>\n<tr>\n<td><code>toupper(c)</code></td>\n<td>产生一个等于c的大写字母</td>\n</tr>\n<tr>\n<td><code>tolower(c)</code></td>\n<td>产生一个等于c的小写字母</td>\n</tr>\n</tbody>\n</table>\n</div>\n","text":"使用顺序容器和分析字符串本章 更深入了解库的使用方法 标准库 提供有用的数据结构和函数 反映一个具有一致性的体系结构 一旦了解了一种容器的行为特性，就可以非常轻松地掌握全部库容器的使用方法 将学生进行分类要求：算出学生成绩之外，区分学生能否通过课程 实现思路： Student_i...","link":"","photos":[],"count_time":{"symbolsCount":"7.7k","symbolsTime":"7 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E9%A1%BA%E5%BA%8F%E5%AE%B9%E5%99%A8%E5%92%8C%E5%88%86%E6%9E%90%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">使用顺序容器和分析字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%86%E5%AD%A6%E7%94%9F%E8%BF%9B%E8%A1%8C%E5%88%86%E7%B1%BB\"><span class=\"toc-text\">将学生进行分类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8\"><span class=\"toc-text\">迭代器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">迭代器的类型</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%AD%E4%BB%A3%E5%99%A8%E7%9A%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">迭代器的操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%80%E4%BA%9B%E8%AF%AD%E6%B3%95%E7%9F%A5%E8%AF%86\"><span class=\"toc-text\">一些语法知识</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E8%BF%AD%E4%BB%A3%E5%99%A8%E4%BB%A3%E6%9B%BF%E7%B4%A2%E5%BC%95\"><span class=\"toc-text\">用迭代器代替索引</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#list%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">list类型</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%86%E5%89%B2%E5%AD%97%E7%AC%A6%E4%B8%B2%E3%80%82\"><span class=\"toc-text\">分割字符串。</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%B5%8B%E8%AF%95split%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">测试split函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E6%8E%A5%E5%AD%97%E7%AC%A6%E4%B8%B2\"><span class=\"toc-text\">连接字符串</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E8%A3%85%E6%A1%86\"><span class=\"toc-text\">字符串装框</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%B5%E5%90%91%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">纵向连接</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A8%AA%E5%90%91%E8%BF%9E%E6%8E%A5\"><span class=\"toc-text\">横向连接</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CPP4 组织程序和数据 代码纯享","uid":"fb94724ad6a11796aa7671876e21935b","slug":"CPP/C4 组织程序和数据_精简版","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:11.000Z","comments":true,"path":"api/articles/CPP/C4 组织程序和数据_精简版.json","keywords":null,"cover":null,"text":"组织程序和数据C++多文件理解https://zhuanlan.zhihu.com/p/348798266 C++程序一般分三类文件： 头文件( .h )放置各种声明，用于被cpp文件包含 模块文件（.cpp）放置一些函数定义，也称为功能模块 主程序文件（.cpp）包含main(...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CPP6 使用库算法","uid":"626917d17fb14af0007b94f4b30e0461","slug":"CPP/C6 使用库算法","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:05.000Z","comments":true,"path":"api/articles/CPP/C6 使用库算法.json","keywords":null,"cover":[],"text":"使用库算法 全部容器都提供了配套的迭代器类型 库保证了全部提供同一个操作的迭代器都通过同样的接口以实现其功能 本章 库如何利用公用接口来提供一个标准算法集合 通过使用这些算法能够避免重复编写同样的代码 字符处理应用1：连接两幅字符图案//方案1 for (vector&lt;st...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}