{"title":"CPP7 使用关联容器","uid":"c6bbdc5859805502fec5f66437416592","slug":"CPP/C7 使用关联容器","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:01.416Z","comments":true,"path":"api/articles/CPP/C7 使用关联容器.json","keywords":null,"cover":[],"content":"<h1 id=\"使用关联容器\"><a href=\"#使用关联容器\" class=\"headerlink\" title=\"使用关联容器\"></a>使用关联容器</h1><ul>\n<li>顺序容器：给容器元素选择适当顺序后，它们会按照我们所选择的顺序将元素保存起来</li>\n<li>关联容器：容器会自动将它们的元素安排在一个序列中</li>\n</ul>\n<h2 id=\"支持高效查找的容器\"><a href=\"#支持高效查找的容器\" class=\"headerlink\" title=\"支持高效查找的容器\"></a>支持高效查找的容器</h2><p>关联容器：自动将它们元素安排在一个序列中，利用这种排序方法让我们可以更快速地对特定元素进行定位–并不需要我们自己保持容器的顺序</p>\n<p>机制：键-值</p>\n<p>特点：自动排序，所以我们的程序不可以做任何动作改变元素的顺序</p>\n<h2 id=\"示例1：计算单词数量\"><a href=\"#示例1：计算单词数量\" class=\"headerlink\" title=\"示例1：计算单词数量\"></a>示例1：计算单词数量</h2><p>要求：算出在输入中每一个不同的单词所出现的次数</p>\n<p><code>counters.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  string s<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">//存储每个单词和一个关联的计数器</span>\n  <span class=\"token comment\">//一个从字符串到整数的映射表</span>\n  <span class=\"token comment\">//使用这样的映射表时，可以给它一个字符串作为键并获取关联的整数</span>\n  map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>counters<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//读取输入，跟踪每个单词出现的次数</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>cin<span class=\"token operator\">>></span>s<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">//以刚刚独到的单词作为键从而访问counters</span>\n  <span class=\"token comment\">//counters[s]表示单词关联的整数，++表示计数加1</span>\n    <span class=\"token operator\">++</span>counters<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//输出单词以及相关的数目</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator it <span class=\"token operator\">=</span> counters<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> counters<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n\n    <span class=\"token comment\">//映射表的每个元素都为一个数对，first成员包含键，second成员包含关联的值</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span><span class=\"token string\">\"\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> it <span class=\"token operator\">-></span> second <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"示例2：生成交叉引用表\"><a href=\"#示例2：生成交叉引用表\" class=\"headerlink\" title=\"示例2：生成交叉引用表\"></a>示例2：生成交叉引用表</h2><p>要求：编写一个程序，产生一个交叉引用表，指示每一个单词是在输入中哪个地方出现</p>\n<p>预备知识：</p>\n<ul>\n<li>读入一行而非一个单词，所以需用<code>split</code>将每一行单词分离开</li>\n<li><code>split</code>函数作为<code>xref</code>函数的一个参数，即我们在一行中查找单词时所采用的方法</li>\n<li>数据结构：映射表&lt;key,value&gt; = &lt;输入中不同的单词,单词出现的全部行的行编号&gt;</li>\n</ul>\n<p>实现：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu83f1lgtj60lz056jrj02.jpg\" alt=\"image-20210814123820044\"></p>\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\">graph TD\n调用xref建立一个保存行编号的数据结构--&gt;for语句记住间接引用一个映射表迭代器会产生一个pair类型的值<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><code>cross.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//默认使用split来调用xref</span>\n  map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span>  <span class=\"token operator\">></span> ret <span class=\"token operator\">=</span> <span class=\"token function\">xref</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//输出结果</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator it <span class=\"token operator\">=</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> ret<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//输出单词</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> it<span class=\"token operator\">-></span>first <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"occurs on lines(s):\"</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//后面跟随一个或多个行编号</span>\n    vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator line_it <span class=\"token operator\">=</span> it <span class=\"token operator\">-></span> second<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>line_it <span class=\"token punctuation\">;</span> <span class=\"token comment\">//输出第一个行编号</span>\n\n    <span class=\"token operator\">++</span>line_it<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//如果有则输出其余行编号</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>line_it <span class=\"token operator\">!=</span> it <span class=\"token operator\">-></span> second<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>line_it<span class=\"token punctuation\">;</span>\n      <span class=\"token operator\">++</span>line_it<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//换一个新行以便将每一个单词与下一个分隔开</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>xref.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\">map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span>\n  <span class=\"token function\">xref</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">find_words</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> split<span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//xref(cin); 等价于xref(cin,split);</span>\n    <span class=\"token comment\">//xref(cin,find_urls);</span>\n  <span class=\"token punctuation\">&#123;</span>\n    string line<span class=\"token punctuation\">;</span> <span class=\"token comment\">//保存输入的每一行</span>\n    <span class=\"token keyword\">int</span> line_number <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span><span class=\"token comment\">//保存当前正在处理的行的行编号</span>\n    map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span> <span class=\"token operator\">></span> ret<span class=\"token punctuation\">;</span> <span class=\"token comment\">//注意是> >而非>></span>\n\n    <span class=\"token comment\">//读下一行</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token operator\">++</span>line_number<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">//将输入行分割成单词</span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>words <span class=\"token operator\">=</span> <span class=\"token function\">find_words</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">//记住出现在当前行的每一个单词</span>\n      <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator it <span class=\"token operator\">=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> it <span class=\"token operator\">!=</span> words<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>it<span class=\"token punctuation\">)</span>\n        ret<span class=\"token punctuation\">[</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>line_number<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"示例3：生成语句\"><a href=\"#示例3：生成语句\" class=\"headerlink\" title=\"示例3：生成语句\"></a>示例3：生成语句</h2><p>要求：可以用一个映射表编写一个程序，这个程序描述了一种语句结构并且能生成符合这个描述的随机的语句</p>\n<p>例如：我们能将一个英语语句描述成一个名词与一个动词或者是一个名词或动词与一个对象的组合等。</p>\n<h3 id=\"呈现规则\"><a href=\"#呈现规则\" class=\"headerlink\" title=\"呈现规则\"></a>呈现规则</h3><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">typedef</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> Rule<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> vector<span class=\"token operator\">&lt;</span>Rule<span class=\"token operator\">></span> Rule_collection<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> map<span class=\"token operator\">&lt;</span>string<span class=\"token punctuation\">,</span>Rule_collection<span class=\"token operator\">></span> Grammar<span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"读入文法\"><a href=\"#读入文法\" class=\"headerlink\" title=\"读入文法\"></a>读入文法</h3><p><code>read_grammar.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//将输入流读数据并生成一个文法作为输出</span>\nGrammar <span class=\"token function\">read_grammar</span><span class=\"token punctuation\">(</span>istream<span class=\"token operator\">&amp;</span> in<span class=\"token punctuation\">)</span>\n  Grammar ret<span class=\"token punctuation\">;</span>\n  string line<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//读输入</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token function\">getline</span><span class=\"token punctuation\">(</span>in<span class=\"token punctuation\">,</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//将输入分割成单词</span>\n    vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> entry <span class=\"token operator\">=</span> <span class=\"token function\">split</span><span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token comment\">//用种类来存储相关联的规则</span>\n    ret<span class=\"token punctuation\">[</span>entry<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>\n      <span class=\"token function\">Rule</span><span class=\"token punctuation\">(</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>entry<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"生成语句\"><a href=\"#生成语句\" class=\"headerlink\" title=\"生成语句\"></a>生成语句</h3><p>读进全部的输入之后，必须生成一个随机的语句</p>\n<p><code>main1.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//生成语句</span>\n    <span class=\"token comment\">//读入文法，根据文法声生成一个语句</span>\n  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> sentence <span class=\"token operator\">=</span> <span class=\"token function\">gen_sentence</span><span class=\"token punctuation\">(</span><span class=\"token function\">read_grammar</span><span class=\"token punctuation\">(</span>cin<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">//输出第一个单词，如果存在</span>\n  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator it <span class=\"token operator\">=</span> sentence<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>sentence<span class=\"token punctuation\">.</span><span class=\"token function\">empty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">//输出其余的单词，每一个单词之前都有一个空格</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> sentence<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  cout <span class=\"token operator\">&lt;&lt;</span> endl<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>gen_sentence.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//gen_sentence.cpp</span>\nvector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span> <span class=\"token function\">gen_sentence</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Grammar<span class=\"token operator\">&amp;</span> g<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span>ret<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">//对gen_aux的调用是一个请求，请求使用文法g并依照&lt;sentence>规则生成一个语句</span>\n  <span class=\"token function\">gen_aux</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> <span class=\"token string\">\"&lt;sentence>\"</span><span class=\"token punctuation\">,</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>gen_aux.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//gen_aux.cpp</span>\n<span class=\"token comment\">//功能为：展开那个作为它的第二个参数而被传递过来的输入字符串</span>\n<span class=\"token comment\">//具体实现方式为：第一个参数为文法，在其中查找这个字符串，并将输出放到第三个参数中</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">gen_aux</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Grammar<span class=\"token operator\">&amp;</span> g<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> word<span class=\"token punctuation\">,</span> vector<span class=\"token operator\">&lt;</span>string<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> ret<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//如果word不是被括起的，压栈</span>\n    <span class=\"token comment\">//如果word被括起的，则找到一条相应规则，展开这条规则从而代替这个被括起的种类</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span> <span class=\"token operator\">!</span><span class=\"token function\">bracketed</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    ret<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span><span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//为对应于word的规则定位</span>\n    Grammar<span class=\"token double-colon punctuation\">::</span>const_iterator it <span class=\"token operator\">=</span> g<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>word<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">==</span> g<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">throw</span> <span class=\"token function\">logic_error</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"empty rule\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   <span class=\"token comment\">//获可能的规则集合</span>\n   <span class=\"token keyword\">const</span> Rule_collection<span class=\"token operator\">&amp;</span> c <span class=\"token operator\">=</span> it <span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">//从规则集合中随机选择一条规则</span>\n   <span class=\"token keyword\">const</span> Rule<span class=\"token operator\">&amp;</span> r <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span><span class=\"token function\">nrand</span><span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n   <span class=\"token comment\">//递归展开所选定的规则</span>\n   <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Rule<span class=\"token double-colon punctuation\">::</span>const_iterator i <span class=\"token operator\">=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> r<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">gen_aux</span><span class=\"token punctuation\">(</span>g<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>i<span class=\"token punctuation\">,</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">//brackted用于检查某个单词是否括起</span>\n<span class=\"token keyword\">bool</span> <span class=\"token function\">brackted</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> string<span class=\"token operator\">&amp;</span> s<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'&lt;'</span> <span class=\"token operator\">&amp;&amp;</span> s<span class=\"token punctuation\">[</span>s<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token string\">'>'</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>nrand.cpp</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">int</span> <span class=\"token function\">nrand</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> n <span class=\"token operator\">></span> RAND_MAX<span class=\"token punctuation\">)</span>\n  <span class=\"token keyword\">throw</span> <span class=\"token function\">domain_error</span> <span class=\"token punctuation\">(</span><span class=\"token string\">\"Argument to nrand is out of range\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">const</span> <span class=\"token keyword\">int</span> bucket_size <span class=\"token operator\">=</span> RAND_MAX <span class=\"token operator\">/</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">do</span> r <span class=\"token operator\">=</span> <span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> bucket_size<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">>=</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li>为了避免一些缺陷，并不采用<code>rand()%n</code>的做法</li>\n</ul>\n<h2 id=\"关于性能的一些说明\"><a href=\"#关于性能的一些说明\" class=\"headerlink\" title=\"关于性能的一些说明\"></a>关于性能的一些说明</h2><p>关联数组很可能是根据Hash表实现的，Hash表可以非常快速，但是同时也带来一些缺点</p>\n<ul>\n<li>对于每一种键类型，用户必须提供一个散列函数，散列函数会从键的值计算出一个适当的哈希值</li>\n<li>散列表的性能对散列函数细节极度敏感</li>\n<li>通常找不到一个简单方法按一个有用的顺序检索散列表的元素</li>\n</ul>\n<p>按照散列函数来实现C++关联容器是困难的</p>\n<ul>\n<li>键类型只需要&lt;运算符或者等价的比较函数</li>\n<li>无论键的值是什么，访问一个关联容器中有特定键的元素所耗费的时间都是容器中元素总数的对数</li>\n<li>关联容器的元素总是根据键进行排序的</li>\n</ul>\n","text":"使用关联容器 顺序容器：给容器元素选择适当顺序后，它们会按照我们所选择的顺序将元素保存起来 关联容器：容器会自动将它们的元素安排在一个序列中 支持高效查找的容器关联容器：自动将它们元素安排在一个序列中，利用这种排序方法让我们可以更快速地对特定元素进行定位–并不需要我们自己保持容器...","link":"","photos":[],"count_time":{"symbolsCount":"5k","symbolsTime":"5 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BD%BF%E7%94%A8%E5%85%B3%E8%81%94%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">使用关联容器</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%94%AF%E6%8C%81%E9%AB%98%E6%95%88%E6%9F%A5%E6%89%BE%E7%9A%84%E5%AE%B9%E5%99%A8\"><span class=\"toc-text\">支持高效查找的容器</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B1%EF%BC%9A%E8%AE%A1%E7%AE%97%E5%8D%95%E8%AF%8D%E6%95%B0%E9%87%8F\"><span class=\"toc-text\">示例1：计算单词数量</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B2%EF%BC%9A%E7%94%9F%E6%88%90%E4%BA%A4%E5%8F%89%E5%BC%95%E7%94%A8%E8%A1%A8\"><span class=\"toc-text\">示例2：生成交叉引用表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B3%EF%BC%9A%E7%94%9F%E6%88%90%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">示例3：生成语句</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%91%88%E7%8E%B0%E8%A7%84%E5%88%99\"><span class=\"toc-text\">呈现规则</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%AF%BB%E5%85%A5%E6%96%87%E6%B3%95\"><span class=\"toc-text\">读入文法</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%9F%E6%88%90%E8%AF%AD%E5%8F%A5\"><span class=\"toc-text\">生成语句</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E6%80%A7%E8%83%BD%E7%9A%84%E4%B8%80%E4%BA%9B%E8%AF%B4%E6%98%8E\"><span class=\"toc-text\">关于性能的一些说明</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CPP6 使用库算法","uid":"626917d17fb14af0007b94f4b30e0461","slug":"CPP/C6 使用库算法","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:05.173Z","comments":true,"path":"api/articles/CPP/C6 使用库算法.json","keywords":null,"cover":[],"text":"使用库算法 全部容器都提供了配套的迭代器类型 库保证了全部提供同一个操作的迭代器都通过同样的接口以实现其功能 本章 库如何利用公用接口来提供一个标准算法集合 通过使用这些算法能够避免重复编写同样的代码 字符处理应用1：连接两幅字符图案//方案1 for (vector&lt;st...","link":"","photos":[],"count_time":{"symbolsCount":"8.7k","symbolsTime":"8 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CPP9 定义新类型","uid":"260ea000f421b3eddad461c7e5d42b80","slug":"CPP/C9 定义新类型","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:48:54.644Z","comments":true,"path":"api/articles/CPP/C9 定义新类型.json","keywords":null,"cover":[],"text":"定义新类型可以将C++分成两种 内部类型 -&gt; 被定义成语言核心的一部分 自定义类型(class type) C+设计思想 应该让程序员创建与内部类型一样易于使用的类型 创建具有简明直观的接口的类型 实质性的语言支持 类的设计过程中的体验和判断 Student_info回顾...","link":"","photos":[],"count_time":{"symbolsCount":"3.2k","symbolsTime":"3 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}