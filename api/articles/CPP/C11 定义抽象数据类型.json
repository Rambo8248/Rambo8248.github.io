{"title":"CPP11 定义抽象数据类型","uid":"6f7b722034727aa8d501a289bcdc43b2","slug":"CPP/C11 定义抽象数据类型","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:48:48.962Z","comments":true,"path":"api/articles/CPP/C11 定义抽象数据类型.json","keywords":null,"cover":null,"content":"<h1 id=\"定义抽象数据类型\"><a href=\"#定义抽象数据类型\" class=\"headerlink\" title=\"定义抽象数据类型\"></a>定义抽象数据类型</h1><ul>\n<li>创建一个类似于向量的类以加深我们对如何设计和实现一个类的理解</li>\n<li>先写一些简单的成员函数，再回来看看如何控制进行复制、赋值以及删除操作</li>\n</ul>\n<h2 id=\"Vec类\"><a href=\"#Vec类\" class=\"headerlink\" title=\"Vec类\"></a>Vec类</h2><p>开始设计类时，通常需要首先确定要在类中<strong>提供什么样的接口</strong>$\\to$研究类的使用者将用我们所写的类编写什么样的程序，比如说：</p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//构造一个vector</span>\nvector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span> vs<span class=\"token punctuation\">;</span> <span class=\"token comment\">//一个空的vector</span>\nvector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">double</span><span class=\"token operator\">></span> <span class=\"token function\">v</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//一个有100个元素的vector</span>\n\n<span class=\"token comment\">//获得vector使用的类型的名称</span>\nvector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>const_iterator b<span class=\"token punctuation\">,</span>e<span class=\"token punctuation\">;</span>\nvector<span class=\"token operator\">&lt;</span>Student_info<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span>size_type i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//使用size函数与索引值查看vector中的元素</span>\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> vs<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n    cout <span class=\"token operator\">&lt;&lt;</span> vs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">name</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//返回指向第一个元素的迭代器与指向最后一个元素后面那个元素的迭代器</span>\nb <span class=\"token operator\">=</span> vs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\ne <span class=\"token operator\">=</span> vs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>包含的几个操作</p>\n<ul>\n<li>构造一个空vector</li>\n<li>构造一个有固定元素的vector</li>\n<li>获得vector使用的类型的名称</li>\n<li>size函数与索引值查看vector中元素</li>\n<li>迭代器操作</li>\n</ul>\n<h2 id=\"最终Vec类\"><a href=\"#最终Vec类\" class=\"headerlink\" title=\"最终Vec类\"></a>最终Vec类</h2><ul>\n<li>首先定义一个模板类</li>\n<li>然后根据提供的参数用这个模板类生成一系列不同的类</li>\n</ul>\n<p>定义一个模板类</p>\n<ul>\n<li>列出了类定义中将要用到的全部类型的参数</li>\n<li>Vec为一个具有一个类型参数T的模板类</li>\n<li>模版定义分为public和private两部分<ul>\n<li>public接口<ul>\n<li>typedef</li>\n<li>构造与析构<ul>\n<li>构造</li>\n<li>复制构造<ul>\n<li>类的作者可以控制对象被创建、复制以及被销毁时程序的行为</li>\n</ul>\n</li>\n<li>析构</li>\n</ul>\n</li>\n<li>大小与索引<ul>\n<li>索引运算符重载</li>\n</ul>\n</li>\n<li>赋值运算符</li>\n<li>动态Vec类型对象<ul>\n<li>向Vecs类中加入一个<code>push_bach</code>函数，为<code>Vec</code>类的对象分配新的内存</li>\n</ul>\n</li>\n<li>灵活内存管理</li>\n</ul>\n</li>\n<li>private实现<ul>\n<li>元素</li>\n<li>内存分配工具</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Vec</span><span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n  \t<span class=\"token comment\">//接口</span>\n  \n  \t<span class=\"token comment\">/*typedef主要是？？*/</span>\n  \t<span class=\"token keyword\">typedef</span> T<span class=\"token operator\">*</span> iterator<span class=\"token punctuation\">;</span>\n  \t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">*</span> const_iterator<span class=\"token punctuation\">;</span>\n  \t<span class=\"token keyword\">typedef</span> size_t size_type<span class=\"token punctuation\">;</span>\n  \t<span class=\"token keyword\">typedef</span> T value_type<span class=\"token punctuation\">;</span>\n  \t<span class=\"token keyword\">typedef</span> std<span class=\"token double-colon punctuation\">::</span>ptrdiff_t difference_type<span class=\"token punctuation\">;</span>\n  \t<span class=\"token keyword\">typedef</span> T<span class=\"token operator\">&amp;</span> reference<span class=\"token punctuation\">;</span>\n  \t<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> const_reference<span class=\"token punctuation\">;</span>\n  \t\n  \t<span class=\"token comment\">//默认构造函数</span>\n  \t<span class=\"token function\">Vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span> \n    <span class=\"token comment\">//explicit用于修饰只有一个参数的类构造函数,</span>\n  \t<span class=\"token comment\">//它的作用是表明该构造函数是显式的, 而非隐式的</span>\n  \t<span class=\"token keyword\">explicit</span> <span class=\"token function\">Vec</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>size_t n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val <span class=\"token operator\">=</span> <span class=\"token function\">T</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n   \t<span class=\"token comment\">//复制构造函数</span>\n  \t<span class=\"token comment\">//从一个已存在的对象中\"复制\"每个数据元素到一个新对象中</span>\n  \t<span class=\"token comment\">//Vec(const Vec&amp; v);</span>\n  \t<span class=\"token function\">Vec</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Vec<span class=\"token operator\">&amp;</span> v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>v<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">//析构函数</span>\n  \t<span class=\"token operator\">~</span><span class=\"token function\">Vec</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token function\">uncreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n\n  \t<span class=\"token comment\">//大小与索引</span>\n  \t<span class=\"token comment\">//size_type size() const &#123;return limit - data;&#125;</span>\n  \tsize_type <span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> avail <span class=\"token operator\">-</span> data<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  \tT<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_type i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  \t<span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span>size_type i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> data<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  \n  \t<span class=\"token comment\">//返回迭代器</span>\n  \titerator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  \tconst_iterator <span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> data<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  \t<span class=\"token comment\">//iterator end() &#123;return limit;&#125;</span>\n  \titerator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> avail<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  \t<span class=\"token comment\">//const_iterator end() &#123;return limit;&#125;</span>\n  \tconst_iterator <span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span><span class=\"token keyword\">return</span> avail<span class=\"token punctuation\">;</span><span class=\"token punctuation\">&#125;</span>\n  \n  \t<span class=\"token comment\">//赋值运算符</span>\n  \tVec<span class=\"token operator\">&amp;</span> <span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Vec<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  \t<span class=\"token comment\">//动态内存管理</span>\n  \t<span class=\"token keyword\">void</span> <span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>avail <span class=\"token operator\">==</span> limit<span class=\"token punctuation\">)</span>\n      \t<span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">unchecked_append</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n  \t<span class=\"token comment\">//实现</span>\n  \n  \t<span class=\"token comment\">//T* data; //Vec中的首元素</span>\n  \t<span class=\"token comment\">//T* limit;//Vec中的末元素</span>\n  \titerator data<span class=\"token punctuation\">;</span>\n  \titerator limit<span class=\"token punctuation\">;</span>\n  \titerator avail<span class=\"token punctuation\">;</span>\n  \n  \t<span class=\"token comment\">//内存分配工具</span>\n  \tallocator<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span> alloc<span class=\"token punctuation\">;</span> <span class=\"token comment\">//控制内存分配的对象</span>\n  \t<span class=\"token comment\">//为底层数组分配空间并对它进行初始化</span>\n  \t<span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>size_type<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token keyword\">void</span> <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>const_iterator<span class=\"token punctuation\">,</span>const_iterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token comment\">//删除数组中的元素并释放其占用的内存</span>\n  \t<span class=\"token keyword\">void</span> <span class=\"token function\">uncreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token comment\">//支持push_bach的函数</span>\n  \t<span class=\"token keyword\">void</span> <span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \t<span class=\"token keyword\">void</span> <span class=\"token function\">unchecked_append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"实现用于内存分配的私有成员函数\"><a href=\"#实现用于内存分配的私有成员函数\" class=\"headerlink\" title=\"实现用于内存分配的私有成员函数\"></a>实现用于内存分配的私有成员函数</h2><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  data <span class=\"token operator\">=</span> avail <span class=\"token operator\">=</span> limit <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>size_type n<span class=\"token punctuation\">,</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  data <span class=\"token operator\">=</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  limit <span class=\"token operator\">=</span> avail <span class=\"token operator\">=</span> data <span class=\"token operator\">+</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">uninitialized_fill</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>limit<span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span>const_iterator i<span class=\"token punctuation\">,</span> const_iterator j<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  data <span class=\"token operator\">=</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  limit <span class=\"token operator\">=</span> avail <span class=\"token operator\">=</span> <span class=\"token function\">uninitialized_copy</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>uncreate</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">uncreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    iterator it <span class=\"token operator\">=</span> avail<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">)</span>\n      alloc<span class=\"token punctuation\">.</span><span class=\"token function\">destroy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    alloc<span class=\"token punctuation\">.</span><span class=\"token function\">deallocate</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>limit<span class=\"token operator\">-</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  data <span class=\"token operator\">=</span> limit <span class=\"token operator\">=</span> avail <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>grow</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">grow</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  size_type new_size <span class=\"token operator\">=</span> <span class=\"token function\">max</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>limit <span class=\"token operator\">-</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span><span class=\"token function\">ptrdiff_t</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  iterator new_data <span class=\"token operator\">=</span> alloc<span class=\"token punctuation\">.</span><span class=\"token function\">allocate</span><span class=\"token punctuation\">(</span>new_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  iterator new_avail <span class=\"token operator\">=</span> <span class=\"token function\">uninitialized_copy</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">,</span>avail<span class=\"token punctuation\">,</span>new_data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">uncreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  data <span class=\"token operator\">=</span> new_data<span class=\"token punctuation\">;</span>\n  avail <span class=\"token operator\">=</span> new_avail<span class=\"token punctuation\">;</span>\n  limit <span class=\"token operator\">=</span> data <span class=\"token operator\">+</span> new_size<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><code>unchecked_append</code></p>\n<pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token keyword\">void</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">unchecked_append</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> T<span class=\"token operator\">&amp;</span> val<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  alloc<span class=\"token punctuation\">.</span><span class=\"token function\">construct</span><span class=\"token punctuation\">(</span>avail<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"复制控制\"><a href=\"#复制控制\" class=\"headerlink\" title=\"复制控制\"></a>复制控制</h2><p>类的作者可以控制对象被创建、复制以及被销毁时程序的行为</p>\n<h3 id=\"赋值运算符\"><a href=\"#赋值运算符\" class=\"headerlink\" title=\"赋值运算符\"></a>赋值运算符</h3><h4 id=\"自我赋值\"><a href=\"#自我赋值\" class=\"headerlink\" title=\"自我赋值\"></a>自我赋值</h4><pre class=\"line-numbers language-cpp\" data-language=\"cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">template</span> <span class=\"token operator\">&lt;</span><span class=\"token keyword\">class</span> <span class=\"token class-name\">T</span><span class=\"token operator\">></span>\nVec<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token operator\">&amp;</span> Vec<span class=\"token operator\">&lt;</span>T<span class=\"token operator\">></span><span class=\"token double-colon punctuation\">::</span><span class=\"token keyword\">operator</span><span class=\"token operator\">=</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Vec<span class=\"token operator\">&amp;</span> rhs<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">//判断是否进行自我赋值</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>rhs <span class=\"token operator\">!=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">//删除运算符左侧的数组</span>\n    <span class=\"token function\">uncreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token comment\">//从右侧复制元素到左侧</span>\n    <span class=\"token function\">create</span><span class=\"token punctuation\">(</span>rhs<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>rhs<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">*</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>涉及到两个新概念</p>\n<ul>\n<li>在除了类的头文件以外的地方定义一个模板成员函数的语法</li>\n<li><code>this</code><ul>\n<li>只在成员函数内部才有效，代表指向函数操作的对象的指针</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"灵活的内存管理\"><a href=\"#灵活的内存管理\" class=\"headerlink\" title=\"灵活的内存管理\"></a>灵活的内存管理</h2><p>不希望使用<code>new</code>和<code>delete</code>管理内存，因为这样写出的Vec类使用起来受到许多限制，不如标准向量类使用范围那么广泛。</p>\n","text":"定义抽象数据类型 创建一个类似于向量的类以加深我们对如何设计和实现一个类的理解 先写一些简单的成员函数，再回来看看如何控制进行复制、赋值以及删除操作 Vec类开始设计类时，通常需要首先确定要在类中提供什么样的接口$\\to$研究类的使用者将用我们所写的类编写什么样的程序，比如说： ...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AE%9A%E4%B9%89%E6%8A%BD%E8%B1%A1%E6%95%B0%E6%8D%AE%E7%B1%BB%E5%9E%8B\"><span class=\"toc-text\">定义抽象数据类型</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Vec%E7%B1%BB\"><span class=\"toc-text\">Vec类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%9C%80%E7%BB%88Vec%E7%B1%BB\"><span class=\"toc-text\">最终Vec类</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E7%94%A8%E4%BA%8E%E5%86%85%E5%AD%98%E5%88%86%E9%85%8D%E7%9A%84%E7%A7%81%E6%9C%89%E6%88%90%E5%91%98%E5%87%BD%E6%95%B0\"><span class=\"toc-text\">实现用于内存分配的私有成员函数</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E5%88%B6%E6%8E%A7%E5%88%B6\"><span class=\"toc-text\">复制控制</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%B5%8B%E5%80%BC%E8%BF%90%E7%AE%97%E7%AC%A6\"><span class=\"toc-text\">赋值运算符</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E8%87%AA%E6%88%91%E8%B5%8B%E5%80%BC\"><span class=\"toc-text\">自我赋值</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%81%B5%E6%B4%BB%E7%9A%84%E5%86%85%E5%AD%98%E7%AE%A1%E7%90%86\"><span class=\"toc-text\">灵活的内存管理</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"CPP1 字符串的使用","uid":"d469c0aa6900bf80ac5103ca8bfe40c5","slug":"CPP/C1 字符串的使用","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:49:22.200Z","comments":true,"path":"api/articles/CPP/C1 字符串的使用.json","keywords":null,"cover":null,"text":"字符串的使用输入#include&lt;iostream> #include&lt;string> int main() &#123; //请某人输入其姓名 std::cout &lt;&lt; \"Plz Enter ur name:\" ; //读姓名 std::string n...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"CPP12 使类对象获得数值功能","uid":"32d2985524fbdfade0b6b9e9b6071676","slug":"CPP/C12使类对象获得数值功能","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:48:46.035Z","comments":true,"path":"api/articles/CPP/C12使类对象获得数值功能.json","keywords":null,"cover":null,"text":"使类对象获得数值功能 定义了自己的类之后，就可以控制对类进行的扩展，使其对象可以想数值一样工作 Box3 = Box1 + Box2 类的编写者可以设法让各个对象之间彼此保持独立 上一章我们在写Vec类时已经完成大部分工作 本章大部分讨论如何为Str类设计一个友好的接口 一个简单...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"CPP","slug":"CPP","count":19,"path":"api/categories/CPP.json"}],"tags":[{"name":"CPP","slug":"CPP","count":19,"path":"api/tags/CPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}