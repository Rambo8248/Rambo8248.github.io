{"title":"DSA12 Sort2","uid":"9be35293ffa6798064be3bddd6f599aa","slug":"DSA/C12 排序(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:20:45.000Z","comments":true,"path":"api/articles/DSA/C12 排序(下).json","keywords":null,"cover":[],"content":"<h1 id=\"排序（下）：如何用快排思想在-O-n-​内查找第K大元素？\"><a href=\"#排序（下）：如何用快排思想在-O-n-​内查找第K大元素？\" class=\"headerlink\" title=\"排序（下）：如何用快排思想在$O(n)$​内查找第K大元素？\"></a>排序（下）：如何用快排思想在$O(n)$​内查找第K大元素？</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>两种时间复杂度为$O(nlogn)$的排序算法</p>\n<ul>\n<li>归并排序</li>\n<li>快速排序</li>\n</ul>\n<h2 id=\"归并排序（Merge-sort）\"><a href=\"#归并排序（Merge-sort）\" class=\"headerlink\" title=\"归并排序（Merge sort）\"></a>归并排序（Merge sort）</h2><h3 id=\"原理及实现\"><a href=\"#原理及实现\" class=\"headerlink\" title=\"原理及实现\"></a>原理及实现</h3><p><img src=\"https://static001.geekbang.org/resource/image/db/2b/db7f892d3355ef74da9cd64aa926dc2b.jpg\" alt=\"img\"></p>\n<ul>\n<li>数组从中间分成前后两部分</li>\n<li>对前后两部分分别排序</li>\n<li>再将排好序的两部分合并在一起</li>\n</ul>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">递推公式：\n<span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span>p…r<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span><span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span>p…q<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">+</span><span class=\"token number\">1</span>…r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n终止条件：\np <span class=\"token operator\">>=</span> r 不用再继续分解<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 归并排序算法, A是数组，n表示数组大小</span>\n<span class=\"token function\">merge_sort</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">merge_sort_c</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// 递归调用函数</span>\n<span class=\"token function\">merge_sort_c</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token comment\">// 递归终止条件</span>\n  <span class=\"token keyword\">if</span> p <span class=\"token operator\">>=</span> r  then <span class=\"token keyword\">return</span>\n\n  <span class=\"token comment\">// 取p到r之间的中间位置q</span>\n  q <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>p<span class=\"token operator\">+</span>r<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> <span class=\"token number\">2</span>\n  <span class=\"token comment\">// 分治递归</span>\n  <span class=\"token function\">merge_sort_c</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> q<span class=\"token punctuation\">)</span>\n  <span class=\"token function\">merge_sort_c</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> q<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">// 将A[p...q]和A[q+1...r]合并为A[p...r]</span>\n  <span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span>q<span class=\"token operator\">+</span><span class=\"token number\">1.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://static001.geekbang.org/resource/image/95/2f/95897ade4f7ad5d10af057b1d144a22f.jpg\" alt=\"img\"></p>\n<p><code>merge函数的伪代码</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">merge</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span>p<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>q<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> A<span class=\"token punctuation\">[</span>q<span class=\"token operator\">+</span><span class=\"token number\">1.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>r<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  var i <span class=\"token operator\">:</span><span class=\"token operator\">=</span> p，j <span class=\"token operator\">:</span><span class=\"token operator\">=</span> q<span class=\"token operator\">+</span><span class=\"token number\">1</span>，k <span class=\"token operator\">:</span><span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token comment\">// 初始化变量i, j, k</span>\n  var tmp <span class=\"token operator\">:</span><span class=\"token operator\">=</span> new array<span class=\"token punctuation\">[</span><span class=\"token number\">0.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>r<span class=\"token operator\">-</span>p<span class=\"token punctuation\">]</span> <span class=\"token comment\">// 申请一个大小跟A[p...r]一样的临时数组</span>\n  <span class=\"token keyword\">while</span> i<span class=\"token operator\">&lt;=</span>q AND j<span class=\"token operator\">&lt;=</span>r <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;=</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">&#123;</span>\n      tmp<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token comment\">// i++等于i:=i+1</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span>\n      tmp<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>j<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token comment\">// 判断哪个子数组中有剩余的数据</span>\n  var start <span class=\"token operator\">:</span><span class=\"token operator\">=</span> i，end <span class=\"token operator\">:</span><span class=\"token operator\">=</span> q\n  <span class=\"token keyword\">if</span> j<span class=\"token operator\">&lt;=</span>r then start <span class=\"token operator\">:</span><span class=\"token operator\">=</span> j<span class=\"token punctuation\">,</span> end<span class=\"token operator\">:</span><span class=\"token operator\">=</span>r\n  \n  <span class=\"token comment\">// 将剩余的数据拷贝到临时数组tmp</span>\n  <span class=\"token keyword\">while</span> start <span class=\"token operator\">&lt;=</span> end <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n    tmp<span class=\"token punctuation\">[</span>k<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>start<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token comment\">// 将tmp中的数组拷贝回A[p...r]</span>\n  <span class=\"token keyword\">for</span> i<span class=\"token operator\">:</span><span class=\"token operator\">=</span><span class=\"token number\">0</span> to r<span class=\"token operator\">-</span>p <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n    A<span class=\"token punctuation\">[</span>p<span class=\"token operator\">+</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> tmp<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"性能分析\"><a href=\"#性能分析\" class=\"headerlink\" title=\"性能分析\"></a>性能分析</h3><ul>\n<li><p>稳定</p>\n</li>\n<li><p>时间复杂度</p>\n<ul>\n<li><script type=\"math/tex; mode=display\">\nT(a) = T(b) + T(c) + K  \\\\\n\nT(1) = C \\\\\nT(n) = 2*T(n/2) + n； n>1 \\\\\n\nT(1) = C\\\\\n\nT(n) = 2*T(n/2) + n\\\\\n     = 2*(2*T(n/4) + n/2) + n \\\\= 4*T(n/4) + 2*n\\\\\n     = 4*(2*T(n/8) + n/4) + 2*n \\\\= 8*T(n/8) + 3*n\\\\\n     = 8*(2*T(n/16) + n/8) + 3*n \\\\= 16*T(n/16) + 4*n\\\\\n     ......\\\\\n     = 2^k * T(n/2^k) + k * n\\\\\n     ......</script><p>$O(nlogn)$</p>\n</li>\n</ul>\n</li>\n<li><p>空间复杂度</p>\n<ul>\n<li>合并函数在合并时，需要借助额外的存储空间</li>\n<li>$O(n)$</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"快速排序（Quick-sort）\"><a href=\"#快速排序（Quick-sort）\" class=\"headerlink\" title=\"快速排序（Quick sort）\"></a>快速排序（Quick sort）</h2><h3 id=\"原理及实现-1\"><a href=\"#原理及实现-1\" class=\"headerlink\" title=\"原理及实现\"></a>原理及实现</h3><p>思想：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/4d/81/4d892c3a2e08a17f16097d07ea088a81.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">递推公式：\n<span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span>p…r<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span>p…q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span>q<span class=\"token operator\">+</span><span class=\"token number\">1</span>… r<span class=\"token punctuation\">)</span>\n\n终止条件：\np <span class=\"token operator\">>=</span> r<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 快速排序，A是数组，n表示数组的大小</span>\n<span class=\"token function\">quick_sort</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">quick_sort_c</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span>\n<span class=\"token comment\">// 快速排序递归函数，p,r为下标</span>\n<span class=\"token function\">quick_sort_c</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> p <span class=\"token operator\">>=</span> r then <span class=\"token keyword\">return</span>\n  \n  q <span class=\"token operator\">=</span> <span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token comment\">// 获取分区点</span>\n  <span class=\"token function\">quick_sort_c</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> q<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n  <span class=\"token function\">quick_sort_c</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> q<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><code>partition函数--非原地</code></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/66/dc/6643bc3cef766f5b3e4526c332c60adc.jpg\" alt=\"img\"></p>\n<p><code>partition函数--原地</code></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/08/e7/086002d67995e4769473b3f50dd96de7.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token function\">partition</span><span class=\"token punctuation\">(</span>A<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  pivot <span class=\"token operator\">:</span><span class=\"token operator\">=</span> A<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span>\n  i <span class=\"token operator\">:</span><span class=\"token operator\">=</span> p\n  <span class=\"token keyword\">for</span> j <span class=\"token operator\">:</span><span class=\"token operator\">=</span> p to r<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token keyword\">do</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> pivot <span class=\"token punctuation\">&#123;</span>\n      swap A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> with A<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span>\n      i <span class=\"token operator\">:</span><span class=\"token operator\">=</span> i<span class=\"token operator\">+</span><span class=\"token number\">1</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  swap A<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> with A<span class=\"token punctuation\">[</span>r<span class=\"token punctuation\">]</span>\n  <span class=\"token keyword\">return</span> i<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"对比\"><a href=\"#对比\" class=\"headerlink\" title=\"对比\"></a>对比</h2><p><img src=\"https://static001.geekbang.org/resource/image/aa/05/aa03ae570dace416127c9ccf9db8ac05.jpg\" alt=\"img\"></p>\n","text":"排序（下）：如何用快排思想在$O(n)$​内查找第K大元素？引入两种时间复杂度为$O(nlogn)$的排序算法 归并排序 快速排序 归并排序（Merge sort）原理及实现 数组从中间分成前后两部分 对前后两部分分别排序 再将排好序的两部分合并在一起 递推公式： merge_s...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E7%94%A8%E5%BF%AB%E6%8E%92%E6%80%9D%E6%83%B3%E5%9C%A8-O-n-%E2%80%8B%E5%86%85%E6%9F%A5%E6%89%BE%E7%AC%ACK%E5%A4%A7%E5%85%83%E7%B4%A0%EF%BC%9F\"><span class=\"toc-text\">排序（下）：如何用快排思想在$O(n)$​内查找第K大元素？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">引入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F%EF%BC%88Merge-sort%EF%BC%89\"><span class=\"toc-text\">归并排序（Merge sort）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">原理及实现</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%80%A7%E8%83%BD%E5%88%86%E6%9E%90\"><span class=\"toc-text\">性能分析</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%EF%BC%88Quick-sort%EF%BC%89\"><span class=\"toc-text\">快速排序（Quick sort）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%8E%9F%E7%90%86%E5%8F%8A%E5%AE%9E%E7%8E%B0-1\"><span class=\"toc-text\">原理及实现</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AF%B9%E6%AF%94\"><span class=\"toc-text\">对比</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DSA11 Sort1","uid":"dc2049cb2b924724d0d9c0e20e1cbe8f","slug":"DSA/C11 排序(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:20:32.000Z","comments":true,"path":"api/articles/DSA/C11 排序(上).json","keywords":null,"cover":[],"text":"排序（上）：为什么插入排序比冒泡排序更受欢迎？概述 如何分析一个排序算法？ 执行效率 最好、最坏、平均情况时间复杂度 时间复杂度的系数、常数、低阶 比较次数和交换次数 内存消耗 原地排序特指空间复杂度是$O(1)$的排序算法 稳定性 如果待排序的序列中存在值相等的元素，经过排序之...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"DSA13 Sort3","uid":"f0bf7281fb0e82f54bc8de918f6f9204","slug":"DSA/C13 线性排序","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:20:57.000Z","comments":true,"path":"api/articles/DSA/C13 线性排序.json","keywords":null,"cover":[],"text":"线性排序：如何根据年龄给100万用户数据排序？引入三种时间复杂度为$O(n)$的排序算法 桶排序 计数排序 基数排序 非基于比较的排序算法→时间复杂度为线性 桶排序（Bucket sort） 计数排序（counting sort） 桶排序的特殊情况 所处范围不大，最大值为k，划分...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}