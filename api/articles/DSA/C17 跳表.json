{"title":"DSA17 Skip List","uid":"0bec27181caef93fd79c11aa3edf5064","slug":"DSA/C17 跳表","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:22:29.842Z","comments":true,"path":"api/articles/DSA/C17 跳表.json","keywords":null,"cover":[],"content":"<h1 id=\"跳表：为什么Redis一定要用跳表来实现有序集合？\"><a href=\"#跳表：为什么Redis一定要用跳表来实现有序集合？\" class=\"headerlink\" title=\"跳表：为什么Redis一定要用跳表来实现有序集合？\"></a>跳表：为什么Redis一定要用跳表来实现有序集合？</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>如果数据存储在链表中，真的没法用二分查找算法了吗？</p>\n<p>跳表是一种各方面性能都比较优秀的动态数据结构，支持快速地插入、删除、查找操作</p>\n<h2 id=\"如何理解跳表\"><a href=\"#如何理解跳表\" class=\"headerlink\" title=\"如何理解跳表\"></a>如何理解跳表</h2><p><img src=\"https://static001.geekbang.org/resource/image/49/65/492206afe5e2fef9f683c7cff83afa65.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/46/a9/46d283cd82c987153b3fe0c76dfba8a9.jpg\" alt=\"img\"><br>$$<br>跳表 = 链表 + 多级索引<br>$$</p>\n<h2 id=\"用跳表查询到底有多快？\"><a href=\"#用跳表查询到底有多快？\" class=\"headerlink\" title=\"用跳表查询到底有多快？\"></a>用跳表查询到底有多快？</h2><pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\">graph TD\n链表n个结点 --每两个结点抽出一个结点作为上一级索引的结点 --&gt; 第k级索引的结点个数为n&#x2F;2&#96;k<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtuawfzr4vj60hx05qglo02.jpg\" alt=\"image-20210729162953183\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/d0/0c/d03bef9a64a0368e6a0d23ace8bd450c.jpg\" alt=\"img\"></p>\n<h2 id=\"跳表是不是很浪费内存？\"><a href=\"#跳表是不是很浪费内存？\" class=\"headerlink\" title=\"跳表是不是很浪费内存？\"></a>跳表是不是很浪费内存？</h2><h3 id=\"每2个结点抽1个\"><a href=\"#每2个结点抽1个\" class=\"headerlink\" title=\"每2个结点抽1个\"></a>每2个结点抽1个</h3><p><img src=\"https://static001.geekbang.org/resource/image/10/55/100e9d6e5abeaae542cf7841be3f8255.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/0b/f7/0b0680ecf500f9349fc142e1a9eb73f7.jpg\" alt=\"img\"><br>$$<br>\\frac{n}{2}+\\frac{n}{4}+\\cdots+8+4+2 = n-2<br>$$<br>需要额外再用接近n个结点的存储空间</p>\n<h3 id=\"每3个结点抽1个\"><a href=\"#每3个结点抽1个\" class=\"headerlink\" title=\"每3个结点抽1个\"></a>每3个结点抽1个</h3><p><img src=\"https://static001.geekbang.org/resource/image/19/95/192c480664e35591360cee96ff2f8395.jpg\" alt=\"img\"><br>$$<br>\\frac{n}{3}+\\frac{n}{9}+\\cdots+9+3+1 = \\frac{n}{2}<br>$$<br>比上述情况减少了一般的索引结点存储空间</p>\n<h3 id=\"实际情况\"><a href=\"#实际情况\" class=\"headerlink\" title=\"实际情况\"></a>实际情况</h3><p>实际上，在软件开发中，我们不必太在意索引占用的额外空间</p>\n<p>在讲数据结构和算法时，我们习惯性地把要处理的数据看成整数</p>\n<p>但是在实际的软件开发中，原始链表中存储的有可能是很大的对象，而索引结点只需要存储关键值和几个指针，并不需要存储对象</p>\n<p>所以当对象比索引结点大很多时，那索引占用的额外空间就可以忽略了</p>\n<h2 id=\"高效的动态插入和删除\"><a href=\"#高效的动态插入和删除\" class=\"headerlink\" title=\"高效的动态插入和删除\"></a>高效的动态插入和删除</h2><h3 id=\"插入\"><a href=\"#插入\" class=\"headerlink\" title=\"插入\"></a>插入</h3><p><img src=\"https://static001.geekbang.org/resource/image/65/6c/65379f0651bc3a7cfd13ab8694c4d26c.jpg\" alt=\"img\"></p>\n<h3 id=\"删除\"><a href=\"#删除\" class=\"headerlink\" title=\"删除\"></a>删除</h3><p>如果结点在索引中也有出现，除了要删除原始链表中的结点，还要删除索引中的</p>\n<ul>\n<li>单向链表：一定要获取前驱结点</li>\n<li>双向链表：不需要考虑这个问题</li>\n</ul>\n<h2 id=\"跳表索引的动态更新\"><a href=\"#跳表索引的动态更新\" class=\"headerlink\" title=\"跳表索引的动态更新\"></a>跳表索引的动态更新</h2><p><img src=\"https://static001.geekbang.org/resource/image/c8/c5/c863074c01c26538cf0134eaf8dc67c5.jpg\" alt=\"img\"></p>\n<ul>\n<li>动态数据结构，需要某种手段来维护索引与原始链表大小之间的平衡<ul>\n<li>链表结点增多→索引结点相应增加，避免复杂度退化及查找、插入、删除操作性能下降</li>\n<li>通过<strong>随机函数</strong>维护平衡性</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/a8/a7/a861445d0b53fc842f38919365b004a7.jpg\" alt=\"img\"></p>\n","text":"跳表：为什么Redis一定要用跳表来实现有序集合？引入如果数据存储在链表中，真的没法用二分查找算法了吗？ 跳表是一种各方面性能都比较优秀的动态数据结构，支持快速地插入、删除、查找操作 如何理解跳表 $$跳表 = 链表 + 多级索引$$ 用跳表查询到底有多快？graph TD 链表...","link":"","photos":[],"count_time":{"symbolsCount":702,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B7%B3%E8%A1%A8%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88Redis%E4%B8%80%E5%AE%9A%E8%A6%81%E7%94%A8%E8%B7%B3%E8%A1%A8%E6%9D%A5%E5%AE%9E%E7%8E%B0%E6%9C%89%E5%BA%8F%E9%9B%86%E5%90%88%EF%BC%9F\"><span class=\"toc-text\">跳表：为什么Redis一定要用跳表来实现有序集合？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">引入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E8%B7%B3%E8%A1%A8\"><span class=\"toc-text\">如何理解跳表</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%94%A8%E8%B7%B3%E8%A1%A8%E6%9F%A5%E8%AF%A2%E5%88%B0%E5%BA%95%E6%9C%89%E5%A4%9A%E5%BF%AB%EF%BC%9F\"><span class=\"toc-text\">用跳表查询到底有多快？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%B3%E8%A1%A8%E6%98%AF%E4%B8%8D%E6%98%AF%E5%BE%88%E6%B5%AA%E8%B4%B9%E5%86%85%E5%AD%98%EF%BC%9F\"><span class=\"toc-text\">跳表是不是很浪费内存？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AF%8F2%E4%B8%AA%E7%BB%93%E7%82%B9%E6%8A%BD1%E4%B8%AA\"><span class=\"toc-text\">每2个结点抽1个</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%AF%8F3%E4%B8%AA%E7%BB%93%E7%82%B9%E6%8A%BD1%E4%B8%AA\"><span class=\"toc-text\">每3个结点抽1个</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E9%99%85%E6%83%85%E5%86%B5\"><span class=\"toc-text\">实际情况</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E9%AB%98%E6%95%88%E7%9A%84%E5%8A%A8%E6%80%81%E6%8F%92%E5%85%A5%E5%92%8C%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">高效的动态插入和删除</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5\"><span class=\"toc-text\">插入</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4\"><span class=\"toc-text\">删除</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%B7%B3%E8%A1%A8%E7%B4%A2%E5%BC%95%E7%9A%84%E5%8A%A8%E6%80%81%E6%9B%B4%E6%96%B0\"><span class=\"toc-text\">跳表索引的动态更新</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DSA16 Binary Search2","uid":"4c75cfdca780ea6522270fb11aab65bd","slug":"DSA/C16 二分查找(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:21:28.081Z","comments":true,"path":"api/articles/DSA/C16 二分查找(下).json","keywords":null,"cover":[],"text":"二分查找（下）：如何快速定位IP对应的省份地址？引入 查找第一个值等于给定值的元素 public int bsearch(int[] a, int n, int value) &#123; int low = 0; int high = n - 1; while (low &lt...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"DSA18 Hash Table1","uid":"f2a6a2cecbbac22b23528956a3dabf70","slug":"DSA/C18 散列表(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:22:42.811Z","comments":true,"path":"api/articles/DSA/C18 散列表(上).json","keywords":null,"cover":[],"text":"散列表（上）：Word文档中的单词拼写检查功能是如何实现的？引入Word拼写检查功能 散列思想Hash Table 散列表用的是数组支持按照下标随机访问数据的特性，所以散列表其实就是数组的一种扩展，由数组演化而来。可以说，如果没有数组，就没有散列表 经典例子 参赛选手的编号：ke...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}