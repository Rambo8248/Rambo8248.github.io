{"title":"DSA34 String Match3","uid":"9ae95ab2c9e432ffcdddad19b3709cb8","slug":"DSA/C34 字符串匹配基础(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:26:45.892Z","comments":true,"path":"api/articles/DSA/C34 字符串匹配基础(下).json","keywords":null,"cover":[],"content":"<h1 id=\"字符串匹配基础（下）：如何借助BM算法轻松理解KMP算法？\"><a href=\"#字符串匹配基础（下）：如何借助BM算法轻松理解KMP算法？\" class=\"headerlink\" title=\"字符串匹配基础（下）：如何借助BM算法轻松理解KMP算法？\"></a>字符串匹配基础（下）：如何借助BM算法轻松理解KMP算法？</h1><p>所有字符串匹配算法中，最知名的一种非KMP算法莫属</p>\n<h2 id=\"KMP算法基本原理\"><a href=\"#KMP算法基本原理\" class=\"headerlink\" title=\"KMP算法基本原理\"></a>KMP算法基本原理</h2><p>Knuth-Morris-Pratt</p>\n<p>核心思想</p>\n<ul>\n<li>模式串与主串匹配过程中，当遇到不可匹配的字符时，希望找到一些规律，将模式串向后多滑动几位，跳过那些肯定不会匹配的情况</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/17/be/17ae3d55cf140285d1f34481e173aebe.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/f4/69/f4ef2c1e6ce5915e1c6460c2e26c9469.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/9e/ad/9e59c0973ffb965abdd3be5eafb492ad.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/16/a8/1661d37cb190cb83d713749ff9feaea8.jpg\" alt=\"img\"></p>\n<p>KMP算法的框架</p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#x2F;&#x2F; a, b分别是主串和模式串；n, m分别是主串和模式串的长度。\npublic static int kmp(char[] a, int n, char[] b, int m) &#123;\n  int[] next &#x3D; getNexts(b, m);\n  int j &#x3D; 0;\n  for (int i &#x3D; 0; i &lt; n; ++i) &#123;\n    while (j &gt; 0 &amp;&amp; a[i] !&#x3D; b[j]) &#123; &#x2F;&#x2F; 一直找到a[i]和b[j]\n      j &#x3D; next[j - 1] + 1;\n    &#125;\n    if (a[i] &#x3D;&#x3D; b[j]) &#123;\n      ++j;\n    &#125;\n    if (j &#x3D;&#x3D; m) &#123; &#x2F;&#x2F; 找到匹配模式串的了\n      return i - m + 1;\n    &#125;\n  &#125;\n  return -1;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"失效函数的计算方法\"><a href=\"#失效函数的计算方法\" class=\"headerlink\" title=\"失效函数的计算方法\"></a>失效函数的计算方法</h2><p>next数组如何计算出来</p>\n<p>笨办法：依次找出</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/1e/ec/1ee5bea573abd033a6aa35d15ef0baec.jpg\" alt=\"img\"></p>\n<p>高效方法：</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/4c/19/4caa532d03d3b455ca834245935e2819.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/2a/e1/2a1845b494127c7244c82c7c59f2bfe1.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/13/13/1311d9026cb6e0fd51b7afa47255b813.jpg\" alt=\"img\"></p>\n<h2 id=\"整个框架代码\"><a href=\"#整个框架代码\" class=\"headerlink\" title=\"整个框架代码\"></a>整个框架代码</h2><pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#x2F;&#x2F; b表示模式串，m表示模式串的长度\nprivate static int[] getNexts(char[] b, int m) &#123;\n  int[] next &#x3D; new int[m];\n  next[0] &#x3D; -1;\n  int k &#x3D; -1;\n  for (int i &#x3D; 1; i &lt; m; ++i) &#123;\n    while (k !&#x3D; -1 &amp;&amp; b[k + 1] !&#x3D; b[i]) &#123;\n      k &#x3D; next[k];\n    &#125;\n    if (b[k + 1] &#x3D;&#x3D; b[i]) &#123;\n      ++k;\n    &#125;\n    next[i] &#x3D; k;\n  &#125;\n  return next;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n","text":"字符串匹配基础（下）：如何借助BM算法轻松理解KMP算法？所有字符串匹配算法中，最知名的一种非KMP算法莫属 KMP算法基本原理Knuth-Morris-Pratt 核心思想 模式串与主串匹配过程中，当遇到不可匹配的字符时，希望找到一些规律，将模式串向后多滑动几位，跳过那些肯定不...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%80%9F%E5%8A%A9BM%E7%AE%97%E6%B3%95%E8%BD%BB%E6%9D%BE%E7%90%86%E8%A7%A3KMP%E7%AE%97%E6%B3%95%EF%BC%9F\"><span class=\"toc-text\">字符串匹配基础（下）：如何借助BM算法轻松理解KMP算法？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#KMP%E7%AE%97%E6%B3%95%E5%9F%BA%E6%9C%AC%E5%8E%9F%E7%90%86\"><span class=\"toc-text\">KMP算法基本原理</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%B1%E6%95%88%E5%87%BD%E6%95%B0%E7%9A%84%E8%AE%A1%E7%AE%97%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">失效函数的计算方法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B4%E4%B8%AA%E6%A1%86%E6%9E%B6%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">整个框架代码</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DSA32 String Match1","uid":"2786242c5ba6ce0832bbacd81c75d253","slug":"DSA/C32 字符串匹配基础(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:26:22.494Z","comments":true,"path":"api/articles/DSA/C32 字符串匹配基础(上).json","keywords":null,"cover":[],"text":"字符串匹配基础（上）：如何借助哈希算法实现高效字符串匹配？字符串匹配 算法 单模式串匹配的算法：一个串跟一个串进行匹配 BF算法 RK算法 多模式串匹配的算法：在一个串中同时查找多个串 BM算法 KMP算法 BF算法Brute Force，暴力匹配算法，朴素匹配算法 在字符串A中...","link":"","photos":[],"count_time":{"symbolsCount":748,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"DSA37 Greedy Algorithm","uid":"a9e32e2621fbdc03b2a42efbcf0ce8e5","slug":"DSA/C37 贪心算法","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:27:30.880Z","comments":true,"path":"api/articles/DSA/C37 贪心算法.json","keywords":null,"cover":[],"text":"贪心算法：如何用贪心算法实现Huffman压缩编码？几个基本的算法思想 贪心算法 Huffman Coding Prim和Kruskal最小生成树算法 Dijkstra单源最短路径 分治算法 回溯算法 动态规划 本章如何利用贪心算法实现对数据压缩编码，有效节省数据存储空间 如何理...","link":"","photos":[],"count_time":{"symbolsCount":678,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}