{"title":"DSA33 String Match2","uid":"0ec81c6d3aa8372bc4bd0a74846f2430","slug":"DSA/C33 字符串匹配基础(中)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:26:35.770Z","comments":true,"path":"api/articles/DSA/C33 字符串匹配基础(中).json","keywords":null,"cover":[],"content":"<h1 id=\"字符串匹配基础（中）：如何实现文本编辑器中的查找功能？\"><a href=\"#字符串匹配基础（中）：如何实现文本编辑器中的查找功能？\" class=\"headerlink\" title=\"字符串匹配基础（中）：如何实现文本编辑器中的查找功能？\"></a>字符串匹配基础（中）：如何实现文本编辑器中的查找功能？</h1><p>文本编辑器中的查找替换功能</p>\n<ul>\n<li>BM算法，Boyer-Moore</li>\n<li>KMP算法</li>\n</ul>\n<h2 id=\"BM算法\"><a href=\"#BM算法\" class=\"headerlink\" title=\"BM算法\"></a>BM算法</h2><h3 id=\"核心思想\"><a href=\"#核心思想\" class=\"headerlink\" title=\"核心思想\"></a>核心思想</h3><p><img src=\"https://static001.geekbang.org/resource/image/43/f9/4316dd98eac500a01a0fd632bb5e77f9.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/cf/15/cf362f9e59c01aaf40a34d2f10e1ef15.jpg\" alt=\"img\"></p>\n<p>当模式串和主串某个字符不匹配的时候，能够跳过一些可定不会匹配的情况，将模式串往后多滑动几位</p>\n<h3 id=\"算法原理分析\"><a href=\"#算法原理分析\" class=\"headerlink\" title=\"算法原理分析\"></a>算法原理分析</h3><h4 id=\"坏字符规则\"><a href=\"#坏字符规则\" class=\"headerlink\" title=\"坏字符规则\"></a>坏字符规则</h4><p><img src=\"https://static001.geekbang.org/resource/image/54/9e/540809418354024206d9989cb6cdd89e.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/22/da/220daef736418df84367215647bca5da.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/4e/64/4e36c4d48d1b6c3b499fb021f03c7f64.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/a8/ca/a8d229aa217a67051fbb31b8aeb2edca.jpg\" alt=\"img\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtub3zuz2xj60in0do0tg02.jpg\" alt=\"image-20210805164659451\"></p>\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\">graph TD\n发生不匹配时 --&gt; 坏字符对应的模式串中字符下标记做si --&gt; 坏字符在模式串中是否存在 --yes--&gt;把这个坏字符在模式串中的下标记做xi  --&gt;模式串后移位数为si-xi\n坏字符在模式串中是否存在 --no--&gt;xi记做-1 --&gt;模式串后移位数为si-xi<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://static001.geekbang.org/resource/image/8f/2e/8f520fb9d9cec0f6ea641d4181eb432e.jpg\" alt=\"img\"></p>\n<h4 id=\"好后缀规则\"><a href=\"#好后缀规则\" class=\"headerlink\" title=\"好后缀规则\"></a>好后缀规则</h4><p><img src=\"https://static001.geekbang.org/resource/image/d7/8a/d78990dbcb794d1aa2cf4a3c646ae58a.jpg\" alt=\"img\"></p>\n<p>这个时候如何滑动？</p>\n<ul>\n<li>坏字符规则？</li>\n<li>好后缀规则？</li>\n</ul>\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\">graph TD\n将已经匹配好的bc叫做好后缀记做u --&gt; 拿它在模式串中查找 \n--找到另一个跟u相匹配的子串u*--&gt;将模式串滑动到子串u*与主串中u对齐的位置\n\n 拿它在模式串中查找 \n--未找到另一个跟u相匹配的子串u*--&gt;考虑好后缀的后缀子串是否存在跟模式串的前缀子串匹配的 --&gt; 从好后缀的后缀子串中找一个最长的并且能跟模式串的前缀子串匹配的<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtub447pvgj60nf0agwfi02.jpg\" alt=\"image-20210805164713057\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/b9/63/b9785be3e91e34bbc23961f67c234b63.jpg\" alt=\"u与u*匹配检验\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/de/cd/de97c461b9b9dbc42d35768db59908cd.jpg\" alt=\"滑动操作\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/9b/70/9b3fa3d1cd9c0d0f914a9b1f518ad070.jpg\" alt=\"过度滑动和合理滑动\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/05/23/0544d2997d8bb57c10e13ccac4015e23.jpg\" alt=\"综合考虑后缀的后缀子串与模式串的前缀子串关系\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/6c/f9/6caa0f61387fd2b3109fe03d803192f9.jpg\" alt=\"img\"></p>\n<h4 id=\"如何选择用好后缀规则还是坏字符规则\"><a href=\"#如何选择用好后缀规则还是坏字符规则\" class=\"headerlink\" title=\"如何选择用好后缀规则还是坏字符规则\"></a>如何选择用好后缀规则还是坏字符规则</h4><ul>\n<li>分别计算好后缀和坏字符往后滑动的位数</li>\n<li>取两个数中最大的作为模式串往后滑动的位数</li>\n</ul>\n<h3 id=\"算法代码实现\"><a href=\"#算法代码实现\" class=\"headerlink\" title=\"算法代码实现\"></a>算法代码实现</h3><h4 id=\"坏字符规则的实现\"><a href=\"#坏字符规则的实现\" class=\"headerlink\" title=\"坏字符规则的实现\"></a>坏字符规则的实现</h4><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtub47j6y5j60ko0dwaat02.jpg\" alt=\"image-20210805164720765\"></p>\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\">graph TD\n遇到坏字符 --&gt; 计算往后移动的位数si-xi --&gt;xi如何求得 \n--坏方法--&gt; 坏字符在模式串中顺序遍历查找 --&gt; 低效\n\nxi如何求得 \n--好方法--&gt; 模式串中每个字符及其下标存到散列表中 --&gt; 快速找到坏字符在模式串的位置下标<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://static001.geekbang.org/resource/image/bf/02/bf78f8a0506e069fa318f36c42a95e02.jpg\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>数组属性</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>数组下标</td>\n<td>字符的ASCII码</td>\n</tr>\n<tr>\n<td>数组中的元素</td>\n<td>存储这个字符在模式串中出现的位置</td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">final</span> <span class=\"token keyword\">int</span> SIZE <span class=\"token operator\">=</span> <span class=\"token number\">256</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 全局变量或成员变量</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">generateBC</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> SIZE<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    bc<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 初始化bc</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> m<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> ascii <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>b<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 计算b[i]的ASCII值</span>\n    bc<span class=\"token punctuation\">[</span>ascii<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>BM算法的大框架（先不考虑好后缀，仅考虑坏字符，且不考虑si-xi计算得到的移动为数可能会出现负数的情况）</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">bm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录模式串中每个字符最后出现的位置</span>\n  <span class=\"token function\">generateBC</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> bc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 构建坏字符哈希表</span>\n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// i表示主串与模式串对齐的第一个字符</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">-</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 模式串从后往前匹配</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 坏字符对应模式串中的下标是j</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 匹配成功，返回主串与模式串第一个匹配的字符的位置</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token comment\">// 这里等同于将模式串往后滑动j-bc[(int)a[i+j]]位</span>\n    i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">-</span> bc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h4 id=\"填充好后缀规则\"><a href=\"#填充好后缀规则\" class=\"headerlink\" title=\"填充好后缀规则\"></a>填充好后缀规则</h4><table>\n<thead>\n<tr>\n<th>项目</th>\n<th>具体</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>好后缀处理规则核心内容</td>\n<td>模式串中，查找跟好后缀匹配的另一个子串<br />好后缀的后缀子串中，查找最长的、能跟模式串前缀子串匹配的后缀子串</td>\n</tr>\n<tr>\n<td>为了不至于低效如何做？</td>\n<td>好后缀本身也是模式串本身的后缀子串<br />在模式串和主串正式匹配之前，通过<strong>预处理模式串</strong>，预先<strong>计算好模式串的每个后缀子串</strong>，对应的另一个可匹配子串的位置</td>\n</tr>\n<tr>\n<td>如何表示模式串中不同的后缀子串？</td>\n<td>记录长度如图1所示</td>\n</tr>\n<tr>\n<td>suffix数组</td>\n<td>下标k：表示后缀子串的长度<br />下标对应的数组值：在模式串中跟好后缀{u}相匹配的子串{u*}的起始下标值<br />如图2所示</td>\n</tr>\n<tr>\n<td>prefix数组</td>\n<td>记录模式串的后缀子串是否能匹配模式串的前缀子串<br />如图3所示</td>\n</tr>\n<tr>\n<td>如何计算并填充suffix和prefix两个数组</td>\n<td>下标从0到i的子串 + 整个模式串 → 公共后缀子串<br />公共后缀子串长度 = k<br />suffix[k] = j<br />如果j = 0→ prefix[k] = true;</td>\n</tr>\n<tr>\n<td>在模式串跟主串匹配中遇到不能匹配的字符，如何根据好后缀规则，计算模式串往后移动的位数</td>\n<td>如图所示</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://static001.geekbang.org/resource/image/77/c8/7742f1d02d0940a1ef3760faf4929ec8.jpg\" alt=\"如何表示模式串中不同的后缀子串？\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/99/c2/99a6cfadf2f9a713401ba8feac2484c2.jpg\" alt=\"suffix数组\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/27/83/279be7d64e6254dac1a32d2f6d1a2383.jpg\" alt=\"prefix数组\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/57/7c/5723be3c77cdbddb64b1f8d6473cea7c.jpg\" alt=\"如何计算并填充suffix和prefix两个数组\"></p>\n<pre class=\"line-numbers language-Java\" data-language=\"Java\"><code class=\"language-Java\">&#x2F;&#x2F; b表示模式串，m表示长度，suffix，prefix数组事先申请好了\nprivate void generateGS(char[] b, int m, int[] suffix, boolean[] prefix) &#123;\n  for (int i &#x3D; 0; i &lt; m; ++i) &#123; &#x2F;&#x2F; 初始化\n    suffix[i] &#x3D; -1;\n    prefix[i] &#x3D; false;\n  &#125;\n  for (int i &#x3D; 0; i &lt; m - 1; ++i) &#123; &#x2F;&#x2F; b[0, i]\n    int j &#x3D; i;\n    int k &#x3D; 0; &#x2F;&#x2F; 公共后缀子串长度\n    while (j &gt;&#x3D; 0 &amp;&amp; b[j] &#x3D;&#x3D; b[m-1-k]) &#123; &#x2F;&#x2F; 与b[0, m-1]求公共后缀子串\n      --j;\n      ++k;\n      suffix[k] &#x3D; j+1; &#x2F;&#x2F;j+1表示公共后缀子串在b[0, i]中的起始下标\n    &#125;\n    if (j &#x3D;&#x3D; -1) prefix[k] &#x3D; true; &#x2F;&#x2F;如果公共后缀子串也是模式串的前缀子串\n  &#125;\n&#125;<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://static001.geekbang.org/resource/image/1d/72/1d046df5cc40bc57d3f92ff7c51afb72.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/63/0d/63a357abc9766393a77a9a006a31b10d.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/d9/a1/d982db00467964666de18ed5ac647fa1.jpg\" alt=\"img\"></p>\n<h3 id=\"完整代码\"><a href=\"#完整代码\" class=\"headerlink\" title=\"完整代码\"></a>完整代码</h3><pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// a,b表示主串和模式串；n，m表示主串和模式串的长度。</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">int</span> <span class=\"token function\">bm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> bc <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 记录模式串中每个字符最后出现的位置</span>\n  <span class=\"token function\">generateBC</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> bc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 构建坏字符哈希表</span>\n  <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> suffix <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prefix <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span>m<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">generateGS</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> suffix<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// j表示主串与模式串匹配的第一个字符</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">-</span> m<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 模式串从后往前匹配</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> b<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 坏字符对应模式串中的下标是j</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 匹配成功，返回主串与模式串第一个匹配的字符的位置</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">int</span> x <span class=\"token operator\">=</span> j <span class=\"token operator\">-</span> bc<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">+</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> y <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">&lt;</span> m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 如果有好后缀的话</span>\n      y <span class=\"token operator\">=</span> <span class=\"token function\">moveByGS</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">,</span> m<span class=\"token punctuation\">,</span> suffix<span class=\"token punctuation\">,</span> prefix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    i <span class=\"token operator\">=</span> i <span class=\"token operator\">+</span> <span class=\"token class-name\">Math</span><span class=\"token punctuation\">.</span><span class=\"token function\">max</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token comment\">// j表示坏字符对应的模式串中的字符下标; m表示模式串长度</span>\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> <span class=\"token function\">moveByGS</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> m<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> suffix<span class=\"token punctuation\">,</span> <span class=\"token keyword\">boolean</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> prefix<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> m <span class=\"token operator\">-</span> <span class=\"token number\">1</span> <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 好后缀长度</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>suffix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> j <span class=\"token operator\">-</span> suffix<span class=\"token punctuation\">[</span>k<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> r <span class=\"token operator\">=</span> j<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> r <span class=\"token operator\">&lt;=</span> m<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>r<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prefix<span class=\"token punctuation\">[</span>m<span class=\"token operator\">-</span>r<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> m<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"小结\"><a href=\"#小结\" class=\"headerlink\" title=\"小结\"></a>小结</h2><p>核心思想</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtub4dpkfrj60b20d0mxm02.jpg\" alt=\"image-20210805164732644\"></p>\n<pre class=\"line-numbers language-mermaid\" data-language=\"mermaid\"><code class=\"language-mermaid\">graph TD\n利用模式串本身特点 --&gt; 模式串中某个字符与主串不能匹配时候 --&gt; 将模式串往后多滑动几位 --&gt; 减少不必要的字符比较 --&gt; 提高匹配效率<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<p>算法构建规则</p>\n<ul>\n<li>坏字符规则</li>\n<li>好后缀规则</li>\n</ul>\n","text":"字符串匹配基础（中）：如何实现文本编辑器中的查找功能？文本编辑器中的查找替换功能 BM算法，Boyer-Moore KMP算法 BM算法核心思想 当模式串和主串某个字符不匹配的时候，能够跳过一些可定不会匹配的情况，将模式串往后多滑动几位 算法原理分析坏字符规则 graph TD ...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%8C%B9%E9%85%8D%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%AD%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%96%87%E6%9C%AC%E7%BC%96%E8%BE%91%E5%99%A8%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE%E5%8A%9F%E8%83%BD%EF%BC%9F\"><span class=\"toc-text\">字符串匹配基础（中）：如何实现文本编辑器中的查找功能？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#BM%E7%AE%97%E6%B3%95\"><span class=\"toc-text\">BM算法</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%A0%B8%E5%BF%83%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">核心思想</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E5%8E%9F%E7%90%86%E5%88%86%E6%9E%90\"><span class=\"toc-text\">算法原理分析</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9D%8F%E5%AD%97%E7%AC%A6%E8%A7%84%E5%88%99\"><span class=\"toc-text\">坏字符规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A5%BD%E5%90%8E%E7%BC%80%E8%A7%84%E5%88%99\"><span class=\"toc-text\">好后缀规则</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E9%80%89%E6%8B%A9%E7%94%A8%E5%A5%BD%E5%90%8E%E7%BC%80%E8%A7%84%E5%88%99%E8%BF%98%E6%98%AF%E5%9D%8F%E5%AD%97%E7%AC%A6%E8%A7%84%E5%88%99\"><span class=\"toc-text\">如何选择用好后缀规则还是坏字符规则</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%AE%97%E6%B3%95%E4%BB%A3%E7%A0%81%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">算法代码实现</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%9D%8F%E5%AD%97%E7%AC%A6%E8%A7%84%E5%88%99%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">坏字符规则的实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%A1%AB%E5%85%85%E5%A5%BD%E5%90%8E%E7%BC%80%E8%A7%84%E5%88%99\"><span class=\"toc-text\">填充好后缀规则</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%8C%E6%95%B4%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">完整代码</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">小结</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DSA40 初识动态规划","uid":"7315897fe4af98b9a72088541e465f37","slug":"DSA/C40 初识动态规划","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:28:16.832Z","comments":true,"path":"api/articles/DSA/C40 初识动态规划.json","keywords":null,"cover":null,"text":"初识动态规划：如何巧妙解决“双十一”购物时的凑单问题？引入 双十一满200减50，选出来的商品价格总和最大程度接近满减条件，极大限度薅羊毛 动态规划学习路线动态规划比较适合用来求解最优问题，比如求最大值、最小值等 初识动态规划 两个经典动态规划问题模型 为什么动态规划 动态规划解...","link":"","photos":[],"count_time":{"symbolsCount":220,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"DSA4 Complexity Analysis2","uid":"fc19127153caeb9baa595a1d01d3f0d7","slug":"DSA/C4 复杂度分析(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:18:54.464Z","comments":true,"path":"api/articles/DSA/C4 复杂度分析(下).json","keywords":null,"cover":null,"text":"复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度// n表示数组array的长度 int find(int[] array, int n, int x) &#123; int i = 0; int pos = -1; for (; i &lt; n; ++i) &#123;...","link":"","photos":[],"count_time":{"symbolsCount":913,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}