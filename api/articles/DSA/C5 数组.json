{"title":"DSA5 Array","uid":"be65ef045a392dbdd6233f994cc17ed3","slug":"DSA/C5 数组","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:19:05.000Z","comments":true,"path":"api/articles/DSA/C5 数组.json","keywords":null,"cover":[],"content":"<h1 id=\"数组：为什么很多编程语言中数组都从0开始编号？\"><a href=\"#数组：为什么很多编程语言中数组都从0开始编号？\" class=\"headerlink\" title=\"数组：为什么很多编程语言中数组都从0开始编号？\"></a>数组：为什么很多编程语言中数组都从0开始编号？</h1><h2 id=\"如何实现随机访问？\"><a href=\"#如何实现随机访问？\" class=\"headerlink\" title=\"如何实现随机访问？\"></a>如何实现随机访问？</h2><blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>数组(array)</p>\n<p>一种线性表数据结构。用一组连续的内存空间，来存储一组具有相同类型的数据</p></blockquote>\n<h3 id=\"线性表与非线性表\"><a href=\"#线性表与非线性表\" class=\"headerlink\" title=\"线性表与非线性表\"></a>线性表与非线性表</h3><ul>\n<li>线性表<ul>\n<li>数据排成像一条线一样的结构，每个线性表上的数据最多只有前和后两个方向</li>\n<li><img src=\"https://static001.geekbang.org/resource/image/b6/77/b6b71ec46935130dff5c4b62cf273477.jpg\" alt=\"img\"></li>\n</ul>\n</li>\n<li>非线性表<ul>\n<li>数据之间并不是简单的前后关系</li>\n<li><img src=\"https://static001.geekbang.org/resource/image/6e/69/6ebf42641b5f98f912d36f6bf86f6569.jpg\" alt=\"img\"></li>\n</ul>\n</li>\n</ul>\n<h3 id=\"连续的内存空间和相同类型的数据\"><a href=\"#连续的内存空间和相同类型的数据\" class=\"headerlink\" title=\"连续的内存空间和相同类型的数据\"></a>连续的内存空间和相同类型的数据</h3><p>以上两个限制构成了数组的“杀手锏”特性：<strong>随机访问</strong></p>\n<ul>\n<li>优点：访问方便</li>\n<li>缺点：删除、插入操作，为保证连续性，需要做大量的数据搬移工作</li>\n</ul>\n<h3 id=\"如何实现根据下表随机访问数组元素？\"><a href=\"#如何实现根据下表随机访问数组元素？\" class=\"headerlink\" title=\"如何实现根据下表随机访问数组元素？\"></a>如何实现根据下表随机访问数组元素？</h3><p><img src=\"https://static001.geekbang.org/resource/image/98/c4/98df8e702b14096e7ee4a5141260cdc4.jpg\" alt=\"img\"></p>\n<script type=\"math/tex; mode=display\">\na[i]\\_{address} = base\\_address + i * data\\_type\\_size</script><ul>\n<li>数组支持随机访问</li>\n<li>根据下表随机访问的时间复杂度为$O(1)$</li>\n</ul>\n<h2 id=\"低效的“插入”和“删除”\"><a href=\"#低效的“插入”和“删除”\" class=\"headerlink\" title=\"低效的“插入”和“删除”\"></a>低效的“插入”和“删除”</h2><p><img src=\"https://static001.geekbang.org/resource/image/3f/dc/3f70b4ad9069ec568a2caaddc231b7dc.jpg\" alt=\"img\"></p>\n<ul>\n<li>问题：如果要将某个数据插入到第k个位置</li>\n<li>可能的困难：为了避免大规模的数据搬移</li>\n<li>解决方案：直接将第k位的数据搬移到数组元素的最后，把新的元素直接放入到第k个位置</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/b6/e5/b69b8c5dbf6248649ddab7d3e7cfd7e5.jpg\" alt=\"img\"></p>\n<ul>\n<li>问题：删除a、b、c三个元素</li>\n<li>可能的困难：避免defgh几个数据会被搬移三次</li>\n<li>解决方案：<ul>\n<li>先记录下已经删除的数据，每次的删除操作并不是真正地搬移数据，只是记录数据已经被删除</li>\n<li>数组没有更多空间存储数据时，再触发执行一次真正的删除操作</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"数组的访问越界问题\"><a href=\"#数组的访问越界问题\" class=\"headerlink\" title=\"数组的访问越界问题\"></a>数组的访问越界问题</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> arr<span class=\"token punctuation\">[</span><span class=\"token number\">3</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">&#123;</span><span class=\"token number\">0</span><span class=\"token punctuation\">&#125;</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;=</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n        arr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"hello world\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>问题：数组大小为3，仅有a[0]、a[1]、a[2]，当i=3时，访问越界</li>\n</ul>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>在C语言中，只要不是访问受限的内存，所有的内存空间都是可以自由访问的</p>\n<p>数组越界在C语言中是一种未决行为，并没有规定数组访问越界时编译器应该如何处理</p>\n<p>只要数组通过偏移计算得到的内存地址是可用的，程序就可能不会报任何错误</p>\n<p>Note：</p>\n<p>某些计算机病毒利用代码中的数组越界可以访问非法地址的漏洞来供给系统</p></blockquote>\n<h2 id=\"容器能否完全替代数组？\"><a href=\"#容器能否完全替代数组？\" class=\"headerlink\" title=\"容器能否完全替代数组？\"></a>容器能否完全替代数组？</h2><ul>\n<li>ArrayList优势<ul>\n<li>将很多数组操作的细节封装起来</li>\n<li>支持动态扩容</li>\n</ul>\n</li>\n<li>array更合适的情况<ul>\n<li>Java ArrayList无法存储基本类型</li>\n<li>数据大小事先已知且对数据的操作非常简单</li>\n<li>多维数组时，数组往往更加直观<ul>\n<li>Object[][] array</li>\n<li>ArrayList\\<ArrayList\\<object>&gt; array</li>\n</ul>\n</li>\n</ul>\n</li>\n<li>总结<ul>\n<li>业务开发 —&gt; 容器<ul>\n<li>省时省力</li>\n<li>损耗一丢丢性能，但是不影响系统整体性能</li>\n</ul>\n</li>\n<li>底层开发 —&gt; 数组<ul>\n<li>例如开发网络框架</li>\n<li>性能优化做到极致</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"回答“为什么从0开始编号”\"><a href=\"#回答“为什么从0开始编号”\" class=\"headerlink\" title=\"回答“为什么从0开始编号”\"></a>回答“为什么从0开始编号”</h2><p>答：</p>\n<ol>\n<li>从数组存储的内存模型上来看，“下标”最确切的定义应该是“偏移(offset)”</li>\n<li>历史原因(C语言设计者用0开始计数数组下标)</li>\n</ol>\n<ul>\n<li><p>从0开始</p>\n<ul>\n<li><script type=\"math/tex; mode=display\">\na[i]\\_{address} = base\\_address + i * data\\_type\\_size</script></li>\n</ul>\n</li>\n<li><p>从1开始</p>\n<ul>\n<li><script type=\"math/tex; mode=display\">\na[i]\\_{address} = base\\_address + (i-1) * data\\_type\\_size</script></li>\n</ul>\n</li>\n</ul>\n<p>每次随机访问数组元素都多了一次减法运算</p>\n","text":"数组：为什么很多编程语言中数组都从0开始编号？如何实现随机访问？ 数组(array) 一种线性表数据结构。用一组连续的内存空间，来存储一组具有相同类型的数据 线性表与非线性表 线性表 数据排成像一条线一样的结构，每个线性表上的数据最多只有前和后两个方向 非线性表 数据之间并不是简...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%BE%88%E5%A4%9A%E7%BC%96%E7%A8%8B%E8%AF%AD%E8%A8%80%E4%B8%AD%E6%95%B0%E7%BB%84%E9%83%BD%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%BC%96%E5%8F%B7%EF%BC%9F\"><span class=\"toc-text\">数组：为什么很多编程语言中数组都从0开始编号？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE%EF%BC%9F\"><span class=\"toc-text\">如何实现随机访问？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%80%A7%E8%A1%A8%E4%B8%8E%E9%9D%9E%E7%BA%BF%E6%80%A7%E8%A1%A8\"><span class=\"toc-text\">线性表与非线性表</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%BF%9E%E7%BB%AD%E7%9A%84%E5%86%85%E5%AD%98%E7%A9%BA%E9%97%B4%E5%92%8C%E7%9B%B8%E5%90%8C%E7%B1%BB%E5%9E%8B%E7%9A%84%E6%95%B0%E6%8D%AE\"><span class=\"toc-text\">连续的内存空间和相同类型的数据</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%A0%B9%E6%8D%AE%E4%B8%8B%E8%A1%A8%E9%9A%8F%E6%9C%BA%E8%AE%BF%E9%97%AE%E6%95%B0%E7%BB%84%E5%85%83%E7%B4%A0%EF%BC%9F\"><span class=\"toc-text\">如何实现根据下表随机访问数组元素？</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BD%8E%E6%95%88%E7%9A%84%E2%80%9C%E6%8F%92%E5%85%A5%E2%80%9D%E5%92%8C%E2%80%9C%E5%88%A0%E9%99%A4%E2%80%9D\"><span class=\"toc-text\">低效的“插入”和“删除”</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E7%BB%84%E7%9A%84%E8%AE%BF%E9%97%AE%E8%B6%8A%E7%95%8C%E9%97%AE%E9%A2%98\"><span class=\"toc-text\">数组的访问越界问题</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%B9%E5%99%A8%E8%83%BD%E5%90%A6%E5%AE%8C%E5%85%A8%E6%9B%BF%E4%BB%A3%E6%95%B0%E7%BB%84%EF%BC%9F\"><span class=\"toc-text\">容器能否完全替代数组？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E7%AD%94%E2%80%9C%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BB%8E0%E5%BC%80%E5%A7%8B%E7%BC%96%E5%8F%B7%E2%80%9D\"><span class=\"toc-text\">回答“为什么从0开始编号”</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DSA8 Stack","uid":"a75362207a5dc66d40d312cda296e3d4","slug":"DSA/C8 栈","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:19:48.000Z","comments":true,"path":"api/articles/DSA/C8 栈.json","keywords":null,"cover":[],"text":"栈：如何实现浏览器的前进和后退功能如何理解“栈” 后进先出 “操作受限”的线性表 Why 栈？ 数组或链表暴露了太多操作接口，灵活自由但也比较不可控，容易出错 当某个数据集合只涉及在一端插入和删除数据，并且满足后进先出、先进后出的特性，这时我们就应该首选“栈”这种数据结构。 如何...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}