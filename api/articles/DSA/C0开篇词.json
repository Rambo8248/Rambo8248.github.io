{"title":"DSA0 开篇词","uid":"cdf1a7f1db00ebb74a977ba17a93dbe1","slug":"DSA/C0开篇词","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:17:45.832Z","comments":true,"path":"api/articles/DSA/C0开篇词.json","keywords":null,"cover":null,"content":"<h1 id=\"跨过“数据结构与算法”\"><a href=\"#跨过“数据结构与算法”\" class=\"headerlink\" title=\"跨过“数据结构与算法”\"></a>跨过“数据结构与算法”</h1><p>技术人所需修炼的“内功”</p>\n<ul>\n<li>操作系统</li>\n<li>计算机网络</li>\n<li>编译原理</li>\n<li>数据结构与算法</li>\n<li>……</li>\n</ul>\n<p>专栏内容设计</p>\n<ul>\n<li>众多数据结构和算法中，选取最实用的内容讲解</li>\n<li>数据结构和算法中背后的设计思想</li>\n<li>结合真实软件开发案例</li>\n</ul>\n<p>模块</p>\n<ul>\n<li>入门<ul>\n<li>时间、空间复杂度</li>\n<li>大O表示法由来</li>\n<li>复杂度分析技巧</li>\n<li>最好、最坏、平均、均摊复杂度分析方法</li>\n</ul>\n</li>\n<li>基础<ul>\n<li>最基础、最常用的数据结构和算法</li>\n</ul>\n</li>\n<li>高级<ul>\n<li>不那么常用的数据结构和算法</li>\n</ul>\n</li>\n<li>实战<ul>\n<li>开源项目、框架或者系统设计问题，剖析背后数据结构和算法</li>\n</ul>\n</li>\n</ul>\n","text":"跨过“数据结构与算法”技术人所需修炼的“内功” 操作系统 计算机网络 编译原理 数据结构与算法 …… 专栏内容设计 众多数据结构和算法中，选取最实用的内容讲解 数据结构和算法中背后的设计思想 结合真实软件开发案例 模块 入门 时间、空间复杂度 大O表示法由来 复杂度分析技巧 最好...","link":"","photos":[],"count_time":{"symbolsCount":238,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E8%B7%A8%E8%BF%87%E2%80%9C%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84%E4%B8%8E%E7%AE%97%E6%B3%95%E2%80%9D\"><span class=\"toc-text\">跨过“数据结构与算法”</span></a></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DSA1 Why DSA?","uid":"971ce7cf635f389a131d803d3ca3c395","slug":"DSA/C1  WHY DSA","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:18:01.066Z","comments":true,"path":"api/articles/DSA/C1  WHY DSA.json","keywords":null,"cover":null,"text":"为什么要学习数据结构和算法 大厂面试 业务开发工程师 不需要自己实现，不代表不需要了解 评估代码的性能和资源的消耗 基础框架中糅合了基础数据结构和算法的设计思想 基础架构研发工程师 不被淘汰 ","link":"","photos":[],"count_time":{"symbolsCount":99,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"DSA11 Sort1","uid":"dc2049cb2b924724d0d9c0e20e1cbe8f","slug":"DSA/C11 排序(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:20:32.914Z","comments":true,"path":"api/articles/DSA/C11 排序(上).json","keywords":null,"cover":[],"text":"排序（上）：为什么插入排序比冒泡排序更受欢迎？概述 如何分析一个排序算法？ 执行效率 最好、最坏、平均情况时间复杂度 时间复杂度的系数、常数、低阶 比较次数和交换次数 内存消耗 原地排序特指空间复杂度是$O(1)$的排序算法 稳定性 如果待排序的序列中存在值相等的元素，经过排序之...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}