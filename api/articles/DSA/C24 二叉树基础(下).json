{"title":"DSA24 Binary Tree2","uid":"17d7fb60ad31417e734a0509256cfdc1","slug":"DSA/C24 二叉树基础(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:24:08.000Z","comments":true,"path":"api/articles/DSA/C24 二叉树基础(下).json","keywords":null,"cover":[],"content":"<h1 id=\"二叉树基础（下）：有了如此高效的散列表，为什么还需要二叉树？\"><a href=\"#二叉树基础（下）：有了如此高效的散列表，为什么还需要二叉树？\" class=\"headerlink\" title=\"二叉树基础（下）：有了如此高效的散列表，为什么还需要二叉树？\"></a>二叉树基础（下）：有了如此高效的散列表，为什么还需要二叉树？</h1><p>二叉查找树的最大特点：支持动态数据集合的快速插入、删除、查找</p>\n<p>散列表也是支持这些操作的，并且散列表的这些操作比二叉查找树更高效，时间复杂度是 O(1)。既然有了这么高效的散列表，使用二叉树的地方是不是都可以替换成散列表呢？有没有哪些地方是散列表做不了，必须要用二叉树来做的呢？</p>\n<h2 id=\"二叉查找树\"><a href=\"#二叉查找树\" class=\"headerlink\" title=\"二叉查找树\"></a>二叉查找树</h2><p>二叉查找树要求，在树中的任意一个节点，其左子树中的每个节点的值，都要小于这个节点的值，而右子树节点的值都大于这个节点的值</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtub0xaya1j60to0cct9702.jpg\" alt=\"image-20210730115314199\"></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>操作</th>\n<th>图解</th>\n<th>代码</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>查找</td>\n<td><img src=\"https://static001.geekbang.org/resource/image/96/2a/96b3d86ed9b7c4f399e8357ceed0db2a.jpg\" alt=\"img\"></td>\n<td><img src=\"/Users/zhangweijian/Desktop/公众号/数据结构与算法/C24 二叉树基础(下\" alt=\"image-20210801093054515\">.assets/image-20210801093054515.png)</td>\n</tr>\n<tr>\n<td>插入</td>\n<td><img src=\"https://static001.geekbang.org/resource/image/da/c5/daa9fb557726ee6183c5b80222cfc5c5.jpg\" alt=\"img\"></td>\n<td><img src=\"/Users/zhangweijian/Desktop/公众号/数据结构与算法/C24 二叉树基础(下\" alt=\"image-20210801093117826\">.assets/image-20210801093117826.png)</td>\n</tr>\n<tr>\n<td>删除</td>\n<td><img src=\"https://static001.geekbang.org/resource/image/29/2c/299c615bc2e00dc32225f4d9e3490e2c.jpg\" alt=\"img\"></td>\n<td><img src=\"/Users/zhangweijian/Desktop/公众号/数据结构与算法/C24 二叉树基础(下\" alt=\"image-20210801093217055\">.assets/image-20210801093217055.png)</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtub0zzxz1j60g40hsdgz02.jpg\" alt=\"image-20210802112427012\"></p>\n<h3 id=\"查找操作\"><a href=\"#查找操作\" class=\"headerlink\" title=\"查找操作\"></a>查找操作</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtub126qv9j60gw0d40tc02.jpg\" alt=\"image-20210802112206953\"></p>\n<pre class=\"mermaid\">graph TD\n 取根节点-->等于查找的数据--> yes -->返回\n等于查找的数据--> no --> 查找数据比根节点值小 -->左子树递归查找\nno --> 查找数据比根节点值大-->右子树递归查找</pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">BinarySearchTree</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> tree<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token class-name\">Node</span> p <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">&lt;</span> p<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">else</span> <span class=\"token keyword\">return</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Node</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> left<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">private</span> <span class=\"token class-name\">Node</span> right<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">public</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"插入操作\"><a href=\"#插入操作\" class=\"headerlink\" title=\"插入操作\"></a>插入操作</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtub15i0c0j60mr09dq3q02.jpg\" alt=\"image-20210802112217030\"></p>\n<pre class=\"mermaid\">graph TD\n 自上而下取节点--> 插入数据比节点数据大 -->节点右子树为空 -->插入到右子节点位置\n 插入数据比节点数据大 -->节点右子树不为空 -->递归遍历右子树查找插入位置\n  自上而下取节点--> 插入数据比节点数据小 -->节点左子树为空 -->插入到左子节点位置\n  插入数据比节点数据小 -->节点左子树不为空 -->递归遍历左子树查找插入位置</pre>\n\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tree <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    tree <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token class-name\">Node</span> p <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>right <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        p<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// data &lt; p.data</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n        p<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Node</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">&#125;</span>\n      p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"删除操作\"><a href=\"#删除操作\" class=\"headerlink\" title=\"删除操作\"></a>删除操作</h3><pre class=\"mermaid\">graph LR\n删除的节点没有子节点  --> 直接将父节点中指向要删除节点的指针置为null\n\n\n删除的节点只有一个子节点--> 直接将父节点中指向要删除节点的指针指向要删除节点的子节点\n\n删除的节点有两个子节点 --> 找到节点右子树中的最小节点 -->替换到要删除的节点上 -->删除最小节点</pre>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtub17xwd2j60n005udge02.jpg\" alt=\"image-20210802112227494\"></p>\n<p>代码</p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">delete</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token class-name\">Node</span> p <span class=\"token operator\">=</span> tree<span class=\"token punctuation\">;</span> <span class=\"token comment\">// p指向要删除的节点，初始化指向根节点</span>\n  <span class=\"token class-name\">Node</span> pp <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// pp记录的是p的父节点</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span>data <span class=\"token operator\">!=</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    pp <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">></span> p<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span> p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> p <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 没有找到</span>\n\n  <span class=\"token comment\">// 要删除的节点有两个子节点</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 查找右子树中最小节点</span>\n    <span class=\"token class-name\">Node</span> minP <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\">Node</span> minPP <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span> <span class=\"token comment\">// minPP表示minP的父节点</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>minP<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      minPP <span class=\"token operator\">=</span> minP<span class=\"token punctuation\">;</span>\n      minP <span class=\"token operator\">=</span> minP<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n    p<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> minP<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 将minP的数据替换到p中</span>\n    p <span class=\"token operator\">=</span> minP<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 下面就变成了删除minP了</span>\n    pp <span class=\"token operator\">=</span> minPP<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 删除节点是叶子节点或者仅有一个子节点</span>\n  <span class=\"token class-name\">Node</span> child<span class=\"token punctuation\">;</span> <span class=\"token comment\">// p的子节点</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>left <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> child <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>left<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">.</span>right <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> child <span class=\"token operator\">=</span> p<span class=\"token punctuation\">.</span>right<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> child <span class=\"token operator\">=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pp <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span> tree <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 删除的是根节点</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">==</span> p<span class=\"token punctuation\">)</span> pp<span class=\"token punctuation\">.</span>left <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> pp<span class=\"token punctuation\">.</span>right <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>另一种简单的办法</p>\n<ul>\n<li>单纯将要删除的节点标记为“已删除”，但是并不真正从树中将这个节点去掉</li>\n<li>浪费内存，但操作简单</li>\n<li>没有增加插入、查找操作代码实现的难度</li>\n</ul>\n<h3 id=\"支持重复数据的二叉查找树\"><a href=\"#支持重复数据的二叉查找树\" class=\"headerlink\" title=\"支持重复数据的二叉查找树\"></a>支持重复数据的二叉查找树</h3><ul>\n<li><p>实际软件开发中，二叉查找树中存储的是一个包含很多字段的对象</p>\n</li>\n<li><p>利用对象的某个字段作为key来构建二叉查找树</p>\n</li>\n<li>对象中的其他字段叫做卫星数据</li>\n</ul>\n<p>那么存储的两个对象键值相同该如何处理</p>\n<ul>\n<li>方法1：通过链表和支持动态扩容的数组等数据结构把值相同的数据都存储在同一个节点上</li>\n<li>方法2</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/3f/5f/3f59a40e3d927f567022918d89590a5f.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/fb/ff/fb7b320efd59a05469d6d6fcf0c98eff.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/25/17/254a4800703d31612c0af63870260517.jpg\" alt=\"img\"></p>\n<h2 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h2><p>Why 二叉查找树？</p>\n<ul>\n<li>散列表无需存储，二叉树只需要中序遍历</li>\n<li>散列表扩容耗时很多，且遇到散列冲突性能不稳定</li>\n<li>尽管散列表查找等操作的时间复杂度为常量级，但因为哈希冲突存在常量不一定比logn小</li>\n<li>散列表构造比二叉查找树复杂</li>\n<li>为避免过多散列冲突，装载因子不能太大</li>\n</ul>\n","text":"二叉树基础（下）：有了如此高效的散列表，为什么还需要二叉树？二叉查找树的最大特点：支持动态数据集合的快速插入、删除、查找 散列表也是支持这些操作的，并且散列表的这些操作比二叉查找树更高效，时间复杂度是 O(1)。既然有了这么高效的散列表，使用二叉树的地方是不是都可以替换成散列表呢...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%A0%91%E5%9F%BA%E7%A1%80%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E6%9C%89%E4%BA%86%E5%A6%82%E6%AD%A4%E9%AB%98%E6%95%88%E7%9A%84%E6%95%A3%E5%88%97%E8%A1%A8%EF%BC%8C%E4%B8%BA%E4%BB%80%E4%B9%88%E8%BF%98%E9%9C%80%E8%A6%81%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%9F\"><span class=\"toc-text\">二叉树基础（下）：有了如此高效的散列表，为什么还需要二叉树？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91\"><span class=\"toc-text\">二叉查找树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9F%A5%E6%89%BE%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">查找操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">插入操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">删除操作</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%94%AF%E6%8C%81%E9%87%8D%E5%A4%8D%E6%95%B0%E6%8D%AE%E7%9A%84%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91\"><span class=\"toc-text\">支持重复数据的二叉查找树</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E7%AD%94%E5%BC%80%E7%AF%87\"><span class=\"toc-text\">解答开篇</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DSA23 Binary Tree1","uid":"56aa12aba5d53418e62bb5c5f6efe64b","slug":"DSA/C23 二叉树基础(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:23:57.000Z","comments":true,"path":"api/articles/DSA/C23 二叉树基础(上).json","keywords":null,"cover":[],"text":"二叉树基础（上）：什么样的二叉树适合用数组来存储？问题引入 二叉树有哪几种存储方式？什么样的二叉树适合用数组来存储？ 树 名词 定义 节点 树中的每个元素 父子关系 用来连接相邻节点之间的关系 父节点 上级节点 子节点 下级节点 兄弟节点 同级节点 叶子节点/叶节点 没有子节点的...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"DSA26 Red-Black Tree2","uid":"7693d3ff77636135d449fe9da08ce394","slug":"DSA/C26 红黑树(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:24:48.000Z","comments":true,"path":"api/articles/DSA/C26 红黑树(下).json","keywords":null,"cover":[],"text":"红黑树（下）：掌握这些技巧，你也可以实现一个红黑树 爱：稳定、高效的性能 恨：实现起来比较难 实现红黑树的基本思想大致过程遇到什么样的节点排布，我们就对应怎么去调整 回顾红黑树的要求 节点类型 颜色 根节点 黑色 叶子节点 黑色的空节点，不存储数据 相邻节点 不能同时为红色 每个...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}