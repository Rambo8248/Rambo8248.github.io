{"title":"DSA3 Complexity Analysis1","uid":"503921898d741f6fd2003fcfcab3b5d3","slug":"DSA/C3 复杂度分析(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:18:38.740Z","comments":true,"path":"api/articles/DSA/C3 复杂度分析(上).json","keywords":null,"cover":[],"content":"<h1 id=\"复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？\"><a href=\"#复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？\" class=\"headerlink\" title=\"复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？\"></a>复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？</h1><h2 id=\"为什么需要复杂度分析？\"><a href=\"#为什么需要复杂度分析？\" class=\"headerlink\" title=\"为什么需要复杂度分析？\"></a>为什么需要复杂度分析？</h2><h3 id=\"事后统计法的局限\"><a href=\"#事后统计法的局限\" class=\"headerlink\" title=\"事后统计法的局限\"></a>事后统计法的局限</h3><ul>\n<li>测试结果依赖于测试环境<ul>\n<li>i9 vs i3</li>\n</ul>\n</li>\n<li>测试结果受数据规模影响大<ul>\n<li>小规模数据排序，出入排序&gt;快速排序</li>\n</ul>\n</li>\n</ul>\n<h2 id=\"大O复杂度表示法\"><a href=\"#大O复杂度表示法\" class=\"headerlink\" title=\"大O复杂度表示法\"></a>大O复杂度表示法</h2><p><code>code1</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>$$<br>Time = (2n+2) * unit_time<br>$$</p>\n<p><code>code2</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">\n<span class=\"token keyword\">int</span> <span class=\"token function\">cal</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    j <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;=</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>j<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span>  i <span class=\"token operator\">*</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>$$<br>Time = (2n^2+2n+3) * unit_time<br>$$</p>\n<p>结论：</p>\n<ul>\n<li><p>所有代码的执行时间$T(n)$与每行代码的执行次数$f(n)$成正比</p>\n</li>\n<li><p>即：<br>$$<br>T(n) = O(f(n)) \\<br>T(n) -&gt; 代码执行的时间 \\<br>f(n) -&gt; 每行代码执行的次数综合<br>$$</p>\n</li>\n</ul>\n<p>大O时间复杂度实际上<strong>并不具体表示代码真正的执行时间</strong>，而是表示<strong>代码执行时间随数据规模增长的变化趋势</strong>，所以也叫做渐进时间复杂度，简称时间复杂度</p>\n<h2 id=\"时间复杂度分析\"><a href=\"#时间复杂度分析\" class=\"headerlink\" title=\"时间复杂度分析\"></a>时间复杂度分析</h2><ul>\n<li>只关注循环执行次数最多的一段代码</li>\n<li>加法法则：总复杂度等于量级最大的那段代码的复杂度</li>\n<li>乘法法则：嵌套代码的复杂度等于嵌套内外代码复杂度的乘积</li>\n</ul>\n<h2 id=\"几种常见时间复杂度实例分析\"><a href=\"#几种常见时间复杂度实例分析\" class=\"headerlink\" title=\"几种常见时间复杂度实例分析\"></a>几种常见时间复杂度实例分析</h2><p><img src=\"https://static001.geekbang.org/resource/image/37/0a/3723793cc5c810e9d5b06bc95325bf0a.jpg\" alt=\"img\"></p>\n<table>\n<thead>\n<tr>\n<th>时间复杂度</th>\n<th>举例</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>$O(1)$</td>\n<td><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtuat5c1wqj605502eq2r02.jpg\" alt=\"image-20210724150154225\"></td>\n</tr>\n<tr>\n<td>$O(logn) O(nlogn)$</td>\n<td><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtuat6fznoj605g032q2r02.jpg\" alt=\"image-20210724150202827\"></td>\n</tr>\n<tr>\n<td>$O(m+n) O(m*n)$</td>\n<td><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtuat7xnw5j607d0b4aa802.jpg\" alt=\"image-20210724150218610\"></td>\n</tr>\n</tbody></table>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtuat9pzzfj60md0isdgv02.jpg\" alt=\"image-20210724173355251\"></p>\n<h2 id=\"空间复杂度分析\"><a href=\"#空间复杂度分析\" class=\"headerlink\" title=\"空间复杂度分析\"></a>空间复杂度分析</h2><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">print</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> i <span class=\"token operator\">*</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> n<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    print out a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？为什么需要复杂度分析？事后统计法的局限 测试结果依赖于测试环境 i9 vs i3 测试结果受数据规模影响大 小规模数据排序，出入排序&gt;快速排序 大O复杂度表示法code1 int cal(int n) &#123; ...","link":"","photos":[],"count_time":{"symbolsCount":"1.1k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E5%A6%82%E4%BD%95%E5%88%86%E6%9E%90%E3%80%81%E7%BB%9F%E8%AE%A1%E7%AE%97%E6%B3%95%E7%9A%84%E6%89%A7%E8%A1%8C%E6%95%88%E7%8E%87%E5%92%8C%E8%B5%84%E6%BA%90%E6%B6%88%E8%80%97%EF%BC%9F\"><span class=\"toc-text\">复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E9%9C%80%E8%A6%81%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%9F\"><span class=\"toc-text\">为什么需要复杂度分析？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BA%8B%E5%90%8E%E7%BB%9F%E8%AE%A1%E6%B3%95%E7%9A%84%E5%B1%80%E9%99%90\"><span class=\"toc-text\">事后统计法的局限</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A4%A7O%E5%A4%8D%E6%9D%82%E5%BA%A6%E8%A1%A8%E7%A4%BA%E6%B3%95\"><span class=\"toc-text\">大O复杂度表示法</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">时间复杂度分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%87%A0%E7%A7%8D%E5%B8%B8%E8%A7%81%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%AE%9E%E4%BE%8B%E5%88%86%E6%9E%90\"><span class=\"toc-text\">几种常见时间复杂度实例分析</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A9%BA%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90\"><span class=\"toc-text\">空间复杂度分析</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DSA28 Heap","uid":"1ecdd1e00fb73a51c0511d1921f5b63c","slug":"DSA/C28 堆和堆排序","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:25:33.089Z","comments":true,"path":"api/articles/DSA/C28 堆和堆排序.json","keywords":null,"cover":[],"text":"堆和堆排序：为什么说堆排序没有快速排序快？特殊的树：堆(Heap) 堆排序 原地 时间复杂度为$O(nlogn)$ 实际软件开发中，快速排序的性能要比堆排序好 如何理解堆？ 完全二叉树 堆中每一个节点的值都必须大于等于(或小于等于)其子树中每个节点的值 大顶堆 小顶堆 如何实现一...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"DSA31 DFS&BFS","uid":"7e4c0f4e2f510c4e8317f9775d710031","slug":"DSA/C31 深度和广度优先搜索","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:26:07.522Z","comments":true,"path":"api/articles/DSA/C31 深度和广度优先搜索.json","keywords":null,"cover":[],"text":"深度和广度优先搜索：如何找出社交网络中的三度好友关系？什么是搜索算法？ DFS，Depth-First-Search，深度优先搜索 BFS，Breadth-First-Search，广度优先搜索 都是基于图结构的。在图中找出从一个顶点出发，到另一个顶点的路径 图的代码实现publ...","link":"","photos":[],"count_time":{"symbolsCount":"2.5k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}