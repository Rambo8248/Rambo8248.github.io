{"title":"DSA8 Stack","uid":"a75362207a5dc66d40d312cda296e3d4","slug":"DSA/C8 栈","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:19:48.000Z","comments":true,"path":"api/articles/DSA/C8 栈.json","keywords":null,"cover":[],"content":"<h1 id=\"栈：如何实现浏览器的前进和后退功能\"><a href=\"#栈：如何实现浏览器的前进和后退功能\" class=\"headerlink\" title=\"栈：如何实现浏览器的前进和后退功能\"></a>栈：如何实现浏览器的前进和后退功能</h1><h2 id=\"如何理解“栈”\"><a href=\"#如何理解“栈”\" class=\"headerlink\" title=\"如何理解“栈”\"></a>如何理解“栈”</h2><p><img src=\"https://static001.geekbang.org/resource/image/3e/0b/3e20cca032c25168d3cc605fa7a53a0b.jpg\" alt=\"img\"></p>\n<ul>\n<li>后进先出</li>\n<li>“操作受限”的线性表</li>\n</ul>\n<h2 id=\"Why-栈？\"><a href=\"#Why-栈？\" class=\"headerlink\" title=\"Why 栈？\"></a>Why 栈？</h2><ul>\n<li>数组或链表暴露了太多操作接口，灵活自由但也比较不可控，容易出错</li>\n</ul>\n<p>当某个数据集合只涉及在一端插入和删除数据，并且满足后进先出、先进后出的特性，这时我们就应该首选“栈”这种数据结构。</p>\n<h2 id=\"如何实现一个栈\"><a href=\"#如何实现一个栈\" class=\"headerlink\" title=\"如何实现一个栈\"></a>如何实现一个栈</h2><ul>\n<li>数组实现：顺序栈</li>\n<li>链表实现：链式栈</li>\n</ul>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// 基于数组实现的顺序栈</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">ArrayStack</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> items<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 数组</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>       <span class=\"token comment\">// 栈中元素个数</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>           <span class=\"token comment\">//栈的大小</span>\n\n  <span class=\"token comment\">// 初始化数组，申请一个大小为n的数组空间</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">ArrayStack</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>items <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">String</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>n <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 入栈操作</span>\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">boolean</span> <span class=\"token function\">push</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span> item<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 数组空间不够了，直接返回false，入栈失败。</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 将item放到下标为count的位置，并且count加一</span>\n    items<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> item<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  \n  <span class=\"token comment\">// 出栈操作</span>\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">String</span> <span class=\"token function\">pop</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token comment\">// 栈为空，则直接返回null</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 返回下标为count-1的数组元素，并且栈中元素个数count减一</span>\n    <span class=\"token class-name\">String</span> tmp <span class=\"token operator\">=</span> items<span class=\"token punctuation\">[</span>count<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">--</span>count<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> tmp<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"支持动态扩容的顺序栈\"><a href=\"#支持动态扩容的顺序栈\" class=\"headerlink\" title=\"支持动态扩容的顺序栈\"></a>支持动态扩容的顺序栈</h2><p>底层依赖一个支持动态扩容的数组</p>\n<p>当栈满了之后，申请一个更大的数组，将原来的数据搬移到新数组中</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/b1/da/b193adf5db4356d8ab35a1d32142b3da.jpg\" alt=\"img\"></p>\n<h2 id=\"栈的一些应用\"><a href=\"#栈的一些应用\" class=\"headerlink\" title=\"栈的一些应用\"></a>栈的一些应用</h2><h3 id=\"函数调用\"><a href=\"#函数调用\" class=\"headerlink\" title=\"函数调用\"></a>函数调用</h3><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">int</span> a <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> \n   <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">int</span> res <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   ret <span class=\"token operator\">=</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   res <span class=\"token operator\">=</span> a <span class=\"token operator\">+</span> ret<span class=\"token punctuation\">;</span>\n   <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d\"</span><span class=\"token punctuation\">,</span> res<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n   reuturn <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">add</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n   <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n   sum <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> y<span class=\"token punctuation\">;</span>\n   <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://static001.geekbang.org/resource/image/17/1c/17b6c6711e8d60b61d65fb0df5559a1c.jpg\" alt=\"img\"></p>\n<h3 id=\"表达式求值\"><a href=\"#表达式求值\" class=\"headerlink\" title=\"表达式求值\"></a>表达式求值</h3><p><img src=\"https://static001.geekbang.org/resource/image/bc/00/bc77c8d33375750f1700eb7778551600.jpg\" alt=\"img\"></p>\n<h3 id=\"括号匹配\"><a href=\"#括号匹配\" class=\"headerlink\" title=\"括号匹配\"></a>括号匹配</h3><pre class=\"mermaid\">graph TD\n用栈来保存未匹配的左括号\n--> 从左到右依次扫描字符串--> 扫描到左括号 -->压入栈中 -->栈中内容 --> 为空-->字符串为合法格式\n从左到右依次扫描字符串--> 扫描到右括号 -->取出一个左括号-->栈中内容 --> 不为空-->字符串为非法格式</pre>\n\n<p><img src=\"/Users/zhangweijian/Desktop/公众号/数据结构与算法/C8 栈.assets/image-20210724173847789.png\" alt=\"image-20210724173847789\"></p>\n<h2 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h2><p>顺序查看了 a，b，c 三个页面，我们就依次把 a，b，c 压入栈</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/4b/3d/4b579a76ea7ebfc5abae2ad6ae6a3c3d.jpg\" alt=\"img\"></p>\n<p>当你通过浏览器的后退按钮，从页面 c 后退到页面 a 之后，我们就依次把 c 和 b 从栈 X 中弹出，并且依次放入到栈 Y</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/b5/1b/b5e496e2e28fe08f0388958a0e12861b.jpg\" alt=\"img\"></p>\n<p>这个时候你又想看页面 b，于是你又点击前进按钮回到 b 页面，我们就把 b 再从栈 Y 中出栈，放入栈 X 中</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/ea/bc/ea804125bea25d25ba467a51fb98c4bc.jpg\" alt=\"img\"></p>\n<p>这个时候，你通过页面 b 又跳转到新的页面 d 了，页面 c 就无法再通过前进、后退按钮重复查看了，所以需要清空栈 Y</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/a3/2e/a3c926fe3050d9a741f394f20430692e.jpg\" alt=\"img\"></p>\n","text":"栈：如何实现浏览器的前进和后退功能如何理解“栈” 后进先出 “操作受限”的线性表 Why 栈？ 数组或链表暴露了太多操作接口，灵活自由但也比较不可控，容易出错 当某个数据集合只涉及在一端插入和删除数据，并且满足后进先出、先进后出的特性，这时我们就应该首选“栈”这种数据结构。 如何...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E6%A0%88%EF%BC%9A%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%B5%8F%E8%A7%88%E5%99%A8%E7%9A%84%E5%89%8D%E8%BF%9B%E5%92%8C%E5%90%8E%E9%80%80%E5%8A%9F%E8%83%BD\"><span class=\"toc-text\">栈：如何实现浏览器的前进和后退功能</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E2%80%9C%E6%A0%88%E2%80%9D\"><span class=\"toc-text\">如何理解“栈”</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Why-%E6%A0%88%EF%BC%9F\"><span class=\"toc-text\">Why 栈？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E6%A0%88\"><span class=\"toc-text\">如何实现一个栈</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%94%AF%E6%8C%81%E5%8A%A8%E6%80%81%E6%89%A9%E5%AE%B9%E7%9A%84%E9%A1%BA%E5%BA%8F%E6%A0%88\"><span class=\"toc-text\">支持动态扩容的顺序栈</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A0%88%E7%9A%84%E4%B8%80%E4%BA%9B%E5%BA%94%E7%94%A8\"><span class=\"toc-text\">栈的一些应用</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%87%BD%E6%95%B0%E8%B0%83%E7%94%A8\"><span class=\"toc-text\">函数调用</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E8%A1%A8%E8%BE%BE%E5%BC%8F%E6%B1%82%E5%80%BC\"><span class=\"toc-text\">表达式求值</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8B%AC%E5%8F%B7%E5%8C%B9%E9%85%8D\"><span class=\"toc-text\">括号匹配</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E7%AD%94%E5%BC%80%E7%AF%87\"><span class=\"toc-text\">解答开篇</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DSA7 Linked List2","uid":"4d2b8ed889fbd369f571fec1667609a5","slug":"DSA/C7 链表(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:19:36.000Z","comments":true,"path":"api/articles/DSA/C7 链表(下).json","keywords":null,"cover":[],"text":"链表（下）：如何轻松写出正确的链表代码？几个技巧 理解指针或引用的含义 将某个变量赋值给指针，实际上就是将这个变量的地址赋值给指针，或者反过来说，指针中存储了这个变量的内存地址，指向了这个变量，通过指针就能找到这个变量 警惕指针丢失和内存泄漏 情况 代码 p-&gt;next =...","link":"","photos":[],"count_time":{"symbolsCount":310,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{}}