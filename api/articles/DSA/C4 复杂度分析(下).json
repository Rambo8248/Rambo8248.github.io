{"title":"DSA4 Complexity Analysis2","uid":"fc19127153caeb9baa595a1d01d3f0d7","slug":"DSA/C4 复杂度分析(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:18:54.464Z","comments":true,"path":"api/articles/DSA/C4 复杂度分析(下).json","keywords":null,"cover":null,"content":"<h1 id=\"复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度\"><a href=\"#复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度\" class=\"headerlink\" title=\"复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度\"></a>复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度</h1><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// n表示数组array的长度</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> pos <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       pos <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> pos<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<ul>\n<li><p>最好情况时间复杂度：查找的变量x出现在第一个元素，$O(1)$</p>\n</li>\n<li><p>最坏情况时间复杂度：查找的变量x不存在，$O(n)$</p>\n</li>\n<li><p>平均时间复杂度：查找的变量x有n+1种情况</p>\n<ul>\n<li><p>在数组的0~(n-1)位置中</p>\n</li>\n<li><p>不在数组中</p>\n</li>\n<li><p>则：<br>$$<br>\\frac{1+2+3+…+n+n}{n+1} = \\frac{n(n+3)}{2(n+1)}<br>$$</p>\n</li>\n<li><p>$$<br>1\\times \\frac{1}{2n}+2\\times \\frac{1}{2n}+\\cdots+n\\times \\frac{1}{2n}+n\\times \\frac{1}{2} = \\frac{3n+1}{4}<br>$$</p>\n</li>\n</ul>\n</li>\n</ul>\n<p>均摊时间复杂度</p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// array表示一个长度为n的数组</span>\n <span class=\"token comment\">// 代码中的array.length就等于n</span>\n <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> array <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n <span class=\"token keyword\">int</span> count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n \n <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n       <span class=\"token keyword\">int</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n       <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> array<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n          sum <span class=\"token operator\">=</span> sum <span class=\"token operator\">+</span> array<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n       <span class=\"token punctuation\">&#125;</span>\n       array<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> sum<span class=\"token punctuation\">;</span>\n       count <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n\n    array<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n","text":"复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度// n表示数组array的长度 int find(int[] array, int n, int x) &#123; int i = 0; int pos = -1; for (; i &lt; n; ++i) &#123;...","link":"","photos":[],"count_time":{"symbolsCount":913,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%8D%E6%9D%82%E5%BA%A6%E5%88%86%E6%9E%90%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E6%B5%85%E6%9E%90%E6%9C%80%E5%A5%BD%E3%80%81%E6%9C%80%E5%9D%8F%E3%80%81%E5%B9%B3%E5%9D%87%E3%80%81%E5%9D%87%E6%91%8A%E6%97%B6%E9%97%B4%E5%A4%8D%E6%9D%82%E5%BA%A6\"><span class=\"toc-text\">复杂度分析（下）：浅析最好、最坏、平均、均摊时间复杂度</span></a></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DSA33 String Match2","uid":"0ec81c6d3aa8372bc4bd0a74846f2430","slug":"DSA/C33 字符串匹配基础(中)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:26:35.770Z","comments":true,"path":"api/articles/DSA/C33 字符串匹配基础(中).json","keywords":null,"cover":[],"text":"字符串匹配基础（中）：如何实现文本编辑器中的查找功能？文本编辑器中的查找替换功能 BM算法，Boyer-Moore KMP算法 BM算法核心思想 当模式串和主串某个字符不匹配的时候，能够跳过一些可定不会匹配的情况，将模式串往后多滑动几位 算法原理分析坏字符规则 graph TD ...","link":"","photos":[],"count_time":{"symbolsCount":"4k","symbolsTime":"4 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"DSA6 Linked List1","uid":"85ae2c10dc6f2d0c388a295260d12e29","slug":"DSA/C6  链表(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:19:23.070Z","comments":true,"path":"api/articles/DSA/C6  链表(上).json","keywords":null,"cover":[],"text":"链表（上）：如何实现LRU缓存淘汰算法？缓存淘汰概述缓存 提高数据读取性能的技术 大小有限，缓存被用满时，数据清理和保留 –&gt; 缓存淘汰策略 FIFO，先进先出策略 LFU，最少使用策略 LRU，最近最少使用策略 链表结构与数组的对比 数组 连续的内存空间存储，对内存的要求...","link":"","photos":[],"count_time":{"symbolsCount":854,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}