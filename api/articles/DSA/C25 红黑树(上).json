{"title":"DSA25 Red-Black Tree1","uid":"d603cea4e398050da6c08bad435d355e","slug":"DSA/C25 红黑树(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:24:34.000Z","comments":true,"path":"api/articles/DSA/C25 红黑树(上).json","keywords":null,"cover":[],"content":"<h1 id=\"红黑树（上）：为什么工程中都用红黑树这种二叉树？\"><a href=\"#红黑树（上）：为什么工程中都用红黑树这种二叉树？\" class=\"headerlink\" title=\"红黑树（上）：为什么工程中都用红黑树这种二叉树？\"></a>红黑树（上）：为什么工程中都用红黑树这种二叉树？</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><ul>\n<li><p>二叉查找树各个操作时间复杂度跟树的高度成正比，理想情况下，时间复杂度是$O(logn)$</p>\n</li>\n<li><p>不过二叉查找树在频繁的动态更新过程中，可能会出现树的高度远大于$log_2n$的情况，从而导致各个操作的效率下降</p>\n</li>\n<li>为什么工程中都喜欢用红黑树，而不是其他平衡二叉查找树呢？</li>\n</ul>\n<h2 id=\"什么是“平衡二叉查找树”\"><a href=\"#什么是“平衡二叉查找树”\" class=\"headerlink\" title=\"什么是“平衡二叉查找树”\"></a>什么是“平衡二叉查找树”</h2><p>平衡二叉树：二叉树中任意一个节点的左右子树的高度相差不能大于1</p>\n<p>红黑树：从根节点到各个叶子节点的最长路径有可能会比最短路径大一倍</p>\n<p>发明平衡二叉查找树的初衷：</p>\n<ul>\n<li>解决普通二叉查找树在频繁的插入、删除等动态更新的情况下，出现的时间复杂度退化的问题</li>\n</ul>\n<p>故平衡</p>\n<ul>\n<li>让整棵树左右看起来对称、平衡，不要出现左子树很高、右子树很矮的情况</li>\n<li>让整棵树的高度相对来说低一些，相应操作效率高一些</li>\n</ul>\n<h2 id=\"如何定义一棵红黑树？\"><a href=\"#如何定义一棵红黑树？\" class=\"headerlink\" title=\"如何定义一棵红黑树？\"></a>如何定义一棵红黑树？</h2><ul>\n<li>Red-Black Tree，R-B tree</li>\n<li>红黑树中的节点，一类标记为黑色，一类标记为红色</li>\n</ul>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>节点类型</th>\n<th>颜色</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>根节点</td>\n<td>黑色</td>\n</tr>\n<tr>\n<td>叶子节点</td>\n<td>黑色的空节点，不存储数据</td>\n</tr>\n<tr>\n<td>相邻节点</td>\n<td>不能同时为红色</td>\n</tr>\n<tr>\n<td>每个节点到其可达叶子节点的所有路径</td>\n<td>包含相同数目的黑色节点</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p><img src=\"https://static001.geekbang.org/resource/image/90/9a/903ee0dcb62bce2f5b47819541f9069a.jpg\" alt=\"img\"></p>\n<h2 id=\"为什么说红黑树是近似平衡的？\"><a href=\"#为什么说红黑树是近似平衡的？\" class=\"headerlink\" title=\"为什么说红黑树是近似平衡的？\"></a>为什么说红黑树是近似平衡的？</h2><ul>\n<li>平衡→性能不退化</li>\n<li>近似平衡→性能不会退化得太严重</li>\n<li>一棵极其平衡的二叉树的高度大约是$log_2n$，要证明红黑树是近似平衡的，只需要分析红黑树的高度是否比较稳定地趋近$log_2n$就好</li>\n</ul>\n<p>推导过程</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtub1lo850j60am04lt8t02.jpg\" alt=\"image-20210802112642332\"></p>\n<pre class=\"mermaid\">graph TD\n将红色节点从红黑树中去掉 --> 单纯包含黑色节点的红黑树的高度是多少</pre>\n\n<p><img src=\"https://static001.geekbang.org/resource/image/7e/ed/7e6ecc308fe44120f30de809822215ed.jpg\" alt=\"img\"></p>\n<script type=\"math/tex; mode=display\">\n仅包含黑色节点的四叉树的高度 <包含相同节点个数的完全二叉树的高度(近似为log_2n)</script><pre class=\"mermaid\">graph TD\n把红色节点加回去 -->高度变为多少</pre>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtub1pbjszj607m04rq2v02.jpg\" alt=\"image-20210802112647429\"></p>\n<p>由于红色节点不能相邻，有一个红色节点就至少有一个黑色节点，所以</p>\n<p>最长路径不会超过$2log_2n$</p>\n<p>结论：</p>\n<ul>\n<li>红黑树的高度近似$2log_2n$</li>\n</ul>\n<h2 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h2><p>AVL树是一种高度平衡的二叉树</p>\n<p><a href=\"https://baike.baidu.com/item/AVL%E6%A0%91/10986648\">https://baike.baidu.com/item/AVL%E6%A0%91/10986648</a></p>\n<ul>\n<li>优点：查找效率非常高</li>\n<li>缺点：为了维持高度的平衡，需要付出更多代价<ul>\n<li>每次插入、删除都要做调整，比较复杂、耗时</li>\n</ul>\n</li>\n</ul>\n<p>红黑树只是做到了近似平衡，并不是严格的平衡，所以在维护平衡的成本上，要比AVL树要低</p>\n","text":"红黑树（上）：为什么工程中都用红黑树这种二叉树？引入 二叉查找树各个操作时间复杂度跟树的高度成正比，理想情况下，时间复杂度是$O(logn)$ 不过二叉查找树在频繁的动态更新过程中，可能会出现树的高度远大于$log_2n$的情况，从而导致各个操作的效率下降 为什么工程中都喜欢用红...","link":"","photos":[],"count_time":{"symbolsCount":971,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%88%E4%B8%8A%EF%BC%89%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E5%B7%A5%E7%A8%8B%E4%B8%AD%E9%83%BD%E7%94%A8%E7%BA%A2%E9%BB%91%E6%A0%91%E8%BF%99%E7%A7%8D%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%9F\"><span class=\"toc-text\">红黑树（上）：为什么工程中都用红黑树这种二叉树？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">引入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%BB%80%E4%B9%88%E6%98%AF%E2%80%9C%E5%B9%B3%E8%A1%A1%E4%BA%8C%E5%8F%89%E6%9F%A5%E6%89%BE%E6%A0%91%E2%80%9D\"><span class=\"toc-text\">什么是“平衡二叉查找树”</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9A%E4%B9%89%E4%B8%80%E6%A3%B5%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%9F\"><span class=\"toc-text\">如何定义一棵红黑树？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E7%BA%A2%E9%BB%91%E6%A0%91%E6%98%AF%E8%BF%91%E4%BC%BC%E5%B9%B3%E8%A1%A1%E7%9A%84%EF%BC%9F\"><span class=\"toc-text\">为什么说红黑树是近似平衡的？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E7%AD%94%E5%BC%80%E7%AF%87\"><span class=\"toc-text\">解答开篇</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DSA28 Heap","uid":"1ecdd1e00fb73a51c0511d1921f5b63c","slug":"DSA/C28 堆和堆排序","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:25:33.000Z","comments":true,"path":"api/articles/DSA/C28 堆和堆排序.json","keywords":null,"cover":[],"text":"堆和堆排序：为什么说堆排序没有快速排序快？特殊的树：堆(Heap) 堆排序 原地 时间复杂度为$O(nlogn)$ 实际软件开发中，快速排序的性能要比堆排序好 如何理解堆？ 完全二叉树 堆中每一个节点的值都必须大于等于(或小于等于)其子树中每个节点的值 大顶堆 小顶堆 如何实现一...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"DSA29 Heap Application","uid":"3d8241738a6ca807ab996c00fc84c560","slug":"DSA/C29 堆的应用","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:25:47.000Z","comments":true,"path":"api/articles/DSA/C29 堆的应用.json","keywords":null,"cover":[],"text":"堆的应用：如何快速获取到Top 10最热门的搜索关键词？堆的几个经典应用 优先级队列 求Top K 求中位数 堆的应用一：优先级队列 优先级队列 队列 出队顺序按照优先级来 优先级队列与堆很像 插入元素→堆中插入元素 取出优先级最高的元素→取出堆顶元素 合并有序小文件 问题描述 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.8k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}