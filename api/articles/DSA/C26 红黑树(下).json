{"title":"DSA26 Red-Black Tree2","uid":"7693d3ff77636135d449fe9da08ce394","slug":"DSA/C26 红黑树(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:24:48.000Z","comments":true,"path":"api/articles/DSA/C26 红黑树(下).json","keywords":null,"cover":[],"content":"<h1 id=\"红黑树（下）：掌握这些技巧，你也可以实现一个红黑树\"><a href=\"#红黑树（下）：掌握这些技巧，你也可以实现一个红黑树\" class=\"headerlink\" title=\"红黑树（下）：掌握这些技巧，你也可以实现一个红黑树\"></a>红黑树（下）：掌握这些技巧，你也可以实现一个红黑树</h1><ul>\n<li>爱：稳定、高效的性能</li>\n<li>恨：实现起来比较难</li>\n</ul>\n<h2 id=\"实现红黑树的基本思想\"><a href=\"#实现红黑树的基本思想\" class=\"headerlink\" title=\"实现红黑树的基本思想\"></a>实现红黑树的基本思想</h2><h3 id=\"大致过程\"><a href=\"#大致过程\" class=\"headerlink\" title=\"大致过程\"></a>大致过程</h3><p>遇到什么样的节点排布，我们就对应怎么去调整</p>\n<h3 id=\"回顾红黑树的要求\"><a href=\"#回顾红黑树的要求\" class=\"headerlink\" title=\"回顾红黑树的要求\"></a>回顾红黑树的要求</h3><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>节点类型</th>\n<th>颜色</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>根节点</td>\n<td>黑色</td>\n</tr>\n<tr>\n<td>叶子节点</td>\n<td>黑色的空节点，不存储数据</td>\n</tr>\n<tr>\n<td>相邻节点</td>\n<td>不能同时为红色</td>\n</tr>\n<tr>\n<td>每个节点到其可达叶子节点的所有路径</td>\n<td>包含相同数目的黑色节点</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"左右旋\"><a href=\"#左右旋\" class=\"headerlink\" title=\"左右旋\"></a>左右旋</h3><ul>\n<li>左旋：围绕某个节点的左旋</li>\n<li>右旋：围绕某个节点的右旋</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/0e/1e/0e37e597737012593a93105ebbf4591e.jpg\" alt=\"img\"></p>\n<h2 id=\"插入操作的平衡调整\"><a href=\"#插入操作的平衡调整\" class=\"headerlink\" title=\"插入操作的平衡调整\"></a>插入操作的平衡调整</h2><p>红黑树规定：</p>\n<ul>\n<li>插入节点必须是红色的</li>\n<li>二叉查找树中新插入的节点都放在叶子节点</li>\n</ul>\n<p>cases及对应操作</p>\n<ul>\n<li>左右旋转</li>\n<li>改变颜色</li>\n<li>关注节点：正在处理的节点</li>\n<li>叔叔节点：父节点的兄弟节点</li>\n<li>祖父节点：父节点的父节点</li>\n</ul>\n<p>特殊情况</p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>case</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>插入节点的父节点为黑色</td>\n<td>/</td>\n</tr>\n<tr>\n<td>插入节点是根节点</td>\n<td>直接改变它的颜色为黑色</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>其他情况</p>\n<h3 id=\"case1：关注节点为a，叔叔节点d为红色\"><a href=\"#case1：关注节点为a，叔叔节点d为红色\" class=\"headerlink\" title=\"case1：关注节点为a，叔叔节点d为红色\"></a>case1：关注节点为a，叔叔节点d为红色</h3><ul>\n<li>b、d设为黑色</li>\n<li>c设为红色</li>\n<li>关注节点变为c</li>\n<li>跳到case2或case3</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/60/40/603cf91f54b5db21bd02c6c5678ecf40.jpg\" alt=\"img\"></p>\n<h3 id=\"case2：关注节点为a，叔叔节点d为黑色，关注节点a是其父节点b的右子节点\"><a href=\"#case2：关注节点为a，叔叔节点d为黑色，关注节点a是其父节点b的右子节点\" class=\"headerlink\" title=\"case2：关注节点为a，叔叔节点d为黑色，关注节点a是其父节点b的右子节点\"></a>case2：关注节点为a，叔叔节点d为黑色，关注节点a是其父节点b的右子节点</h3><ul>\n<li>关注节点变为b</li>\n<li>围绕新的关注节点b左旋</li>\n<li>跳到case3</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/44/ad/4480a314f9d83c343b8adbb28b6782ad.jpg\" alt=\"img\"></p>\n<h3 id=\"case3：关注节点是a，叔叔节点d是黑色，关注节点a是其父节点b的左子节点\"><a href=\"#case3：关注节点是a，叔叔节点d是黑色，关注节点a是其父节点b的左子节点\" class=\"headerlink\" title=\"case3：关注节点是a，叔叔节点d是黑色，关注节点a是其父节点b的左子节点\"></a>case3：关注节点是a，叔叔节点d是黑色，关注节点a是其父节点b的左子节点</h3><ul>\n<li>围绕关注节点a的祖父节点c右旋</li>\n<li>将关注节点a的父节点b、兄弟节点c颜色互换</li>\n<li>调整结束</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/04/12/04650d9470b1e67899f5b8b7b8e33212.jpg\" alt=\"img\"></p>\n<h2 id=\"删除操作的平衡调整\"><a href=\"#删除操作的平衡调整\" class=\"headerlink\" title=\"删除操作的平衡调整\"></a>删除操作的平衡调整</h2><h3 id=\"针对删除节点初步调整\"><a href=\"#针对删除节点初步调整\" class=\"headerlink\" title=\"针对删除节点初步调整\"></a>针对删除节点初步调整</h3><p>保证整棵红黑树在一个节点删除之后，仍然满足：每个节点从该节点到达其可达叶子节点的所有路径都包含相同数目的黑色节点</p>\n<p>case1：如果要删除的节点是a，只有一个子节点b</p>\n<ul>\n<li>删除节点 a，并且把节点 b 替换到节点 a 的位置，这一部分操作跟普通的二叉查找树的删除操作一样</li>\n<li>节点 a 只能是黑色，节点 b 也只能是红色，其他情况均不符合红黑树的定义。这种情况下，我们把节点 b 改为黑色</li>\n<li>调整结束，不需要进行二次调整</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/a6/c3/a6c4c347b7cbdf57662bab399ed36cc3.jpg\" alt=\"img\"></p>\n<p>case2：如果要删除的节点a有两个非空子节点，并且它的后继节点就是节点a的右子节点c</p>\n<ul>\n<li>如果节点 a 的后继节点就是右子节点  c，那右子节点 c 肯定没有左子树。我们把节点 a 删除，并且将节点 c 替换到节点 a  的位置。这一部分操作跟普通的二叉查找树的删除操作无异</li>\n<li>然后把节点 c 的颜色设置为跟节点 a 相同的颜色</li>\n<li>如果节点 c  是黑色，为了不违反红黑树的最后一条定义，我们给节点 c 的右子节点 d 多加一个黑色，这个时候节点 d 就成了“红 - 黑”或者“黑 -  黑”</li>\n<li>这个时候，关注节点变成了节点 d，第二步的调整操作就会针对关注节点来做</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/48/4e/48e3bd2cdd66cb635f8a4df8fb8fd64e.jpg\" alt=\"img\"></p>\n<p>case3：如果要删除的是节点 a，它有两个非空子节点，并且节点 a 的后继节点不是右子节点</p>\n<ul>\n<li>找到后继节点 d，并将它删除，删除后继节点 d  的过程参照 CASE  1</li>\n<li>将节点 a 替换成后继节点 d</li>\n<li>把节点 d 的颜色设置为跟节点 a 相同的颜色</li>\n<li>如果节点 d  是黑色，为了不违反红黑树的最后一条定义，我们给节点 d 的右子节点 c 多加一个黑色，这个时候节点 c 就成了“红 - 黑”或者“黑 -  黑”</li>\n<li>这个时候，关注节点变成了节点 c，第二步的调整操作就会针对关注节点来做</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/b9/29/b93c1fa4de16aee5482424ddf49f3c29.jpg\" alt=\"img\"></p>\n<h3 id=\"针对关注节点进行二次调整\"><a href=\"#针对关注节点进行二次调整\" class=\"headerlink\" title=\"针对关注节点进行二次调整\"></a>针对关注节点进行二次调整</h3><p>保证不能存在相邻的两个红色节点</p>\n<p>CASE 1：如果关注节点是 a，它的兄弟节点 c 是红色的</p>\n<ul>\n<li>围绕关注节点 a 的父节点 b 左旋</li>\n<li>关注节点 a 的父节点 b 和祖父节点 c 交换颜色</li>\n<li>关注节点不变</li>\n<li>继续从四种情况中选择适合的规则来调整</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/ac/91/ac76d78c064a2486e2a5b4c4903acb91.jpg\" alt=\"img\"></p>\n<p>CASE 2：如果关注节点是 a，它的兄弟节点 c 是黑色的，并且节点 c 的左右子节点 d、e 都是黑色的</p>\n<ul>\n<li>将关注节点 a 的兄弟节点 c  的颜色变成红色</li>\n<li>从关注节点 a 中去掉一个黑色，这个时候节点 a 就是单纯的红色或者黑色</li>\n<li>给关注节点 a 的父节点 b  添加一个黑色，这个时候节点 b 就变成了“红 - 黑”或者“黑 - 黑”</li>\n<li>关注节点从 a 变成其父节点 b</li>\n<li>继续从四种情况中选择符合的规则来调整</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/ec/ec/eca118d673c607eb2b103f3476fb24ec.jpg\" alt=\"img\"></p>\n<p>CASE 3：如果关注节点是 a，它的兄弟节点 c 是黑色，c 的左子节点 d 是红色，c 的右子节点 e 是黑色</p>\n<ul>\n<li>围绕关注节点 a 的兄弟节点 c 右旋</li>\n<li>节点 c 和节点 d 交换颜色</li>\n<li>关注节点不变</li>\n<li>跳转到 CASE  4，继续调整</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/44/af/44075213100edd70315e1492422c92af.jpg\" alt=\"img\"></p>\n<p>CASE 4：如果关注节点 a 的兄弟节点 c 是黑色的，并且 c 的右子节点是红色的</p>\n<ul>\n<li>围绕关注节点 a 的父节点 b 左旋</li>\n<li>将关注节点 a 的兄弟节点 c 的颜色，跟关注节点 a 的父节点 b 设置成相同的颜色</li>\n<li>将关注节点 a 的父节点 b 的颜色设置为黑色</li>\n<li>从关注节点 a  中去掉一个黑色，节点 a 就变成了单纯的红色或者黑色</li>\n<li>将关注节点 a 的叔叔节点 e 设置为黑色</li>\n<li>调整结束</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/5f/44/5f73f61bf77a7f2bb75f168cf432ec44.jpg\" alt=\"img\"></p>\n","text":"红黑树（下）：掌握这些技巧，你也可以实现一个红黑树 爱：稳定、高效的性能 恨：实现起来比较难 实现红黑树的基本思想大致过程遇到什么样的节点排布，我们就对应怎么去调整 回顾红黑树的要求 节点类型 颜色 根节点 黑色 叶子节点 黑色的空节点，不存储数据 相邻节点 不能同时为红色 每个...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BA%A2%E9%BB%91%E6%A0%91%EF%BC%88%E4%B8%8B%EF%BC%89%EF%BC%9A%E6%8E%8C%E6%8F%A1%E8%BF%99%E4%BA%9B%E6%8A%80%E5%B7%A7%EF%BC%8C%E4%BD%A0%E4%B9%9F%E5%8F%AF%E4%BB%A5%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E7%BA%A2%E9%BB%91%E6%A0%91\"><span class=\"toc-text\">红黑树（下）：掌握这些技巧，你也可以实现一个红黑树</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E5%9F%BA%E6%9C%AC%E6%80%9D%E6%83%B3\"><span class=\"toc-text\">实现红黑树的基本思想</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A4%A7%E8%87%B4%E8%BF%87%E7%A8%8B\"><span class=\"toc-text\">大致过程</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%9B%9E%E9%A1%BE%E7%BA%A2%E9%BB%91%E6%A0%91%E7%9A%84%E8%A6%81%E6%B1%82\"><span class=\"toc-text\">回顾红黑树的要求</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%B7%A6%E5%8F%B3%E6%97%8B\"><span class=\"toc-text\">左右旋</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%8F%92%E5%85%A5%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B9%B3%E8%A1%A1%E8%B0%83%E6%95%B4\"><span class=\"toc-text\">插入操作的平衡调整</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#case1%EF%BC%9A%E5%85%B3%E6%B3%A8%E8%8A%82%E7%82%B9%E4%B8%BAa%EF%BC%8C%E5%8F%94%E5%8F%94%E8%8A%82%E7%82%B9d%E4%B8%BA%E7%BA%A2%E8%89%B2\"><span class=\"toc-text\">case1：关注节点为a，叔叔节点d为红色</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#case2%EF%BC%9A%E5%85%B3%E6%B3%A8%E8%8A%82%E7%82%B9%E4%B8%BAa%EF%BC%8C%E5%8F%94%E5%8F%94%E8%8A%82%E7%82%B9d%E4%B8%BA%E9%BB%91%E8%89%B2%EF%BC%8C%E5%85%B3%E6%B3%A8%E8%8A%82%E7%82%B9a%E6%98%AF%E5%85%B6%E7%88%B6%E8%8A%82%E7%82%B9b%E7%9A%84%E5%8F%B3%E5%AD%90%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">case2：关注节点为a，叔叔节点d为黑色，关注节点a是其父节点b的右子节点</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#case3%EF%BC%9A%E5%85%B3%E6%B3%A8%E8%8A%82%E7%82%B9%E6%98%AFa%EF%BC%8C%E5%8F%94%E5%8F%94%E8%8A%82%E7%82%B9d%E6%98%AF%E9%BB%91%E8%89%B2%EF%BC%8C%E5%85%B3%E6%B3%A8%E8%8A%82%E7%82%B9a%E6%98%AF%E5%85%B6%E7%88%B6%E8%8A%82%E7%82%B9b%E7%9A%84%E5%B7%A6%E5%AD%90%E8%8A%82%E7%82%B9\"><span class=\"toc-text\">case3：关注节点是a，叔叔节点d是黑色，关注节点a是其父节点b的左子节点</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E6%93%8D%E4%BD%9C%E7%9A%84%E5%B9%B3%E8%A1%A1%E8%B0%83%E6%95%B4\"><span class=\"toc-text\">删除操作的平衡调整</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%92%88%E5%AF%B9%E5%88%A0%E9%99%A4%E8%8A%82%E7%82%B9%E5%88%9D%E6%AD%A5%E8%B0%83%E6%95%B4\"><span class=\"toc-text\">针对删除节点初步调整</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E9%92%88%E5%AF%B9%E5%85%B3%E6%B3%A8%E8%8A%82%E7%82%B9%E8%BF%9B%E8%A1%8C%E4%BA%8C%E6%AC%A1%E8%B0%83%E6%95%B4\"><span class=\"toc-text\">针对关注节点进行二次调整</span></a></li></ol></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DSA24 Binary Tree2","uid":"17d7fb60ad31417e734a0509256cfdc1","slug":"DSA/C24 二叉树基础(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:24:08.000Z","comments":true,"path":"api/articles/DSA/C24 二叉树基础(下).json","keywords":null,"cover":[],"text":"二叉树基础（下）：有了如此高效的散列表，为什么还需要二叉树？二叉查找树的最大特点：支持动态数据集合的快速插入、删除、查找 散列表也是支持这些操作的，并且散列表的这些操作比二叉查找树更高效，时间复杂度是 O(1)。既然有了这么高效的散列表，使用二叉树的地方是不是都可以替换成散列表呢...","link":"","photos":[],"count_time":{"symbolsCount":"3.1k","symbolsTime":"3 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"DSA25 Red-Black Tree1","uid":"d603cea4e398050da6c08bad435d355e","slug":"DSA/C25 红黑树(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:24:34.000Z","comments":true,"path":"api/articles/DSA/C25 红黑树(上).json","keywords":null,"cover":[],"text":"红黑树（上）：为什么工程中都用红黑树这种二叉树？引入 二叉查找树各个操作时间复杂度跟树的高度成正比，理想情况下，时间复杂度是$O(logn)$ 不过二叉查找树在频繁的动态更新过程中，可能会出现树的高度远大于$log_2n$的情况，从而导致各个操作的效率下降 为什么工程中都喜欢用红...","link":"","photos":[],"count_time":{"symbolsCount":971,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}