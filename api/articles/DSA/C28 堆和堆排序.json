{"title":"DSA28 Heap","uid":"1ecdd1e00fb73a51c0511d1921f5b63c","slug":"DSA/C28 堆和堆排序","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:25:33.000Z","comments":true,"path":"api/articles/DSA/C28 堆和堆排序.json","keywords":null,"cover":[],"content":"<h1 id=\"堆和堆排序：为什么说堆排序没有快速排序快？\"><a href=\"#堆和堆排序：为什么说堆排序没有快速排序快？\" class=\"headerlink\" title=\"堆和堆排序：为什么说堆排序没有快速排序快？\"></a>堆和堆排序：为什么说堆排序没有快速排序快？</h1><p>特殊的树：堆(Heap)</p>\n<p>堆排序</p>\n<ul>\n<li>原地</li>\n<li>时间复杂度为$O(nlogn)$</li>\n<li>实际软件开发中，快速排序的性能要比堆排序好</li>\n</ul>\n<h2 id=\"如何理解堆？\"><a href=\"#如何理解堆？\" class=\"headerlink\" title=\"如何理解堆？\"></a>如何理解堆？</h2><ul>\n<li>完全二叉树</li>\n<li>堆中每一个节点的值都必须大于等于(或小于等于)其子树中每个节点的值<ul>\n<li>大顶堆</li>\n<li>小顶堆</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/4c/99/4c452a1ad3b2d152daa2727d06097099.jpg\" alt=\"img\"></p>\n<h2 id=\"如何实现一个堆？\"><a href=\"#如何实现一个堆？\" class=\"headerlink\" title=\"如何实现一个堆？\"></a>如何实现一个堆？</h2><ul>\n<li>堆支持哪些操作</li>\n<li>如何存储一个堆</li>\n</ul>\n<h3 id=\"用数组存储堆\"><a href=\"#用数组存储堆\" class=\"headerlink\" title=\"用数组存储堆\"></a>用数组存储堆</h3><p><img src=\"https://static001.geekbang.org/resource/image/4d/1e/4d349f57947df6590a2dd1364c3b0b1e.jpg\" alt=\"img\"></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>下标</th>\n<th>节点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>i</td>\n<td>关注节点</td>\n</tr>\n<tr>\n<td>i*2</td>\n<td>左子节点</td>\n</tr>\n<tr>\n<td>i*2+1</td>\n<td>右子节点</td>\n</tr>\n<tr>\n<td>$\\frac{i}{2}$</td>\n<td>父节点</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"堆上的操作\"><a href=\"#堆上的操作\" class=\"headerlink\" title=\"堆上的操作\"></a>堆上的操作</h3><h4 id=\"往堆中插入一个元素\"><a href=\"#往堆中插入一个元素\" class=\"headerlink\" title=\"往堆中插入一个元素\"></a>往堆中插入一个元素</h4><p>堆化：插入元素后调整堆，使其重新满足堆的特性</p>\n<ul>\n<li>从下往上</li>\n<li>从上往下</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/e5/22/e578654f930002a140ebcf72b11eb722.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/e3/0e/e3744661e038e4ae570316bc862b2c0e.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">class</span> <span class=\"token class-name\">Heap</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 数组，从下标1开始存储数据</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 堆可以存储的最大数据个数</span>\n  <span class=\"token keyword\">private</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 堆中已经存储的数据个数</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token class-name\">Heap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> capacity<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>capacity <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    n <span class=\"token operator\">=</span> capacity<span class=\"token punctuation\">;</span>\n    count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> data<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">>=</span> n<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 堆满了</span>\n    <span class=\"token operator\">++</span>count<span class=\"token punctuation\">;</span>\n    a<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> data<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span> <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">></span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 自下往上堆化</span>\n      <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// swap()函数作用：交换下标为i和i/2的两个元素</span>\n      i <span class=\"token operator\">=</span> i<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n <span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"删除堆顶元素\"><a href=\"#删除堆顶元素\" class=\"headerlink\" title=\"删除堆顶元素\"></a>删除堆顶元素</h4><p>堆顶元素存储的就是堆中数据最大值或者最小值</p>\n<p>从下往上堆化，不满足完全二叉树的特性</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/59/81/5916121b08da6fc0636edf1fc24b5a81.jpg\" alt=\"img\"></p>\n<p>从上往下堆化方法不会出现数组空洞</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/11/60/110d6f442e718f86d2a1d16095513260.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">public</span> <span class=\"token keyword\">void</span> <span class=\"token function\">removeMax</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>count <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 堆中没有数据</span>\n  a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>count<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">--</span>count<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">void</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span> <span class=\"token comment\">// 自上往下堆化</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> maxPos <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> maxPos <span class=\"token operator\">=</span> i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>maxPos<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> maxPos <span class=\"token operator\">=</span> i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxPos <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> maxPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i <span class=\"token operator\">=</span> maxPos<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"如何基于堆实现排序？\"><a href=\"#如何基于堆实现排序？\" class=\"headerlink\" title=\"如何基于堆实现排序？\"></a>如何基于堆实现排序？</h2><ul>\n<li>时间复杂度<ul>\n<li>$O(nlogn)$</li>\n</ul>\n</li>\n<li>大致步骤<ul>\n<li>建堆</li>\n<li>排序</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"建堆\"><a href=\"#建堆\" class=\"headerlink\" title=\"建堆\"></a>建堆</h3><p>思路</p>\n<ul>\n<li>借助前面讲的，在堆中插入一个元素的思路<ul>\n<li>假设起初堆中只包含一个数据</li>\n<li>调用插入操作，将下标从2到n的数据依次插入到堆中</li>\n</ul>\n</li>\n<li>从后往前处理数组，从上往下堆化</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/50/1e/50c1e6bc6fe68378d0a66bdccfff441e.jpg\" alt=\"img\"></p>\n<p><img src=\"https://static001.geekbang.org/resource/image/aa/9d/aabb8d15b1b92d5e040895589c60419d.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">buildHeap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n<span class=\"token operator\">/</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> maxPos <span class=\"token operator\">=</span> i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span> <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> maxPos <span class=\"token operator\">=</span> i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span> <span class=\"token operator\">&lt;=</span> n <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">[</span>maxPos<span class=\"token punctuation\">]</span> <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> maxPos <span class=\"token operator\">=</span> i<span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>maxPos <span class=\"token operator\">==</span> i<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">,</span> maxPos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i <span class=\"token operator\">=</span> maxPos<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h3 id=\"排序\"><a href=\"#排序\" class=\"headerlink\" title=\"排序\"></a>排序</h3><p>建堆结束之后，数组中的数据已经是按照大顶堆的特性来组织</p>\n<ul>\n<li>数组中第一个元素就是堆顶，也就是最大的元素</li>\n<li>将其与最后一个元素交换，则最大元素放到下标为n的位置</li>\n</ul>\n<p><img src=\"https://static001.geekbang.org/resource/image/23/d1/23958f889ca48dbb8373f521708408d1.jpg\" alt=\"img\"></p>\n<pre class=\"line-numbers language-java\" data-language=\"java\"><code class=\"language-java\"><span class=\"token comment\">// n表示数据的个数，数组a中的数据从下标1到n的位置。</span>\n<span class=\"token keyword\">public</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token function\">buildHeap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> k <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>k <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token function\">swap</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">--</span>k<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">heapify</span><span class=\"token punctuation\">(</span>a<span class=\"token punctuation\">,</span> k<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h2 id=\"解答开篇\"><a href=\"#解答开篇\" class=\"headerlink\" title=\"解答开篇\"></a>解答开篇</h2><p>为什么快速排序比堆排序性能好？</p>\n<ul>\n<li>堆排序数据访问的方式没有快速排序友好<ul>\n<li>快速排序：顺序访问</li>\n<li>堆排序：跳着访问，对CPU缓存不好</li>\n</ul>\n</li>\n<li>对于同样的数据，在排序过程中，堆排序算法的数据交换次数要多于快速排序<ul>\n<li>建堆过程可能会打乱数据原有先后顺序，使得有序度降低</li>\n<li>基于比较则只需要：比较+交换</li>\n</ul>\n</li>\n</ul>\n","text":"堆和堆排序：为什么说堆排序没有快速排序快？特殊的树：堆(Heap) 堆排序 原地 时间复杂度为$O(nlogn)$ 实际软件开发中，快速排序的性能要比堆排序好 如何理解堆？ 完全二叉树 堆中每一个节点的值都必须大于等于(或小于等于)其子树中每个节点的值 大顶堆 小顶堆 如何实现一...","link":"","photos":[],"count_time":{"symbolsCount":"2.4k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A0%86%E5%92%8C%E5%A0%86%E6%8E%92%E5%BA%8F%EF%BC%9A%E4%B8%BA%E4%BB%80%E4%B9%88%E8%AF%B4%E5%A0%86%E6%8E%92%E5%BA%8F%E6%B2%A1%E6%9C%89%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F%E5%BF%AB%EF%BC%9F\"><span class=\"toc-text\">堆和堆排序：为什么说堆排序没有快速排序快？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E7%90%86%E8%A7%A3%E5%A0%86%EF%BC%9F\"><span class=\"toc-text\">如何理解堆？</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E4%B8%80%E4%B8%AA%E5%A0%86%EF%BC%9F\"><span class=\"toc-text\">如何实现一个堆？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E7%94%A8%E6%95%B0%E7%BB%84%E5%AD%98%E5%82%A8%E5%A0%86\"><span class=\"toc-text\">用数组存储堆</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%A0%86%E4%B8%8A%E7%9A%84%E6%93%8D%E4%BD%9C\"><span class=\"toc-text\">堆上的操作</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%BE%80%E5%A0%86%E4%B8%AD%E6%8F%92%E5%85%A5%E4%B8%80%E4%B8%AA%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">往堆中插入一个元素</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%88%A0%E9%99%A4%E5%A0%86%E9%A1%B6%E5%85%83%E7%B4%A0\"><span class=\"toc-text\">删除堆顶元素</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%A6%82%E4%BD%95%E5%9F%BA%E4%BA%8E%E5%A0%86%E5%AE%9E%E7%8E%B0%E6%8E%92%E5%BA%8F%EF%BC%9F\"><span class=\"toc-text\">如何基于堆实现排序？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BB%BA%E5%A0%86\"><span class=\"toc-text\">建堆</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%8E%92%E5%BA%8F\"><span class=\"toc-text\">排序</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%A7%A3%E7%AD%94%E5%BC%80%E7%AF%87\"><span class=\"toc-text\">解答开篇</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DSA3 Complexity Analysis1","uid":"503921898d741f6fd2003fcfcab3b5d3","slug":"DSA/C3 复杂度分析(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:18:38.000Z","comments":true,"path":"api/articles/DSA/C3 复杂度分析(上).json","keywords":null,"cover":[],"text":"复杂度分析（上）：如何分析、统计算法的执行效率和资源消耗？为什么需要复杂度分析？事后统计法的局限 测试结果依赖于测试环境 i9 vs i3 测试结果受数据规模影响大 小规模数据排序，出入排序&gt;快速排序 大O复杂度表示法code1 int cal(int n) &#123; ...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"DSA30 Graph","uid":"23870052c199bf06d18a4a93d8161ea8","slug":"DSA/C30 图的表示","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:25:56.000Z","comments":true,"path":"api/articles/DSA/C30 图的表示.json","keywords":null,"cover":[],"text":"图的表示：如何存储微博、微信等社交网络中的好友关系？如何理解图？ 名词 定义 顶点vertex 图中的元素 边edge 图中顶点与任意其他顶点建立的关系 度degree 跟顶点相连接的边的条数 有向图 边有方向的图 无向图 边无方向的图 带权图 每条边都有一个权重 入度 in-d...","link":"","photos":[],"count_time":{"symbolsCount":597,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}