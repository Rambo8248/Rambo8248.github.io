{"title":"DSA13 Sort3","uid":"f0bf7281fb0e82f54bc8de918f6f9204","slug":"DSA/C13 线性排序","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:20:57.000Z","comments":true,"path":"api/articles/DSA/C13 线性排序.json","keywords":null,"cover":[],"content":"<h1 id=\"线性排序：如何根据年龄给100万用户数据排序？\"><a href=\"#线性排序：如何根据年龄给100万用户数据排序？\" class=\"headerlink\" title=\"线性排序：如何根据年龄给100万用户数据排序？\"></a>线性排序：如何根据年龄给100万用户数据排序？</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><p>三种时间复杂度为$O(n)$的排序算法</p>\n<ul>\n<li>桶排序</li>\n<li>计数排序</li>\n<li>基数排序</li>\n</ul>\n<p>非基于比较的排序算法→时间复杂度为线性</p>\n<h2 id=\"桶排序（Bucket-sort）\"><a href=\"#桶排序（Bucket-sort）\" class=\"headerlink\" title=\"桶排序（Bucket sort）\"></a>桶排序（Bucket sort）</h2><p><img src=\"https://static001.geekbang.org/resource/image/98/ae/987564607b864255f81686829503abae.jpg?wh=1142*705\" alt=\"img\"></p>\n<h2 id=\"计数排序（counting-sort）\"><a href=\"#计数排序（counting-sort）\" class=\"headerlink\" title=\"计数排序（counting sort）\"></a>计数排序（counting sort）</h2><ul>\n<li>桶排序的特殊情况</li>\n<li>所处范围不大，最大值为k，划分为k个桶</li>\n</ul>\n<h3 id=\"实现方法\"><a href=\"#实现方法\" class=\"headerlink\" title=\"实现方法\"></a>实现方法</h3><p>原始数据：2，5，3，0，2，3，0，3</p>\n<p><img src=\"https://static001.geekbang.org/resource/image/1d/84/1d730cb17249f8e92ef5cab53ae65784.jpg?wh=1142*1522\" alt=\"img\"></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token comment\">// 计数排序，a是数组，n是数组大小。假设数组中存储的都是非负整数。</span>\npublic <span class=\"token keyword\">void</span> <span class=\"token function\">countingSort</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// 查找数组中数据的范围</span>\n  <span class=\"token keyword\">int</span> max <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>max <span class=\"token operator\">&lt;</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n      max <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> c <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>max <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// 申请一个计数数组c，下标大小[0,max]</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> max<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 计算每个元素的个数，放入c中</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    c<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 依次累加</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;=</span> max<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>i<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> c<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 临时数组r，存储排序之后的结果</span>\n  <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> r <span class=\"token operator\">=</span> new <span class=\"token keyword\">int</span><span class=\"token punctuation\">[</span>n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// 计算排序的关键步骤，有点难理解</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> n <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">--</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> c<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    r<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    c<span class=\"token punctuation\">[</span>a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span><span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n\n  <span class=\"token comment\">// 将结果拷贝给a数组</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">&#123;</span>\n    a<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> r<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<ul>\n<li>数据范围不大场景</li>\n<li>给非负整数排序，否则需要转化</li>\n</ul>\n<h2 id=\"基数排序（radix-sort）\"><a href=\"#基数排序（radix-sort）\" class=\"headerlink\" title=\"基数排序（radix sort）\"></a>基数排序（radix sort）</h2><p><img src=\"https://static001.geekbang.org/resource/image/df/0c/df0cdbb73bd19a2d69a52c54d8b9fc0c.jpg?wh=1142*511\" alt=\"img\">    </p>\n","text":"线性排序：如何根据年龄给100万用户数据排序？引入三种时间复杂度为$O(n)$的排序算法 桶排序 计数排序 基数排序 非基于比较的排序算法→时间复杂度为线性 桶排序（Bucket sort） 计数排序（counting sort） 桶排序的特殊情况 所处范围不大，最大值为k，划分...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%BA%BF%E6%80%A7%E6%8E%92%E5%BA%8F%EF%BC%9A%E5%A6%82%E4%BD%95%E6%A0%B9%E6%8D%AE%E5%B9%B4%E9%BE%84%E7%BB%99100%E4%B8%87%E7%94%A8%E6%88%B7%E6%95%B0%E6%8D%AE%E6%8E%92%E5%BA%8F%EF%BC%9F\"><span class=\"toc-text\">线性排序：如何根据年龄给100万用户数据排序？</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">引入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%A1%B6%E6%8E%92%E5%BA%8F%EF%BC%88Bucket-sort%EF%BC%89\"><span class=\"toc-text\">桶排序（Bucket sort）</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%A1%E6%95%B0%E6%8E%92%E5%BA%8F%EF%BC%88counting-sort%EF%BC%89\"><span class=\"toc-text\">计数排序（counting sort）</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%AE%9E%E7%8E%B0%E6%96%B9%E6%B3%95\"><span class=\"toc-text\">实现方法</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%9F%BA%E6%95%B0%E6%8E%92%E5%BA%8F%EF%BC%88radix-sort%EF%BC%89\"><span class=\"toc-text\">基数排序（radix sort）</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"DSA12 Sort2","uid":"9be35293ffa6798064be3bddd6f599aa","slug":"DSA/C12 排序(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:20:45.000Z","comments":true,"path":"api/articles/DSA/C12 排序(下).json","keywords":null,"cover":[],"text":"排序（下）：如何用快排思想在$O(n)$​内查找第K大元素？引入两种时间复杂度为$O(nlogn)$的排序算法 归并排序 快速排序 归并排序（Merge sort）原理及实现 数组从中间分成前后两部分 对前后两部分分别排序 再将排好序的两部分合并在一起 递推公式： merge_s...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"DSA14 Sort4","uid":"bb3030af5d71baf7746e61c6c316baf8","slug":"DSA/C14 排序优化","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:21:05.000Z","comments":true,"path":"api/articles/DSA/C14 排序优化.json","keywords":null,"cover":[],"text":"排序优化：如何实现一个通用的、高性能的排序函数？如何选择合适的排序算法 线性排序场景特殊，不选用 为了兼顾任意规模，首选时间复杂度为$O(nlogn)$ 归并排序空间复杂度可能较高 故选择快速排序 如何优化快速排序理想分区点：被分区点分开的两个分区中，数据的数量差不多 三数取中法...","link":"","photos":[],"count_time":{"symbolsCount":149,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}