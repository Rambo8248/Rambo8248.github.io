{"title":"C3 程序的机器级表示","uid":"56f4d97bcf32df033b2c7f1482475692","slug":"CSAPP/C3-程序的机器级表示","date":"2021-08-26T04:15:53.000Z","updated":"2021-08-26T04:19:06.848Z","comments":true,"path":"api/articles/CSAPP/C3-程序的机器级表示.json","keywords":null,"cover":[],"content":"<h1 id=\"程序的机器级表示\"><a href=\"#程序的机器级表示\" class=\"headerlink\" title=\"程序的机器级表示\"></a>程序的机器级表示</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><table>\n<thead>\n<tr>\n<th>代码类型</th>\n<th>定义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>机器代码</td>\n<td>用字节序列编码低级的操作 包括处理数据、管理内存、读写存储设备上的数据，以及利用网络通信</td>\n</tr>\n<tr>\n<td>汇编代码</td>\n<td>机器代码的文本表示 给出程序中的每一条指令</td>\n</tr>\n<tr>\n<td>高级语言编程</td>\n<td>机器屏蔽程序的细节，即机器级的实现 抽象级别高，效率高，更可靠 可以在不同机器上编译和执行</td>\n</tr>\n<tr>\n<td>汇编代码编程</td>\n<td>指定程序用来执行计算的低级指令 与特定机器密切相关</td>\n</tr>\n</tbody></table>\n<p>Why Machine code？</p>\n<ul>\n<li>理解编译器的优化能力，分析代码中隐含的低效率</li>\n<li>高级语言提供的抽象层隐藏我们想要了解的程序的run-time behavior<ul>\n<li>例如了解不同的线程是如何共享程序数据或保持数据私有的，以及准确知道如何在哪里访问共享数据，都很重要</li>\n</ul>\n</li>\n<li>程序遭受攻击时很多涉及程序存储run-time control information</li>\n</ul>\n<p>本章</p>\n<ul>\n<li>详细学习一种特别的汇编语言</li>\n<li>了解如何将C程序编译成这种形式的机器代码</li>\n</ul>\n<p>源代码-汇编代码的关系通常不易理解</p>\n<ul>\n<li>逆向工程reverse engineering：通过研究系统和逆向工作，来试图了解系统的创建过程</li>\n</ul>\n<p>展开过程</p>\n<pre class=\"line-numbers language-none\"><code class=\"language-none\">快速浏览C语言.汇编代码.机器代码之间的关系\n介绍x86-64的细节\n了解如何实现C语言中的控制结构\n过程的实现\n考虑在机器级如何实现数据结构\n讨论内存访问越界的问题\n系统容易遭受缓冲区溢出攻击的问题\nGDB调试器检查机器级程序运行时行为的技巧\n包含浮点数据和操作的代码的机器程序表示<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h2 id=\"历史观点\"><a href=\"#历史观点\" class=\"headerlink\" title=\"历史观点\"></a>历史观点</h2><h2 id=\"程序编码\"><a href=\"#程序编码\" class=\"headerlink\" title=\"程序编码\"></a>程序编码</h2><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">gcc -Og -o p p1.c p2.c\n#GCC C编译器\n#-Og 告诉编译器使用会生成符合原始C代码整体结构的机器代码的优化等级\n#instructs the compiler to apply a level of optimization \n#that yields machine code that follows the overall structure \n#of the original C code\n#高级别优化产生的代码会严重变形，以至于产生的机器代码和初始源代码间关系难以理解\n编译器\n汇编器\n链接器\nC预处理器扩展源代码\n插入所有用#include命令指定的文件\n扩展所有用#define声明指定的宏\n生成两个源文件的汇编代码.s\n二进制目标代码文件.o\n可执行代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<h3 id=\"机器级代码\"><a href=\"#机器级代码\" class=\"headerlink\" title=\"机器级代码\"></a>机器级代码</h3><p>机器级编程的两种抽象</p>\n<table>\n<thead>\n<tr>\n<th>抽象</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>ISA,Instruction Set Architecture</td>\n<td>定义机器级程序的格式和行为，定义了处理器状态、指令的格式，以及每条指令对状态的影响</td>\n</tr>\n<tr>\n<td>Virtual Addresses</td>\n<td>提供的内存模型看上去是一个非常大的字节数组</td>\n</tr>\n</tbody></table>\n<p>机器代码中的处理器</p>\n<table>\n<thead>\n<tr>\n<th>处理器</th>\n<th>状态</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>程序计数器PC</td>\n<td>给出将要执行的下一条指令在内存中的地址</td>\n</tr>\n<tr>\n<td>整数寄存器文件</td>\n<td>存储地址或整数数据 有的寄存器用来记录某些重要程序状态，其他用来保存临时数据</td>\n</tr>\n<tr>\n<td>条件码寄存器</td>\n<td>保存最近执行的算术或逻辑指令的状态信息 用来实现控制或数据流中条件变化</td>\n</tr>\n<tr>\n<td>一组向量寄存器</td>\n<td>存放一个或多个整数或浮点数值</td>\n</tr>\n</tbody></table>\n<h3 id=\"代码示例\"><a href=\"#代码示例\" class=\"headerlink\" title=\"代码示例\"></a>代码示例</h3><h4 id=\"示例1\"><a href=\"#示例1\" class=\"headerlink\" title=\"示例1\"></a>示例1</h4><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">mstore.c\nlong mult2(long,long);\n\nvoid multstore(long x,long y,long *dest)&#123;\n    long t &#x3D; mult2(x,y);\n    *dest &#x3D; t;\n&#125;\ngcc -Og -c mstore.c\nmstore.s\n  .section  __TEXT,__text,regular,pure_instructions\n  .build_version macos, 10, 15, 4 sdk_version 10, 15, 4\n  .globl  _multstore              ## -- Begin function multstore\n  .p2align  4, 0x90\n_multstore:                             ## @multstore\n  .cfi_startproc\n## %bb.0:\n  pushq %rbp\n  .cfi_def_cfa_offset 16\n  .cfi_offset %rbp, -16\n  movq  %rsp, %rbp\n  .cfi_def_cfa_register %rbp\n  pushq %rbx\n  pushq %rax\n  .cfi_offset %rbx, -24\n  movq  %rdx, %rbx\n  callq _mult2\n  movq  %rax, (%rbx)\n  addq  $8, %rsp\n  popq  %rbx\n  popq  %rbp\n  retq\n  .cfi_endproc\n                                        ## -- End function\n\n.subsections_via_symbols<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p>其中</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>操作</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>pushq %rbx</code></td>\n<td>将寄存器<code>%rbx</code>的内容压入程序栈中</td>\n</tr>\n<tr>\n<td>……</td>\n<td></td>\n</tr>\n</tbody></table>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">gcc -Og -c mstore.c\n#生成mstore.o\nmstore.o<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"file:///Users/zhangweijian/Desktop/%E5%85%AC%E4%BC%97%E5%8F%B7/CSAPP/C3%20%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA.assets/%E6%88%AA%E5%B1%8F2021-08-20%20%E4%B8%8B%E5%8D%882.41.18.png?lastModify=1629951365\" alt=\"截屏2021-08-20 下午2.41.18\"></p>\n<p>要想查看需要使用反汇编器disassembler</p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">objdump -d mstore.o<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu2kk6vwcj611g0nm0vx02.jpg\" alt=\"截屏2021-08-20 下午3.07.23\"></p>\n<ul>\n<li>左边：按照前面给出的字节顺序排列的14个十六进制字节值，分成若干组，每组有1～5个字节</li>\n<li>右边：等价的汇编语言</li>\n</ul>\n<h4 id=\"示例2\"><a href=\"#示例2\" class=\"headerlink\" title=\"示例2\"></a>示例2</h4><pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\">main<span class=\"token punctuation\">.</span>c\n<span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">include</span><span class=\"token string\">&lt;stdio.h></span></span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">multstore</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">long</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">multstore</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span><span class=\"token number\">3</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"2 * 3 --> %ld\\n\"</span><span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\n\n<span class=\"token keyword\">long</span>  <span class=\"token function\">mult2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> a<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    <span class=\"token keyword\">long</span> s <span class=\"token operator\">=</span> a <span class=\"token operator\">*</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span>\ngcc <span class=\"token operator\">-</span>Og <span class=\"token operator\">-</span>o prog main<span class=\"token punctuation\">.</span>c mstore<span class=\"token punctuation\">.</span>c\n<span class=\"token punctuation\">.</span><span class=\"token operator\">/</span>prog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu2knmrkwj615w03smxx02.jpg\" alt=\"截屏2021-08-20 下午3.13.27\"></p>\n<pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">objdump -d prog<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu2kp02xxj60yk0f676w02.jpg\" alt=\"截屏2021-08-20 下午3.14.07\"></p>\n<p>与<code>mstore.c</code>反汇编产生的代码区别</p>\n<ul>\n<li>左边列出的地址不同<ul>\n<li>链接器将这段代码的地址移到了一段不同的地址范围中</li>\n</ul>\n</li>\n<li>链接器填上了callq指令调用函数mult2需要使用的地址<ul>\n<li>链接器的任务之一就是为函数调用找到匹配的函数的可执行代码的位置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"关于格式的注解\"><a href=\"#关于格式的注解\" class=\"headerlink\" title=\"关于格式的注解\"></a>关于格式的注解</h3><pre class=\"line-numbers language-sh\" data-language=\"sh\"><code class=\"language-sh\">gcc -Og -S -masm&#x3D;intel mstore.c\n#Intel格式的代码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span></span></code></pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>把C程序和汇编代码结合起来</p>\n<ul>\n<li><p>C编译器在把程序中表达的计算转换到机器代码方面表现出色，但是仍然有一些机器特性是C程序访问不到的</p>\n</li>\n<li><p>在C程序中插入汇编代码</p>\n<ul>\n<li>编写完整函数，放进一个独立的汇编代码文件中，让汇编器和链接器把它和用C语言书写的代码合并起来</li>\n<li>使用GCC的内联汇编特性，用asm伪指令可以在C程序中包含简短的汇编代码</li>\n</ul>\n</li>\n</ul></blockquote>\n<h2 id=\"数据格式\"><a href=\"#数据格式\" class=\"headerlink\" title=\"数据格式\"></a>数据格式</h2><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu2ksbquwj61ag0ju77202.jpg\" alt=\"截屏2021-08-24 下午5.30.11\"></p>\n<p>Eg:数据传送指令</p>\n<table>\n<thead>\n<tr>\n<th>指令</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody><tr>\n<td><code>movb</code></td>\n<td>传送字节</td>\n</tr>\n<tr>\n<td><code>movw</code></td>\n<td>传送字</td>\n</tr>\n<tr>\n<td><code>movl</code></td>\n<td>传送双字</td>\n</tr>\n<tr>\n<td><code>movq</code></td>\n<td>传送四字</td>\n</tr>\n</tbody></table>\n<h2 id=\"访问信息\"><a href=\"#访问信息\" class=\"headerlink\" title=\"访问信息\"></a>访问信息</h2><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu2kwurntj60u010u79v02.jpg\" alt=\"x86-64的CPU所包含的通用目的寄存器及其作用\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu2l0v1ytj60u010010q02.jpg\" alt=\"IMG_0675\"></p>\n<p>注</p>\n<ul>\n<li>0-7、7-15……分别为不同机器扩展后对应的名称</li>\n<li>指令可以对寄存器的字节低位中存放的不同大小的数据进行操作<ul>\n<li>字节级操作\\to最低字节</li>\n<li>16位操作\\to最低2个字节</li>\n<li>32位操作\\to最低4个字节</li>\n<li>64位操作\\to整个寄存器</li>\n</ul>\n</li>\n<li>最特别的栈指针<code>%rsp</code><ul>\n<li>指明运行时栈的结束位置</li>\n</ul>\n</li>\n</ul>\n<h3 id=\"操作数指示符\"><a href=\"#操作数指示符\" class=\"headerlink\" title=\"操作数指示符\"></a>操作数指示符</h3><table>\n<thead>\n<tr>\n<th>操作数的类型</th>\n<th>表示</th>\n<th>ATT格式的汇编代码</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>立即数immediate</td>\n<td>常数值</td>\n<td><code>$</code>后面跟一个用标准C表示的整数 eg：<code>$-577</code>、<code>$0x1F</code></td>\n</tr>\n<tr>\n<td>寄存器register</td>\n<td>某个寄存器的内容</td>\n<td><code>R[r_a]</code>用寄存器标识符索引</td>\n</tr>\n<tr>\n<td>内存引用</td>\n<td>根据计算出来的地址访问某个内存位置</td>\n<td>M_b[Addr]表示对存储在内存中从地址Addr开始的b个字节值的引用</td>\n</tr>\n</tbody></table>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu2l4i8yrj612a0m6n1c02.jpg\" alt=\"操作数格式\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu2lb6kizj60va0u0go902.jpg\" alt=\"IMG_0CD13AF8580F-1\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtu2lhaeqhj616k0lkq7a02.jpg\" alt=\"IMG_0677\"></p>\n<h3 id=\"数据传送指令\"><a href=\"#数据传送指令\" class=\"headerlink\" title=\"数据传送指令\"></a>数据传送指令</h3>","feature":true,"text":"程序的机器级表示引入 代码类型 定义 机器代码 用字节序列编码低级的操作 包括处理数据、管理内存、读写存储设备上的数据，以及利用网络通信 汇编代码 机器代码的文本表示 给出程序中的每一条指令 高级语言编程 机器屏蔽程序的细节，即机器级的实现 抽象级别高，效率高，更可靠 可以在不同...","link":"","photos":[],"count_time":{"symbolsCount":"3.4k","symbolsTime":"3 mins."},"categories":[{"name":"CSAPP","slug":"CSAPP","count":3,"path":"api/categories/CSAPP.json"}],"tags":[{"name":"CSAPP","slug":"CSAPP","count":3,"path":"api/tags/CSAPP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E7%9A%84%E6%9C%BA%E5%99%A8%E7%BA%A7%E8%A1%A8%E7%A4%BA\"><span class=\"toc-text\">程序的机器级表示</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">引入</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%8E%86%E5%8F%B2%E8%A7%82%E7%82%B9\"><span class=\"toc-text\">历史观点</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E7%A8%8B%E5%BA%8F%E7%BC%96%E7%A0%81\"><span class=\"toc-text\">程序编码</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%BA%E5%99%A8%E7%BA%A7%E4%BB%A3%E7%A0%81\"><span class=\"toc-text\">机器级代码</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%BB%A3%E7%A0%81%E7%A4%BA%E4%BE%8B\"><span class=\"toc-text\">代码示例</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B1\"><span class=\"toc-text\">示例1</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%A4%BA%E4%BE%8B2\"><span class=\"toc-text\">示例2</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%85%B3%E4%BA%8E%E6%A0%BC%E5%BC%8F%E7%9A%84%E6%B3%A8%E8%A7%A3\"><span class=\"toc-text\">关于格式的注解</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E6%A0%BC%E5%BC%8F\"><span class=\"toc-text\">数据格式</span></a></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E8%AE%BF%E9%97%AE%E4%BF%A1%E6%81%AF\"><span class=\"toc-text\">访问信息</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%93%8D%E4%BD%9C%E6%95%B0%E6%8C%87%E7%A4%BA%E7%AC%A6\"><span class=\"toc-text\">操作数指示符</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%95%B0%E6%8D%AE%E4%BC%A0%E9%80%81%E6%8C%87%E4%BB%A4\"><span class=\"toc-text\">数据传送指令</span></a></li></ol></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{},"next_post":{"title":"C2 信息的表示和处理","uid":"60ed0f7899e93e3dd0dff8a77b279977","slug":"CSAPP/C2-信息的表示和处理","date":"2021-08-26T04:14:27.000Z","updated":"2021-08-26T04:15:31.242Z","comments":true,"path":"api/articles/CSAPP/C2-信息的表示和处理.json","keywords":null,"cover":[],"text":"信息的表示和处理引入二值信号 容易被表示、存储和传输 位的组合加解释(group bits together and apply some interpretation) 能够表示任何有限集合的元素 三种重要数字表示 unsigned：基于传统的二进制表示法，表示大于或者等于0的...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"CSAPP","slug":"CSAPP","count":3,"path":"api/categories/CSAPP.json"}],"tags":[{"name":"CSAPP","slug":"CSAPP","count":3,"path":"api/tags/CSAPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}