{"title":"C4 处理器体系结构","uid":"54eea516d81b966dd64e8dfcff34d389","slug":"CSAPP/C4-处理器体系结构","date":"2021-08-29T01:38:53.000Z","updated":"2021-09-01T08:47:49.000Z","comments":true,"path":"api/articles/CSAPP/C4-处理器体系结构.json","keywords":null,"cover":[],"content":"<h1 id=\"处理器体系结构\"><a href=\"#处理器体系结构\" class=\"headerlink\" title=\"处理器体系结构\"></a>处理器体系结构</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><h3 id=\"微处理器架构简述\"><a href=\"#微处理器架构简述\" class=\"headerlink\" title=\"微处理器架构简述\"></a>微处理器架构简述</h3><ul>\n<li>现代微处理器复杂</li>\n<li>到目前为止，我们看到的计算机系统只限于<strong>机器语言程序级</strong></li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu17t4pyuwj618q066wex02.jpg\" alt=\"截屏2021-09-01 下午4.38.14\"></p>\n<pre class=\"mermaid\">graph LR\n处理器 --执行--> 指令.简单操作  --编码--> 一个或多个字节序列组成的二进制格式</pre>\n\n<p>指令集体系结构(ISA)：一个处理器支持的指令和指令的字节级编码</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu17ta8smmj61cy09sgmd02.jpg\" alt=\"截屏2021-09-01 下午4.38.26\"></p>\n<pre class=\"mermaid\">flowchart TD\n编译器编写者 o--概念抽象层--o 处理器设计者\n\n允许哪些指令及其如何编码 o--概念抽象层--o 建造出执行这些指令的处理器</pre>\n\n<h3 id=\"本章内容\"><a href=\"#本章内容\" class=\"headerlink\" title=\"本章内容\"></a>本章内容</h3><ul>\n<li>处理器<strong>硬件的设计</strong></li>\n<li>硬件系统<strong>执行</strong>某种ISA<strong>指令的方式</strong></li>\n<li>计算机制造商们面临的<strong>技术挑战</strong></li>\n</ul>\n<h3 id=\"为什么了解处理器设计？\"><a href=\"#为什么了解处理器设计？\" class=\"headerlink\" title=\"为什么了解处理器设计？\"></a>为什么了解处理器设计？</h3><ul>\n<li>处理器设计有趣且重要<ul>\n<li>学习事物如何工作有内在价值</li>\n</ul>\n</li>\n<li>帮助理解整个计算机系统如何工作</li>\n<li>有助于设计包含处理器的硬件系统<ul>\n<li>例如嵌入式开发</li>\n</ul>\n</li>\n<li>工作为处理器设计</li>\n</ul>\n<h3 id=\"本章整体逻辑\"><a href=\"#本章整体逻辑\" class=\"headerlink\" title=\"本章整体逻辑\"></a>本章整体逻辑</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu17thack1j61co0q2q6c02.jpg\" alt=\"截屏2021-09-01 下午4.38.38\"></p>\n<pre class=\"mermaid\">graph TD\n定义一个简单指令集作为处理器实现的运行示例 \n--> 提供一些数字硬件设计的背景\n--> 给出一个基于顺序操作功能正确但并不实用的处理器\n--> pipelined-processor\n--> 设计工具来研究和测试处理器设计\n\nY84-64比x86-64功能少但逻辑简单\n--> 基本构件块及如何连接和操作/HCL简介和应用\n--> 时钟慢且性能低\n--> 将每条指令的执行分解成五步/每个步骤由独立硬件部分或阶段处理\n--> assembler/simulator</pre>\n\n<h2 id=\"Y86-64-ISA\"><a href=\"#Y86-64-ISA\" class=\"headerlink\" title=\"Y86-64 ISA\"></a>Y86-64 ISA</h2><p>定义ISA包括</p>\n<ul>\n<li>状态单元 different components of its state</li>\n<li>指令集 the set of instructions</li>\n<li>编码 codings</li>\n<li>编程规范 programming conventions</li>\n<li>异常事件处理 the handling of exceptional events</li>\n</ul>\n<h3 id=\"Programmer-visible-state\"><a href=\"#Programmer-visible-state\" class=\"headerlink\" title=\"Programmer-visible state\"></a>Programmer-visible state</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtxgtuav8wj60z00hemzy02.jpg\" alt=\"截屏2021-08-29 上午10.48.07\"></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>名词</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Programmer-visible state</td>\n<td>each instruction in a Y86-64 program can read and modify some part of the processor state</td>\n</tr>\n<tr>\n<td>“Programmer”</td>\n<td>1.someone writing programs in assembly code<br />2.a compiler generating machine-level code</td>\n</tr>\n<tr>\n<td>program registers</td>\n<td>Each of these stores a 64-bit word</td>\n</tr>\n<tr>\n<td>single-bit condition codes</td>\n<td>storing information about the effect of the most recent arithmetic or logical instruction</td>\n</tr>\n<tr>\n<td>program counter</td>\n<td>holds the address of the instruction currently being executed</td>\n</tr>\n<tr>\n<td>memory</td>\n<td>a large array of bytes, holding both program and data</td>\n</tr>\n<tr>\n<td>status code Stat</td>\n<td>indicating the overall state of program execution</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"Instructions\"><a href=\"#Instructions\" class=\"headerlink\" title=\"Instructions\"></a>Instructions</h3><p>指令这一节讲述了Y86-64 ISA中各个指令的简单描述，即指令集中各条指令的具体作用和编码表示</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtxi8eu5cjj61hb0u0wkx02.jpg\" alt=\"截屏2021-08-29 上午11.31.31\"></p>\n<p>指令集的功能码<code>fn</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtxhyks30nj61ba0kc77t02.jpg\" alt=\"截屏2021-08-29 上午11.27.16\"></p>\n<p>程序寄存器标识符<code>ID</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu182uw27xj61ak0moadj02.jpg\" alt=\"截屏2021-08-29 上午11.26.45\"></p>\n<p>注意：</p>\n<ul>\n<li>指令集的一个重要性质就是字节编码必须有唯一的解释</li>\n<li>这个性质保证处理器可以无二义性执行目标代码程序</li>\n</ul>\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">rmmovq %rsp,0x123456789abcd(%rdx)\n# register -&gt; memory\n# rmmovq -&gt; 40\n# %rsp -&gt; rA -&gt; 4\n# %rdx -&gt; rB -&gt; 2\n# 0x123456789abcd -&gt; 00 01 23 45 67 89 ab cd\n# -&gt; cd ab 89 67 45 23 01 00 因为Y86-64采用了小端法编码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>故指令的编码为</p>\n<pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">4042cdab896745230100<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>CISC vs RISC</p>\n<p>RISC更像是一把简单的小刀，通过附魔(流水线结构)增强性能</p>\n<p>CISC更像是一把大的瑞士军刀，本身具有很多的功能</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtxivfn9n1j615o0u014a02.jpg\" alt=\"IMG_AEC7F6C9F60D-1\"></p>\n<ul>\n<li>ARM(Acorn RISC Machine)广泛应用于嵌入式系统中</li>\n<li>两者思想精华结合最好</li>\n</ul></blockquote>\n<h3 id=\"Exceptions\"><a href=\"#Exceptions\" class=\"headerlink\" title=\"Exceptions\"></a>Exceptions</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0227nebej611m0bwgn202.jpg\" alt=\"截屏2021-08-31 下午4.33.49\"></p>\n<h3 id=\"Programs\"><a href=\"#Programs\" class=\"headerlink\" title=\"Programs\"></a>Programs</h3><p><code>test.c</code></p>\n<pre class=\"line-numbers language-c\" data-language=\"c\"><code class=\"language-c\"><span class=\"token keyword\">long</span> <span class=\"token function\">sum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token operator\">*</span>start<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> count<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">&#123;</span>\n  <span class=\"token keyword\">long</span> sum <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">&#123;</span>\n    sum <span class=\"token operator\">+=</span> <span class=\"token operator\">*</span>start<span class=\"token punctuation\">;</span>\n    start<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    count<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">&#125;</span>\n  <span class=\"token keyword\">return</span> sum<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">&#125;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu02fo55mwj60u011d43602.jpg\" alt=\"截屏2021-08-31 下午4.43.50\"></p>\n<p>用Y86-64汇编代码编写的一个完整的程序文件的例子</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu02puopq3j60t415iwk702.jpg\" alt=\"截屏2021-08-31 下午4.50.41\"></p>\n<p>YAS的汇编器对4-7进行汇编的结果如下图</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu02rrbe8uj60yw0u0dk802.jpg\" alt=\"截屏2021-08-31 下午4.58.08\"></p>\n<h4 id=\"instruction-set-simulator-—-YIS\"><a href=\"#instruction-set-simulator-—-YIS\" class=\"headerlink\" title=\"instruction set simulator — YIS\"></a>instruction set simulator — YIS</h4><p>目的：模拟Y86-64机器代码程序的执行，而不用模拟任何具体处理器实现的行为</p>\n<p>用YIS运行例子的目标代码，产生如下输出：</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu031sq4lkj61jy0ewdiy02.jpg\" alt=\"截屏2021-08-31 下午5.06.01\"></p>\n<h2 id=\"Logic-Design-and-the-Hardware-Control-Language-HCL\"><a href=\"#Logic-Design-and-the-Hardware-Control-Language-HCL\" class=\"headerlink\" title=\"Logic Design and the Hardware Control Language HCL\"></a>Logic Design and the Hardware Control Language HCL</h2><h3 id=\"Intro\"><a href=\"#Intro\" class=\"headerlink\" title=\"Intro\"></a>Intro</h3><p>硬件设计中</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu17ts16vcj61bs0q6myz02.jpg\" alt=\"截屏2021-09-01 下午4.38.55\"></p>\n<pre class=\"mermaid\">graph LR\n电子电路 --计算--> 对位进行运算的函数\n电子电路 --计算--> 在各种存储器单元中存储位\n\n数字系统 --> 计算对位进行操作的函数的组合逻辑\n\n数字系统 --> 存储位的存储器单元\n\n数字系统 --> 控制存储器单元更新的时钟信号</pre>\n\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>现代逻辑设计</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu17u47yw4j619k0ck75202.jpg\" alt=\"截屏2021-09-01 下午4.39.15\"></p>\n<pre class=\"mermaid\">> graph LR\nHCL直接翻译成Verilog的工具 --> HDL描述 --> 实际工作的微处理器\n\n基本硬件单元的Verilog代码--> HDL描述--> 实际工作的微处理器\n</pre>\n</blockquote>\n<h3 id=\"Logic-Gates\"><a href=\"#Logic-Gates\" class=\"headerlink\" title=\"Logic Gates\"></a>Logic Gates</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu08579rpaj610g084t9i02.jpg\" alt=\"截屏2021-08-31 下午8.04.20\"></p>\n<h3 id=\"Combinational-Circuits-and-HCL-Boolean-Expressions\"><a href=\"#Combinational-Circuits-and-HCL-Boolean-Expressions\" class=\"headerlink\" title=\"Combinational Circuits and HCL Boolean Expressions\"></a>Combinational Circuits and HCL Boolean Expressions</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu17ub7bdjj61c40lggmf02.jpg\" alt=\"截屏2021-09-01 下午4.39.26\"></p>\n<pre class=\"mermaid\">graph LR\nGate1 --> computational.block --> Combinational.circuits\nGate2 --> computational.block\n... --> computational.block\nGateN --> computational.block</pre>\n\n<h4 id=\"构建网的限制\"><a href=\"#构建网的限制\" class=\"headerlink\" title=\"构建网的限制\"></a>构建网的限制</h4><ul>\n<li>每个逻辑门必须连接到下述之一<ul>\n<li>主输入</li>\n<li>某个存储器单元的输出</li>\n<li>某个逻辑门的输出</li>\n</ul>\n</li>\n<li>两个或多个逻辑门的输出不能连接在一起<ul>\n<li>否则可能信号矛盾</li>\n</ul>\n</li>\n<li>网必须是无环的<ul>\n<li>回路会导致网络计算的函数有歧义</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"Multiplexor-MUX\"><a href=\"#Multiplexor-MUX\" class=\"headerlink\" title=\"Multiplexor,MUX\"></a>Multiplexor,MUX</h4><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu089654oej60v609wdgs02.jpg\" alt=\"截屏2021-08-31 下午8.08.11\"></p>\n<pre class=\"line-numbers language-verilog\" data-language=\"verilog\"><code class=\"language-verilog\">bool out <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">&amp;&amp;</span> a<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>s <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<h3 id=\"Word-Level-Combinational-Circuits-and-HCL-Integer-Expressions\"><a href=\"#Word-Level-Combinational-Circuits-and-HCL-Integer-Expressions\" class=\"headerlink\" title=\"Word-Level Combinational Circuits and HCL Integer Expressions\"></a>Word-Level Combinational Circuits and HCL Integer Expressions</h3><p>将逻辑门组合成大的网，构造出能计算更加复杂函数的组合电路；设计能对数据word进行操作的电路</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu08bperogj61100o0gnt02.jpg\" alt=\"截屏2021-08-31 下午8.10.36\"></p>\n<p>多路复用函数：用case expression描述</p>\n<pre class=\"line-numbers language-verilog\" data-language=\"verilog\"><code class=\"language-verilog\"><span class=\"token punctuation\">[</span>\nselect1 <span class=\"token punctuation\">:</span> expr1<span class=\"token punctuation\">;</span>\nselect2 <span class=\"token punctuation\">:</span> expr2<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span>\nselectk <span class=\"token punctuation\">:</span> exprk<span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">]</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu08gpi4mjj30cs09iaa5.jpg\" alt=\"截屏2021-08-31 下午8.15.15\"></p>\n<pre class=\"line-numbers language-verilog\" data-language=\"verilog\"><code class=\"language-verilog\">word Out4 <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>\n  <span class=\"token operator\">!</span>s1 <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>s0 <span class=\"token punctuation\">:</span> A<span class=\"token punctuation\">;</span> <span class=\"token number\">#00</span>\n  <span class=\"token operator\">!</span>s1        <span class=\"token punctuation\">:</span> B<span class=\"token punctuation\">;</span> <span class=\"token number\">#01</span>\n  <span class=\"token operator\">!</span>s0        <span class=\"token punctuation\">:</span> C<span class=\"token punctuation\">;</span> <span class=\"token number\">#10</span>\n  <span class=\"token number\">1</span>\t\t\t\t\t <span class=\"token punctuation\">:</span> D<span class=\"token punctuation\">;</span> <span class=\"token number\">#11</span>\n<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span><span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<h4 id=\"ALU\"><a href=\"#ALU\" class=\"headerlink\" title=\"ALU\"></a>ALU</h4><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu08jznp3gj61160c640602.jpg\" alt=\"截屏2021-08-31 下午8.18.35\"></p>\n<h3 id=\"Set-Membership\"><a href=\"#Set-Membership\" class=\"headerlink\" title=\"Set Membership\"></a>Set Membership</h3><p>将一个信号与许多可能匹配的信号做比较，以此来检测正在处理的某个指令代码是否属于某一类指令代码</p>\n<h3 id=\"Memory-and-Clocking\"><a href=\"#Memory-and-Clocking\" class=\"headerlink\" title=\"Memory and Clocking\"></a>Memory and Clocking</h3><p>组合电路从本质上来说<strong>不存储信息</strong>，只是简单<strong>响应输入信号</strong>，<strong>产生等于输入的某个函数的输出</strong>。</p>\n<h4 id=\"时序电路\"><a href=\"#时序电路\" class=\"headerlink\" title=\"时序电路\"></a><strong>时序电路</strong></h4><ul>\n<li>定义：有状态并且在这个状态上进行计算的系统</li>\n<li>操作：引入按位存储信息的设备</li>\n</ul>\n<h4 id=\"存储器设备\"><a href=\"#存储器设备\" class=\"headerlink\" title=\"存储器设备\"></a>存储器设备</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>设备</th>\n<th>作用</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><em>Clocked registers</em></td>\n<td>存储单个位或字</td>\n</tr>\n<tr>\n<td><em>Random access memories</em> (or simply <em>memories</em>)</td>\n<td>存储多个字<br />用地址来选择该读或写哪个字</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"寄存器\"><a href=\"#寄存器\" class=\"headerlink\" title=\"寄存器\"></a>寄存器</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>所属范畴</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>hardware registers</td>\n<td>hardware</td>\n<td>寄存器直接将它的输入和输出连接到电路的其他部分</td>\n</tr>\n<tr>\n<td>program registers</td>\n<td>machine-level programming</td>\n<td>寄存器代表的是CPU中为数不多的可<strong>寻址</strong>的字<br />地址是register IDs<br />这些字通常都存在register file中</td>\n</tr>\n</tbody>\n</table>\n</div>\n<p>操作</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu08wq29anj61260dewg402.jpg\" alt=\"截屏2021-08-31 下午8.30.49\"></p>\n<p>register file</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu092prjh3j61fs0ccq4s02.jpg\" alt=\"截屏2021-08-31 下午8.31.49\"></p>\n<p>作用</p>\n<ul>\n<li>读取2个程序寄存器的地址src及其value，在时钟控制下更新地址为dstW的寄存器的值valW</li>\n</ul>\n<h2 id=\"Sequential-Y86-64-Implementations\"><a href=\"#Sequential-Y86-64-Implementations\" class=\"headerlink\" title=\"Sequential Y86-64 Implementations\"></a>Sequential Y86-64 Implementations</h2><p>起源：每个时钟周期上，SEQ执行处理一条完整指令所需步骤，但是<strong>周期很长</strong>，故<strong>时钟周期频率会很低</strong>。而我们想要实现一个高效、流水线化的处理器</p>\n<h3 id=\"Organizing-Processing-into-Stages\"><a href=\"#Organizing-Processing-into-Stages\" class=\"headerlink\" title=\"Organizing Processing into Stages\"></a>Organizing Processing into Stages</h3><h4 id=\"本节目的\"><a href=\"#本节目的\" class=\"headerlink\" title=\"本节目的\"></a>本节目的</h4><ul>\n<li>将指令的诸多操作组织成序列框架，从而<strong>充分利用硬件</strong><ul>\n<li><strong>可行性</strong>：每条指令的整个流程比较相似</li>\n<li>必要性(硬件角度需降低复杂度)<ul>\n<li>硬件数量尽可能少</li>\n<li>硬件映射到一个二维集成电路芯片的表面</li>\n</ul>\n</li>\n<li>实现方法<ul>\n<li>指令的诸多操作组织成序列框架</li>\n<li>不同指令共享尽量多的硬件</li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<h4 id=\"阶段划分\"><a href=\"#阶段划分\" class=\"headerlink\" title=\"阶段划分\"></a>阶段划分</h4><div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>阶段</th>\n<th>作用</th>\n<th>涉及变量</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>取指fetch</td>\n<td>从内存读取指令字节，地址为 program counter的值</td>\n<td>icode指令代码<br />ifun指令功能<br />rA寄存器操作数指示符<br />rB<br />valC四字节常数字</td>\n</tr>\n<tr>\n<td>译码decode</td>\n<td>从寄存器文件读入最多两个操作数</td>\n<td>valA/valB</td>\n</tr>\n<tr>\n<td>执行execute</td>\n<td>ALU执行指明的操作、计算内存引用的有效地址、增加或减少栈指针</td>\n<td>valE</td>\n</tr>\n<tr>\n<td>访存memory</td>\n<td>将数据写入内存，或者从内存读出数据</td>\n<td>valM</td>\n</tr>\n<tr>\n<td>写回write back</td>\n<td>最多可以写两个结果到register file</td>\n<td></td>\n</tr>\n<tr>\n<td>更新PC PC update</td>\n<td>将PC设置成下一条指令的地址</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h4 id=\"指令序列阶段划分\"><a href=\"#指令序列阶段划分\" class=\"headerlink\" title=\"指令序列阶段划分\"></a>指令序列阶段划分</h4><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu09uztu02j619w0ky0wx02.jpg\" alt=\"指令序列示例\"></p>\n<h5 id=\"Opq-rrmovq-irmovq\"><a href=\"#Opq-rrmovq-irmovq\" class=\"headerlink\" title=\"Opq/rrmovq/irmovq\"></a><code>Opq/rrmovq/irmovq</code></h5><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0dqwxkoij61lg0u0wkn02.jpg\" alt=\"截屏2021-08-31 下午11.17.17\"></p>\n<p>对于图4-17中第3行<code>subq</code>指令执行的tracking</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0dzh8pz6j61fi0oyk0302.jpg\" alt=\"IMG_66825EDBE490-1\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0ebw1dddj61es0ktn2702.jpg\" alt=\"IMG_3B691C97D462-1\"></p>\n<h5 id=\"rmmovq-mrmovq\"><a href=\"#rmmovq-mrmovq\" class=\"headerlink\" title=\"rmmovq/mrmovq\"></a><code>rmmovq/mrmovq</code></h5><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0ekjwsepj615u0u00wg02.jpg\" alt=\"截屏2021-08-31 下午11.46.41\"></p>\n<h5 id=\"pushq-popq\"><a href=\"#pushq-popq\" class=\"headerlink\" title=\"pushq/popq\"></a><code>pushq/popq</code></h5><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0el2wysij611s0ragor02.jpg\" alt=\"截屏2021-08-31 下午11.47.11\"></p>\n<h5 id=\"控制转移指令处理jXX-Dest-call-Dest-ret\"><a href=\"#控制转移指令处理jXX-Dest-call-Dest-ret\" class=\"headerlink\" title=\"控制转移指令处理jXX Dest/call Dest/ret\"></a>控制转移指令处理<code>jXX Dest/call Dest/ret</code></h5><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0eoqena2j61jm0u0dkm02.jpg\" alt=\"截屏2021-08-31 下午11.50.43\"></p>\n<h3 id=\"SEQ-Hardware-Structure\"><a href=\"#SEQ-Hardware-Structure\" class=\"headerlink\" title=\"SEQ Hardware Structure\"></a>SEQ Hardware Structure</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0f9cxqi0j30y90u0n0v.jpg\" alt=\"截屏2021-09-01 上午12.00.42\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0fh4cdthj60yx0u0tc402.jpg\" alt=\"截屏2021-09-01 上午12.13.55\"></p>\n<h3 id=\"SEQ-Timing\"><a href=\"#SEQ-Timing\" class=\"headerlink\" title=\"SEQ Timing\"></a>SEQ Timing</h3><p>a <strong>single clock</strong> transition triggering a flow through <strong>combinational logic</strong> to execute an entire instruction.</p>\n<h4 id=\"SEQ的实现\"><a href=\"#SEQ的实现\" class=\"headerlink\" title=\"SEQ的实现\"></a>SEQ的实现</h4><p>(<strong><em>斜黑体</em></strong>为需要对其时序进行明确控制的硬件单元)</p>\n<ul>\n<li>组合逻辑</li>\n<li>存储器设备<ul>\n<li>Clocked register<ul>\n<li><strong><em>Program Counter</em></strong></li>\n<li><strong><em>Condition Code register</em></strong></li>\n</ul>\n</li>\n<li>Random Access Memory<ul>\n<li>Instruction Memory</li>\n<li><strong><em>Register File</em></strong></li>\n<li><strong><em>Data Memory</em></strong></li>\n</ul>\n</li>\n</ul>\n</li>\n</ul>\n<pre class=\"mermaid\">graph LR\nPC -->每个时钟周期装载新的指令地址\n\nCC --> 执行整数运算指令时装载\n\nDataMemory --> 执行rmmovq/pushq/call时才会写\n\nRegisterFile --> 两个写端口允许每个时钟周期更新两个程序寄存器</pre>\n\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu17uljz29j61a40k2tae02.jpg\" alt=\"截屏2021-09-01 下午4.39.41\"></p>\n<h4 id=\"组织计算的原则\"><a href=\"#组织计算的原则\" class=\"headerlink\" title=\"组织计算的原则\"></a>组织计算的原则</h4><ul>\n<li>从不回读 No reading back<ul>\n<li>定义：处理器从来不需要为了完成一条指令的执行而去读由该指令更新了的状态</li>\n</ul>\n</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0vj633kij616809qjsx02.jpg\" alt=\"截屏2021-09-01 上午9.33.34\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0vt997pij60x40u0jw702.jpg\" alt=\"截屏2021-09-01 上午9.33.49\"></p>\n<h3 id=\"SEQ-Stage-Implementations\"><a href=\"#SEQ-Stage-Implementations\" class=\"headerlink\" title=\"SEQ Stage Implementations\"></a>SEQ Stage Implementations</h3><p>设计实现所需要的控制逻辑块的HCL描述</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0vyvwhwoj60sk0qujv302.jpg\" alt=\"截屏2021-09-01 上午9.48.38\"></p>\n<h4 id=\"Fetch-Stage\"><a href=\"#Fetch-Stage\" class=\"headerlink\" title=\"Fetch Stage\"></a>Fetch Stage</h4><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0w8x2o6gj61rc0n479602.jpg\" alt=\"截屏2021-09-01 上午9.51.28\"></p>\n<h4 id=\"Decode-and-Write-Back-Stages\"><a href=\"#Decode-and-Write-Back-Stages\" class=\"headerlink\" title=\"Decode and Write-Back Stages\"></a>Decode and Write-Back Stages</h4><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0wgcwmc7j61qg0hb77t02.jpg\" alt=\"截屏2021-09-01 上午10.02.57\"></p>\n<h4 id=\"Execute-Stage\"><a href=\"#Execute-Stage\" class=\"headerlink\" title=\"Execute Stage\"></a>Execute Stage</h4><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0wjmq6yxj61nk0jg0w602.jpg\" alt=\"截屏2021-09-01 上午10.06.55\"></p>\n<h4 id=\"Memory-Stage\"><a href=\"#Memory-Stage\" class=\"headerlink\" title=\"Memory Stage\"></a>Memory Stage</h4><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0wkwsmvaj61gq0jemzb02.jpg\" alt=\"截屏2021-09-01 上午10.09.04\"></p>\n<h4 id=\"PC-Update-Stage\"><a href=\"#PC-Update-Stage\" class=\"headerlink\" title=\"PC Update Stage\"></a>PC Update Stage</h4><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0wl5zkb3j618c0auaba02.jpg\" alt=\"截屏2021-09-01 上午10.10.05\"></p>\n<h3 id=\"SEQ小结\"><a href=\"#SEQ小结\" class=\"headerlink\" title=\"SEQ小结\"></a>SEQ小结</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu17ut1yypj61cu0iu40c02.jpg\" alt=\"截屏2021-09-01 下午4.39.54\"></p>\n<pre class=\"mermaid\">graph LR\n将执行不同指令所需的步骤组织成一个统一的流程\n\n--> 用很少量的各种硬件单元以及一个时钟来控制计算的顺序\n\n 缺点 --> 控制逻辑必须在单元间路由信号 --> 太慢 \n 缺点 --> 根据指令类型和分支条件产生适当控制信号 -->太慢\n\n 改进 --> Pipelining</pre>\n\n<h2 id=\"General-Principles-of-Pipelining\"><a href=\"#General-Principles-of-Pipelining\" class=\"headerlink\" title=\"General Principles of Pipelining\"></a>General Principles of Pipelining</h2><h3 id=\"Introduction\"><a href=\"#Introduction\" class=\"headerlink\" title=\"Introduction\"></a>Introduction</h3><p>流水线化</p>\n<p>自动洗车/Buffet</p>\n<ul>\n<li>允许多个顾客同时经过系统，而不是要等一个用户完成了所有过程才让下一个开始</li>\n<li>必须以相同速度通过这个系统</li>\n</ul>\n<p>特点</p>\n<ul>\n<li>提高了吞吐量throughput</li>\n<li>增加延迟latency</li>\n</ul>\n<h3 id=\"Computational-Pipelines\"><a href=\"#Computational-Pipelines\" class=\"headerlink\" title=\"Computational Pipelines\"></a>Computational Pipelines</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0xxxc779j617g0iq0uy02.jpg\" alt=\"截屏2021-09-01 上午10.56.56\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0xygh19rj614o0oaacz02.jpg\" alt=\"截屏2021-09-01 上午10.57.19\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0xykkdjqj60v20a80u002.jpg\" alt=\"截屏2021-09-01 上午10.57.32\"></p>\n<h3 id=\"A-Detailed-Look-at-Pipeline-Operation\"><a href=\"#A-Detailed-Look-at-Pipeline-Operation\" class=\"headerlink\" title=\"A Detailed Look at Pipeline Operation\"></a>A Detailed Look at Pipeline Operation</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0ybwskshj60w90u041u02.jpg\" alt=\"截屏2021-09-01 上午11.06.54\"></p>\n<h3 id=\"Limitations-of-Pipelining\"><a href=\"#Limitations-of-Pipelining\" class=\"headerlink\" title=\"Limitations of Pipelining\"></a>Limitations of Pipelining</h3><ul>\n<li>不一致的划分 Nonuniform Partitioning</li>\n<li>流水线过深，收益反而下降 Diminishing Returns of Deep Pipelining</li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0yhjshouj61700jcjuc02.jpg\" alt=\"截屏2021-09-01 上午11.13.33\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0yjhbcumj612g0e0q5h02.jpg\" alt=\"截屏2021-09-01 上午11.17.38\"></p>\n<h3 id=\"Pipelining-a-System-with-Feedback\"><a href=\"#Pipelining-a-System-with-Feedback\" class=\"headerlink\" title=\"Pipelining a System with Feedback\"></a>Pipelining a System with Feedback</h3><p>相关类型</p>\n<ul>\n<li>Data Dependency</li>\n<li>Control Dependency </li>\n</ul>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0ymb139jj611q08cdgc02.jpg\" alt=\"截屏2021-09-01 上午11.18.57\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0yn99nipj61080aojrv02.jpg\" alt=\"截屏2021-09-01 上午11.20.35\"></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gu0ypo86xfj60u012cn0802.jpg\" alt=\"截屏2021-09-01 上午11.23.36\"></p>\n<h2 id=\"Pipelined-Y86-64-Implementations\"><a href=\"#Pipelined-Y86-64-Implementations\" class=\"headerlink\" title=\"Pipelined Y86-64 Implementations\"></a>Pipelined Y86-64 Implementations</h2><p>……</p>\n","text":"处理器体系结构引入微处理器架构简述 现代微处理器复杂 到目前为止，我们看到的计算机系统只限于机器语言程序级 graph LR 处理器 --执行--> 指令.简单操作 --编码--> 一个或多个字节序列组成的二进制格式 指令集体系结构(ISA)：一个处理器支持的指令和指令的字节级编...","link":"","photos":[],"count_time":{"symbolsCount":"5.7k","symbolsTime":"5 mins."},"categories":[{"name":"CSAPP","slug":"CSAPP","count":8,"path":"api/categories/CSAPP.json"}],"tags":[{"name":"CSAPP","slug":"CSAPP","count":8,"path":"api/tags/CSAPP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">处理器体系结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">引入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8%E6%9E%B6%E6%9E%84%E7%AE%80%E8%BF%B0\"><span class=\"toc-text\">微处理器架构简述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E7%AB%A0%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">本章内容</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BA%86%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E8%AE%BE%E8%AE%A1%EF%BC%9F\"><span class=\"toc-text\">为什么了解处理器设计？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E7%AB%A0%E6%95%B4%E4%BD%93%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">本章整体逻辑</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Y86-64-ISA\"><span class=\"toc-text\">Y86-64 ISA</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Programmer-visible-state\"><span class=\"toc-text\">Programmer-visible state</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Instructions\"><span class=\"toc-text\">Instructions</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Example\"><span class=\"toc-text\">Example</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Exceptions\"><span class=\"toc-text\">Exceptions</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Programs\"><span class=\"toc-text\">Programs</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#instruction-set-simulator-%E2%80%94-YIS\"><span class=\"toc-text\">instruction set simulator — YIS</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Logic-Design-and-the-Hardware-Control-Language-HCL\"><span class=\"toc-text\">Logic Design and the Hardware Control Language HCL</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Intro\"><span class=\"toc-text\">Intro</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Logic-Gates\"><span class=\"toc-text\">Logic Gates</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Combinational-Circuits-and-HCL-Boolean-Expressions\"><span class=\"toc-text\">Combinational Circuits and HCL Boolean Expressions</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9E%84%E5%BB%BA%E7%BD%91%E7%9A%84%E9%99%90%E5%88%B6\"><span class=\"toc-text\">构建网的限制</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Multiplexor-MUX\"><span class=\"toc-text\">Multiplexor,MUX</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Word-Level-Combinational-Circuits-and-HCL-Integer-Expressions\"><span class=\"toc-text\">Word-Level Combinational Circuits and HCL Integer Expressions</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#ALU\"><span class=\"toc-text\">ALU</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Set-Membership\"><span class=\"toc-text\">Set Membership</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Memory-and-Clocking\"><span class=\"toc-text\">Memory and Clocking</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%97%B6%E5%BA%8F%E7%94%B5%E8%B7%AF\"><span class=\"toc-text\">时序电路</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AD%98%E5%82%A8%E5%99%A8%E8%AE%BE%E5%A4%87\"><span class=\"toc-text\">存储器设备</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E5%AF%84%E5%AD%98%E5%99%A8\"><span class=\"toc-text\">寄存器</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Sequential-Y86-64-Implementations\"><span class=\"toc-text\">Sequential Y86-64 Implementations</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Organizing-Processing-into-Stages\"><span class=\"toc-text\">Organizing Processing into Stages</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E8%8A%82%E7%9B%AE%E7%9A%84\"><span class=\"toc-text\">本节目的</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E9%98%B6%E6%AE%B5%E5%88%92%E5%88%86\"><span class=\"toc-text\">阶段划分</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E6%8C%87%E4%BB%A4%E5%BA%8F%E5%88%97%E9%98%B6%E6%AE%B5%E5%88%92%E5%88%86\"><span class=\"toc-text\">指令序列阶段划分</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#Opq-rrmovq-irmovq\"><span class=\"toc-text\">Opq&#x2F;rrmovq&#x2F;irmovq</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#rmmovq-mrmovq\"><span class=\"toc-text\">rmmovq&#x2F;mrmovq</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#pushq-popq\"><span class=\"toc-text\">pushq&#x2F;popq</span></a></li><li class=\"toc-item toc-level-5\"><a class=\"toc-link\" href=\"#%E6%8E%A7%E5%88%B6%E8%BD%AC%E7%A7%BB%E6%8C%87%E4%BB%A4%E5%A4%84%E7%90%86jXX-Dest-call-Dest-ret\"><span class=\"toc-text\">控制转移指令处理jXX Dest&#x2F;call Dest&#x2F;ret</span></a></li></ol></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SEQ-Hardware-Structure\"><span class=\"toc-text\">SEQ Hardware Structure</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SEQ-Timing\"><span class=\"toc-text\">SEQ Timing</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#SEQ%E7%9A%84%E5%AE%9E%E7%8E%B0\"><span class=\"toc-text\">SEQ的实现</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#%E7%BB%84%E7%BB%87%E8%AE%A1%E7%AE%97%E7%9A%84%E5%8E%9F%E5%88%99\"><span class=\"toc-text\">组织计算的原则</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SEQ-Stage-Implementations\"><span class=\"toc-text\">SEQ Stage Implementations</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Fetch-Stage\"><span class=\"toc-text\">Fetch Stage</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Decode-and-Write-Back-Stages\"><span class=\"toc-text\">Decode and Write-Back Stages</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Execute-Stage\"><span class=\"toc-text\">Execute Stage</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Memory-Stage\"><span class=\"toc-text\">Memory Stage</span></a></li><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#PC-Update-Stage\"><span class=\"toc-text\">PC Update Stage</span></a></li></ol></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#SEQ%E5%B0%8F%E7%BB%93\"><span class=\"toc-text\">SEQ小结</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#General-Principles-of-Pipelining\"><span class=\"toc-text\">General Principles of Pipelining</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Introduction\"><span class=\"toc-text\">Introduction</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Computational-Pipelines\"><span class=\"toc-text\">Computational Pipelines</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#A-Detailed-Look-at-Pipeline-Operation\"><span class=\"toc-text\">A Detailed Look at Pipeline Operation</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Limitations-of-Pipelining\"><span class=\"toc-text\">Limitations of Pipelining</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Pipelining-a-System-with-Feedback\"><span class=\"toc-text\">Pipelining a System with Feedback</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Pipelined-Y86-64-Implementations\"><span class=\"toc-text\">Pipelined Y86-64 Implementations</span></a></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"学习方法随想","uid":"6995ec6ebd5c76b2ee7554a070e80b76","slug":"StudyMethod/学习方法随想","date":"2021-08-29T01:51:53.000Z","updated":"2021-08-31T03:18:49.000Z","comments":true,"path":"api/articles/StudyMethod/学习方法随想.json","keywords":null,"cover":[],"text":"学习方法随想在学习过程中，其实有很多自己的经验。但是很多碎片化的经验并不能够帮助自己更好的了解自身和提升效率。于是在2021-08-29 09:51:53阅读【CSAPP 第4章 处理器体系架构】的一个早晨，我决定把自己的学习方法记录下来，期待能够得到一个系统化的学习思路。 技术...","link":"","photos":[],"count_time":{"symbolsCount":609,"symbolsTime":"1 mins."},"categories":[{"name":"Study Method","slug":"Study-Method","count":1,"path":"api/categories/Study-Method.json"}],"tags":[{"name":"Study Method","slug":"Study-Method","count":1,"path":"api/tags/Study-Method.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},"next_post":{"title":"C3 程序的机器级表示","uid":"56f4d97bcf32df033b2c7f1482475692","slug":"CSAPP/C3-程序的机器级表示","date":"2021-08-26T04:15:53.000Z","updated":"2021-09-20T15:21:23.000Z","comments":true,"path":"api/articles/CSAPP/C3-程序的机器级表示.json","keywords":null,"cover":[],"text":"程序的机器级表示引入 代码类型 定义 机器代码 用字节序列编码低级的操作 包括处理数据、管理内存、读写存储设备上的数据，以及利用网络通信 汇编代码 机器代码的文本表示 给出程序中的每一条指令 高级语言编程 机器屏蔽程序的细节，即机器级的实现 抽象级别高，效率高，更可靠 可以在不同...","link":"","photos":[],"count_time":{"symbolsCount":"4.4k","symbolsTime":"4 mins."},"categories":[{"name":"CSAPP","slug":"CSAPP","count":8,"path":"api/categories/CSAPP.json"}],"tags":[{"name":"CSAPP","slug":"CSAPP","count":8,"path":"api/tags/CSAPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}}