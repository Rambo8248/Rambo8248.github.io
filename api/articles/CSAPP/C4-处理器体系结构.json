{"title":"C4 处理器体系结构","uid":"54eea516d81b966dd64e8dfcff34d389","slug":"CSAPP/C4-处理器体系结构","date":"2021-08-29T01:38:53.000Z","updated":"2021-08-31T03:05:54.935Z","comments":true,"path":"api/articles/CSAPP/C4-处理器体系结构.json","keywords":null,"cover":[],"content":"<h1 id=\"处理器体系结构\"><a href=\"#处理器体系结构\" class=\"headerlink\" title=\"处理器体系结构\"></a>处理器体系结构</h1><h2 id=\"引入\"><a href=\"#引入\" class=\"headerlink\" title=\"引入\"></a>引入</h2><h3 id=\"微处理器架构简述\"><a href=\"#微处理器架构简述\" class=\"headerlink\" title=\"微处理器架构简述\"></a>微处理器架构简述</h3><ul>\n<li>现代微处理器复杂</li>\n<li>到目前为止，我们看到的计算机系统只限于<strong>机器语言程序级</strong></li>\n</ul>\n<pre class=\"mermaid\">graph LR\n处理器 --执行--> 指令.简单操作  --编码--> 一个或多个字节序列组成的二进制格式</pre>\n\n<p>指令集体系结构(ISA)：一个处理器支持的指令和指令的字节级编码</p>\n<pre class=\"mermaid\">flowchart TD\n编译器编写者 o--概念抽象层--o 处理器设计者\n\n允许哪些指令及其如何编码 o--概念抽象层--o 建造出执行这些指令的处理器</pre>\n\n<h3 id=\"本章内容\"><a href=\"#本章内容\" class=\"headerlink\" title=\"本章内容\"></a>本章内容</h3><ul>\n<li>处理器<strong>硬件的设计</strong></li>\n<li>硬件系统<strong>执行</strong>某种ISA<strong>指令的方式</strong></li>\n<li>计算机制造商们面临的<strong>技术挑战</strong></li>\n</ul>\n<h3 id=\"为什么了解处理器设计？\"><a href=\"#为什么了解处理器设计？\" class=\"headerlink\" title=\"为什么了解处理器设计？\"></a>为什么了解处理器设计？</h3><ul>\n<li>处理器设计有趣且重要<ul>\n<li>学习事物如何工作有内在价值</li>\n</ul>\n</li>\n<li>帮助理解整个计算机系统如何工作</li>\n<li>有助于设计包含处理器的硬件系统<ul>\n<li>例如嵌入式开发</li>\n</ul>\n</li>\n<li>工作为处理器设计</li>\n</ul>\n<h3 id=\"本章整体逻辑\"><a href=\"#本章整体逻辑\" class=\"headerlink\" title=\"本章整体逻辑\"></a>本章整体逻辑</h3><pre class=\"mermaid\">graph TD\n定义一个简单指令集作为处理器实现的运行示例 \n--> 提供一些数字硬件设计的背景\n--> 给出一个基于顺序操作功能正确但并不实用的处理器\n--> pipelined-processor\n--> 设计工具来研究和测试处理器设计\n\nY84-64比x86-64功能少但逻辑简单\n--> 基本构件块及如何连接和操作/HCL简介和应用\n--> 时钟慢且性能低\n--> 将每条指令的执行分解成五步/每个步骤由独立硬件部分或阶段处理\n--> assembler/simulator</pre>\n\n<h2 id=\"Y86-64-ISA\"><a href=\"#Y86-64-ISA\" class=\"headerlink\" title=\"Y86-64 ISA\"></a>Y86-64 ISA</h2><p>定义ISA包括</p>\n<ul>\n<li>状态单元 different components of its state</li>\n<li>指令集 the set of instructions</li>\n<li>编码 codings</li>\n<li>编程规范 programming conventions</li>\n<li>异常事件处理 the handling of exceptional events</li>\n</ul>\n<h3 id=\"Programmer-visible-state\"><a href=\"#Programmer-visible-state\" class=\"headerlink\" title=\"Programmer-visible state\"></a>Programmer-visible state</h3><p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtxgtuav8wj60z00hemzy02.jpg\" alt=\"截屏2021-08-29 上午10.48.07\"></p>\n<div class=\"table-container\">\n<table>\n<thead>\n<tr>\n<th>名词</th>\n<th>含义</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Programmer-visible state</td>\n<td>each instruction in a Y86-64 program can read and modify some part of the processor state</td>\n</tr>\n<tr>\n<td>“Programmer”</td>\n<td>1.someone writing programs in assembly code<br />2.a compiler generating machine-level code</td>\n</tr>\n<tr>\n<td>program registers</td>\n<td>Each of these stores a 64-bit word</td>\n</tr>\n<tr>\n<td>single-bit condition codes</td>\n<td>storing information about the effect of the most recent arithmetic or logical instruction</td>\n</tr>\n<tr>\n<td>program counter</td>\n<td>holds the address of the instruction currently being executed</td>\n</tr>\n<tr>\n<td>memory</td>\n<td>a large array of bytes, holding both program and data</td>\n</tr>\n<tr>\n<td>status code Stat</td>\n<td>indicating the overall state of program execution</td>\n</tr>\n</tbody>\n</table>\n</div>\n<h3 id=\"Instructions\"><a href=\"#Instructions\" class=\"headerlink\" title=\"Instructions\"></a>Instructions</h3><p>指令这一节讲述了Y86-64 ISA中各个指令的简单描述，即指令集中各条指令的具体作用和编码表示</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtxi8eu5cjj61hb0u0wkx02.jpg\" alt=\"截屏2021-08-29 上午11.31.31\"></p>\n<p>指令集的功能码<code>fn</code></p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtxhyks30nj61ba0kc77t02.jpg\" alt=\"截屏2021-08-29 上午11.27.16\"></p>\n<p>程序寄存器标识符<code>ID</code></p>\n<p><img src=\"/Users/zhangweijian/Library/Application Support/typora-user-images/截屏2021-08-29 上午11.26.45.png\" alt=\"截屏2021-08-29 上午11.26.45\"></p>\n<p>注意：</p>\n<ul>\n<li>指令集的一个重要性质就是字节编码必须有唯一的解释</li>\n<li>这个性质保证处理器可以无二义性执行目标代码程序</li>\n</ul>\n<h4 id=\"Example\"><a href=\"#Example\" class=\"headerlink\" title=\"Example\"></a>Example</h4><pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">rmmovq %rsp,0x123456789abcd(%rdx)\n# register -&gt; memory\n# rmmovq -&gt; 40\n# %rsp -&gt; rA -&gt; 4\n# %rdx -&gt; rB -&gt; 2\n# 0x123456789abcd -&gt; 00 01 23 45 67 89 ab cd\n# -&gt; cd ab 89 67 45 23 01 00 因为Y86-64采用了小端法编码<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>\n<p>故指令的编码为</p>\n<pre class=\"line-numbers language-assembly\" data-language=\"assembly\"><code class=\"language-assembly\">4042cdab896745230100<span aria-hidden=\"true\" class=\"line-numbers-rows\"><span></span></span></code></pre>\n<blockquote><span class=\"custom-blockquote-svg\"><svg width=\"24\" height=\"24\" viewBox=\"0 0 24 24\" fill=\"\" xmlns=\"http://www.w3.org/2000/svg\" data-reactroot=\"\">\n<path fill=\"\" d=\"M22 12C22 6.5 17.5 2 12 2C6.5 2 2 6.5 2 12C2 17.5 6.5 22 12 22C13.8 22 15.5 21.5 17 20.6L22 22L20.7 17C21.5 15.5 22 13.8 22 12Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\" undefined=\"1\"></path>\n<path fill=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\" undefined=\"1\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M17 8.5C15.23 8.97 14.07 10.84 14.01 13.27C14 13.33 14 13.4 14 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M9 8.5C7.23 8.97 6.07 10.84 6.01 13.27C6 13.33 6 13.4 6 13.47V13.5\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M15.97 11.5H16.04C17.12 11.5 18 12.38 18 13.47V13.53C18 14.62 17.12 15.5 16.03 15.5H15.96C14.88 15.5 14 14.62 14 13.53V13.46C14 12.38 14.88 11.5 15.97 11.5Z\"></path>\n<path stroke-linejoin=\"round\" stroke-linecap=\"round\" stroke-miterlimit=\"10\" stroke-width=\"2\" stroke=\"\" d=\"M7.97 11.5H8.04C9.12 11.5 10 12.38 10 13.47V13.53C10 14.62 9.12 15.5 8.03 15.5H7.97C6.88 15.5 6 14.62 6 13.53V13.46C6 12.38 6.88 11.5 7.97 11.5Z\"></path>\n</svg>\n</span><p>CISC vs RISC</p>\n<p>RISC更像是一把简单的小刀，通过附魔(流水线结构)增强性能</p>\n<p>CISC更像是一把大的瑞士军刀，本身具有很多的功能</p>\n<p><img src=\"https://tva1.sinaimg.cn/large/008i3skNly1gtxivfn9n1j615o0u014a02.jpg\" alt=\"IMG_AEC7F6C9F60D-1\"></p>\n<ul>\n<li>ARM(Acorn RISC Machine)广泛应用于嵌入式系统中</li>\n<li>两者思想精华结合最好</li>\n</ul></blockquote>\n","feature":true,"text":"处理器体系结构引入微处理器架构简述 现代微处理器复杂 到目前为止，我们看到的计算机系统只限于机器语言程序级 graph LR 处理器 --执行--> 指令.简单操作 --编码--> 一个或多个字节序列组成的二进制格式 指令集体系结构(ISA)：一个处理器支持的指令和指令的字节级编...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"CSAPP","slug":"CSAPP","count":4,"path":"api/categories/CSAPP.json"}],"tags":[{"name":"CSAPP","slug":"CSAPP","count":4,"path":"api/tags/CSAPP.json"}],"toc":"<ol class=\"toc\"><li class=\"toc-item toc-level-1\"><a class=\"toc-link\" href=\"#%E5%A4%84%E7%90%86%E5%99%A8%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84\"><span class=\"toc-text\">处理器体系结构</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#%E5%BC%95%E5%85%A5\"><span class=\"toc-text\">引入</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E5%BE%AE%E5%A4%84%E7%90%86%E5%99%A8%E6%9E%B6%E6%9E%84%E7%AE%80%E8%BF%B0\"><span class=\"toc-text\">微处理器架构简述</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E7%AB%A0%E5%86%85%E5%AE%B9\"><span class=\"toc-text\">本章内容</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E4%B8%BA%E4%BB%80%E4%B9%88%E4%BA%86%E8%A7%A3%E5%A4%84%E7%90%86%E5%99%A8%E8%AE%BE%E8%AE%A1%EF%BC%9F\"><span class=\"toc-text\">为什么了解处理器设计？</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#%E6%9C%AC%E7%AB%A0%E6%95%B4%E4%BD%93%E9%80%BB%E8%BE%91\"><span class=\"toc-text\">本章整体逻辑</span></a></li></ol></li><li class=\"toc-item toc-level-2\"><a class=\"toc-link\" href=\"#Y86-64-ISA\"><span class=\"toc-text\">Y86-64 ISA</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Programmer-visible-state\"><span class=\"toc-text\">Programmer-visible state</span></a></li><li class=\"toc-item toc-level-3\"><a class=\"toc-link\" href=\"#Instructions\"><span class=\"toc-text\">Instructions</span></a><ol class=\"toc-child\"><li class=\"toc-item toc-level-4\"><a class=\"toc-link\" href=\"#Example\"><span class=\"toc-text\">Example</span></a></li></ol></li></ol></li></ol></li></ol>","author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"mapped":true,"prev_post":{"title":"学习方法随想","uid":"6995ec6ebd5c76b2ee7554a070e80b76","slug":"StudyMethod/学习方法随想","date":"2021-08-29T01:51:53.000Z","updated":"2021-08-29T02:08:44.529Z","comments":true,"path":"api/articles/StudyMethod/学习方法随想.json","keywords":null,"cover":[],"text":"学习方法随想在学习过程中，其实有很多自己的经验。但是很多碎片化的经验并不能够帮助自己更好的了解自身和提升效率。于是在2021-08-29 09:51:53阅读【CSAPP 第4章 处理器体系架构】的一个早晨，我决定把自己的学习方法记录下来，期待能够得到一个系统化的学习思路。 技术...","link":"","photos":[],"count_time":{"symbolsCount":609,"symbolsTime":"1 mins."},"categories":[{"name":"Study Method","slug":"Study-Method","count":1,"path":"api/categories/Study-Method.json"}],"tags":[{"name":"Study Method","slug":"Study-Method","count":1,"path":"api/tags/Study-Method.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true},"next_post":{"title":"C3 程序的机器级表示","uid":"56f4d97bcf32df033b2c7f1482475692","slug":"CSAPP/C3-程序的机器级表示","date":"2021-08-26T04:15:53.000Z","updated":"2021-08-28T09:30:05.367Z","comments":true,"path":"api/articles/CSAPP/C3-程序的机器级表示.json","keywords":null,"cover":[],"text":"程序的机器级表示引入 代码类型 定义 机器代码 用字节序列编码低级的操作 包括处理数据、管理内存、读写存储设备上的数据，以及利用网络通信 汇编代码 机器代码的文本表示 给出程序中的每一条指令 高级语言编程 机器屏蔽程序的细节，即机器级的实现 抽象级别高，效率高，更可靠 可以在不同...","link":"","photos":[],"count_time":{"symbolsCount":"4.1k","symbolsTime":"4 mins."},"categories":[{"name":"CSAPP","slug":"CSAPP","count":4,"path":"api/categories/CSAPP.json"}],"tags":[{"name":"CSAPP","slug":"CSAPP","count":4,"path":"api/tags/CSAPP.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}},"feature":true}}