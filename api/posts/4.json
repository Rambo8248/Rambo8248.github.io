{"total":72,"pageSize":12,"pageCount":6,"data":[{"title":"DSA11 Sort1","uid":"dc2049cb2b924724d0d9c0e20e1cbe8f","slug":"DSA/C11 排序(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:20:32.914Z","comments":true,"path":"api/articles/DSA/C11 排序(上).json","cover":[],"text":"排序（上）：为什么插入排序比冒泡排序更受欢迎？概述 如何分析一个排序算法？ 执行效率 最好、最坏、平均情况时间复杂度 时间复杂度的系数、常数、低阶 比较次数和交换次数 内存消耗 原地排序特指空间复杂度是$O(1)$的排序算法 稳定性 如果待排序的序列中存在值相等的元素，经过排序之...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA14 Sort4","uid":"bb3030af5d71baf7746e61c6c316baf8","slug":"DSA/C14 排序优化","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:21:05.987Z","comments":true,"path":"api/articles/DSA/C14 排序优化.json","cover":[],"text":"排序优化：如何实现一个通用的、高性能的排序函数？如何选择合适的排序算法 线性排序场景特殊，不选用 为了兼顾任意规模，首选时间复杂度为$O(nlogn)$ 归并排序空间复杂度可能较高 故选择快速排序 如何优化快速排序理想分区点：被分区点分开的两个分区中，数据的数量差不多 三数取中法...","link":"","photos":[],"count_time":{"symbolsCount":149,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA15 Binary Search1","uid":"4fbc272395db721664d9df9e591dbece","slug":"DSA/C15 二分查找(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:21:16.672Z","comments":true,"path":"api/articles/DSA/C15 二分查找(上).json","cover":[],"text":"二分查找（上）：如何用最省内存的方式实现快速查找功能？无处不在的二分思想 二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0 O(logn)惊人的查找速度$$lo...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA16 Binary Search2","uid":"4c75cfdca780ea6522270fb11aab65bd","slug":"DSA/C16 二分查找(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:21:28.081Z","comments":true,"path":"api/articles/DSA/C16 二分查找(下).json","cover":[],"text":"二分查找（下）：如何快速定位IP对应的省份地址？引入 查找第一个值等于给定值的元素 public int bsearch(int[] a, int n, int value) &#123; int low = 0; int high = n - 1; while (low &lt...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA17 Skip List","uid":"0bec27181caef93fd79c11aa3edf5064","slug":"DSA/C17 跳表","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:22:29.842Z","comments":true,"path":"api/articles/DSA/C17 跳表.json","cover":[],"text":"跳表：为什么Redis一定要用跳表来实现有序集合？引入如果数据存储在链表中，真的没法用二分查找算法了吗？ 跳表是一种各方面性能都比较优秀的动态数据结构，支持快速地插入、删除、查找操作 如何理解跳表 $$跳表 = 链表 + 多级索引$$ 用跳表查询到底有多快？graph TD 链表...","link":"","photos":[],"count_time":{"symbolsCount":702,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA18 Hash Table1","uid":"f2a6a2cecbbac22b23528956a3dabf70","slug":"DSA/C18 散列表(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:22:42.811Z","comments":true,"path":"api/articles/DSA/C18 散列表(上).json","cover":[],"text":"散列表（上）：Word文档中的单词拼写检查功能是如何实现的？引入Word拼写检查功能 散列思想Hash Table 散列表用的是数组支持按照下标随机访问数据的特性，所以散列表其实就是数组的一种扩展，由数组演化而来。可以说，如果没有数组，就没有散列表 经典例子 参赛选手的编号：ke...","link":"","photos":[],"count_time":{"symbolsCount":"1.5k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA19 Hash Table2","uid":"81c6479ab642eb7be2481f941202d8fb","slug":"DSA/C19 散列表(中)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:22:58.442Z","comments":true,"path":"api/articles/DSA/C19 散列表(中).json","cover":[],"text":"散列表（中）：如何打造一个工业级水平的散列表？如何设计一个可以应对各种异常情况的工业级散列表，来避免在散列冲突的情况下，散列表性能的急剧下降，并且能抵抗散列碰撞攻击？ 如何设计散列函数好的散列函数要求 设计不能太复杂 过于复杂散列函数，消耗很多计算时间 散列函数生成的值要尽可能随...","link":"","photos":[],"count_time":{"symbolsCount":"1.6k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA20 Hash Table3","uid":"4b485bd537f5fd1e1b5f6120bc5388d2","slug":"DSA/C20 散列表(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:23:10.699Z","comments":true,"path":"api/articles/DSA/C20 散列表(下).json","cover":[],"text":"散列表（下）：为什么散列表和链表经常会一起使用？LRU缓存淘汰算法链表实现回顾![image-20210724173623972](/Users/zhangweijian/Desktop/公众号/数据结构与算法/C20 散列表(下).assets/image-2021072417...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA21 Hash Algorithm1","uid":"df821ff4999b5ea1cca6788fc47b1fb5","slug":"DSA/C21 哈希算法(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:23:32.250Z","comments":true,"path":"api/articles/DSA/C21 哈希算法(上).json","cover":[],"text":"哈希算法（上）：如何防止数据库中的用户信息被脱库？引入 2011CSDN“脱库”事件 在实际开发中，如何用哈希算法解决问题 什么是哈希算法？哈希算法：将任意长度的二进制值串映射为固定长度的二进制值串，这个映射的规则就是哈希算法。而通过原始数据映射之后得到的二进制值串就是哈希值。 ...","link":"","photos":[],"count_time":{"symbolsCount":"1.2k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA2 如何抓住重点","uid":"5baaeff214933c2b700d2810a6a1c372","slug":"DSA/C2 如何抓住重点","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:18:16.933Z","comments":true,"path":"api/articles/DSA/C2 如何抓住重点.json","cover":[],"text":"如何抓住重点，系统高效地学习数据结构与算法？什么是数据结构？什么是算法？广义 数据结构：一组数据的存储结构 算法：操作数据的一组方法 狭义 著名的数据结构和算法 数据结构与算法的关系 数据结构为算法服务 算法作用于特定的数据结构 需要的基础 数学基础 编程基础 学习重点 复杂度分...","link":"","photos":[],"count_time":{"symbolsCount":378,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA22 Hash Algorithm2","uid":"a8b428ae06db3a75338b25077c7c9ca3","slug":"DSA/C22 哈希算法(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:23:40.177Z","comments":true,"path":"api/articles/DSA/C22 哈希算法(下).json","cover":[],"text":"哈希算法（下）：哈希算法在分布式系统中有哪些应用？哈希算法是如何解决这些分布式问题的 负载均衡负载均衡算法很多，如何才能实现一个会话粘滞的负载均衡算法？即需要在同一个客户端上，在一次会话中的所有请求都路由到同一个服务器上 直接的办法 维护一张映射关系表 弊端 客户端很多，映射表很...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA23 Binary Tree1","uid":"56aa12aba5d53418e62bb5c5f6efe64b","slug":"DSA/C23 二叉树基础(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:23:57.541Z","comments":true,"path":"api/articles/DSA/C23 二叉树基础(上).json","cover":[],"text":"二叉树基础（上）：什么样的二叉树适合用数组来存储？问题引入 二叉树有哪几种存储方式？什么样的二叉树适合用数组来存储？ 树 名词 定义 节点 树中的每个元素 父子关系 用来连接相邻节点之间的关系 父节点 上级节点 子节点 下级节点 兄弟节点 同级节点 叶子节点/叶节点 没有子节点的...","link":"","photos":[],"count_time":{"symbolsCount":"1.4k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}