{"total":81,"pageSize":12,"pageCount":7,"data":[{"title":"Read1 山月记","uid":"16c6197a747c160400b2f8933851aa25","slug":"Reading/山月记","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:55:19.000Z","comments":true,"path":"api/articles/Reading/山月记.json","cover":[],"text":"山月记 中岛敦 对于中国文化故事的了解和再创造 寓思想于故事 言语之优美，寥寥数笔已入作者营造的环境 阅读这本书的过程中，最大的感受是是日本作家对于中国文化的解读。 由日本视角分析中国故事，得出自己的结论，日文写作后翻译为中文，行文之流畅，读起来是一种享受，这实在是难得的。很多时...","link":"","photos":[],"count_time":{"symbolsCount":"11k","symbolsTime":"10 mins."},"categories":[{"name":"Reading","slug":"Reading","count":1,"path":"api/categories/Reading.json"}],"tags":[{"name":"Reading","slug":"Reading","count":1,"path":"api/tags/Reading.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Manim1 Installation","uid":"45e3d46203ca5cc5718cda218b7c4f03","slug":"manim/C1 installation","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:58:07.000Z","comments":true,"path":"api/articles/manim/C1 installation.json","cover":[],"text":"manim安装(MacOS)相关依赖项的安装https://docs.manim.community/en/stable/installation/mac.html To install cairo: brew install cairo To install ffmpeg: b...","link":"","photos":[],"count_time":{"symbolsCount":"2k","symbolsTime":"2 mins."},"categories":[{"name":"Manim","slug":"Manim","count":3,"path":"api/categories/Manim.json"}],"tags":[{"name":"Manim","slug":"Manim","count":3,"path":"api/tags/Manim.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Manim2 A Deeper Look","uid":"a5157b4321de82dc35f7014351511ed5","slug":"manim/C2 a deeper look","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:59:05.000Z","comments":true,"path":"api/articles/manim/C2 a deeper look.json","cover":[],"text":"Mainm BlocksManim涉及到的3个基本概念 mobject animation Scene 在mainm中定义了Mobject, Animation, and Scene这几个class Mobjects basic building block for all ma...","link":"","photos":[],"count_time":{"symbolsCount":"7.5k","symbolsTime":"7 mins."},"categories":[{"name":"Manim","slug":"Manim","count":3,"path":"api/categories/Manim.json"}],"tags":[{"name":"Manim","slug":"Manim","count":3,"path":"api/tags/Manim.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"Manim3 UsingText","uid":"60bd8fd469f282ac6b13a9d5e27c3f6b","slug":"manim/C3 UsingText","date":"2021-08-26T03:46:33.000Z","updated":"2021-08-26T07:59:20.000Z","comments":true,"path":"api/articles/manim/C3 UsingText.json","cover":[],"text":"使用文本without $LaTeX$​​文本helloworld.py from manim import * class HelloWorld(Scene): def construct(self): text = Text(\"Hello world\").scale(3) s...","link":"","photos":[],"count_time":{"symbolsCount":"5.5k","symbolsTime":"5 mins."},"categories":[{"name":"Manim","slug":"Manim","count":3,"path":"api/categories/Manim.json"}],"tags":[{"name":"Manim","slug":"Manim","count":3,"path":"api/tags/Manim.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA0 开篇词","uid":"cdf1a7f1db00ebb74a977ba17a93dbe1","slug":"DSA/C0开篇词","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:17:45.000Z","comments":true,"path":"api/articles/DSA/C0开篇词.json","cover":null,"text":"跨过“数据结构与算法”技术人所需修炼的“内功” 操作系统 计算机网络 编译原理 数据结构与算法 …… 专栏内容设计 众多数据结构和算法中，选取最实用的内容讲解 数据结构和算法中背后的设计思想 结合真实软件开发案例 模块 入门 时间、空间复杂度 大O表示法由来 复杂度分析技巧 最好...","link":"","photos":[],"count_time":{"symbolsCount":238,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA1 Why DSA?","uid":"971ce7cf635f389a131d803d3ca3c395","slug":"DSA/C1  WHY DSA","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:18:01.000Z","comments":true,"path":"api/articles/DSA/C1  WHY DSA.json","cover":null,"text":"为什么要学习数据结构和算法 大厂面试 业务开发工程师 不需要自己实现，不代表不需要了解 评估代码的性能和资源的消耗 基础框架中糅合了基础数据结构和算法的设计思想 基础架构研发工程师 不被淘汰 ","link":"","photos":[],"count_time":{"symbolsCount":99,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA10 Recursion","uid":"cfd5571b43938e7edf361ab5277ffd65","slug":"DSA/C10 递归","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:20:22.000Z","comments":true,"path":"api/articles/DSA/C10 递归.json","cover":[],"text":"递归：如何用三行代码找到“最终推荐人”？引入 如何理解“递归”？递归应用广泛 DFS深度优先搜索 前中后序二叉树遍历 满足的三个条件 一个问题的解可以分解为几个子问题的解 问题与分解后的子问题，除了数据规模不同，求解思路完全一样 存在递归终止条件 如何编写递归代码？写出递推公式、...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA11 Sort1","uid":"dc2049cb2b924724d0d9c0e20e1cbe8f","slug":"DSA/C11 排序(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:20:32.000Z","comments":true,"path":"api/articles/DSA/C11 排序(上).json","cover":[],"text":"排序（上）：为什么插入排序比冒泡排序更受欢迎？概述 如何分析一个排序算法？ 执行效率 最好、最坏、平均情况时间复杂度 时间复杂度的系数、常数、低阶 比较次数和交换次数 内存消耗 原地排序特指空间复杂度是$O(1)$的排序算法 稳定性 如果待排序的序列中存在值相等的元素，经过排序之...","link":"","photos":[],"count_time":{"symbolsCount":"1.7k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA12 Sort2","uid":"9be35293ffa6798064be3bddd6f599aa","slug":"DSA/C12 排序(下)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:20:45.000Z","comments":true,"path":"api/articles/DSA/C12 排序(下).json","cover":[],"text":"排序（下）：如何用快排思想在$O(n)$​内查找第K大元素？引入两种时间复杂度为$O(nlogn)$的排序算法 归并排序 快速排序 归并排序（Merge sort）原理及实现 数组从中间分成前后两部分 对前后两部分分别排序 再将排好序的两部分合并在一起 递推公式： merge_s...","link":"","photos":[],"count_time":{"symbolsCount":"2.1k","symbolsTime":"2 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA13 Sort3","uid":"f0bf7281fb0e82f54bc8de918f6f9204","slug":"DSA/C13 线性排序","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:20:57.000Z","comments":true,"path":"api/articles/DSA/C13 线性排序.json","cover":[],"text":"线性排序：如何根据年龄给100万用户数据排序？引入三种时间复杂度为$O(n)$的排序算法 桶排序 计数排序 基数排序 非基于比较的排序算法→时间复杂度为线性 桶排序（Bucket sort） 计数排序（counting sort） 桶排序的特殊情况 所处范围不大，最大值为k，划分...","link":"","photos":[],"count_time":{"symbolsCount":"1k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA14 Sort4","uid":"bb3030af5d71baf7746e61c6c316baf8","slug":"DSA/C14 排序优化","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:21:05.000Z","comments":true,"path":"api/articles/DSA/C14 排序优化.json","cover":[],"text":"排序优化：如何实现一个通用的、高性能的排序函数？如何选择合适的排序算法 线性排序场景特殊，不选用 为了兼顾任意规模，首选时间复杂度为$O(nlogn)$ 归并排序空间复杂度可能较高 故选择快速排序 如何优化快速排序理想分区点：被分区点分开的两个分区中，数据的数量差不多 三数取中法...","link":"","photos":[],"count_time":{"symbolsCount":149,"symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}},{"title":"DSA15 Binary Search1","uid":"4fbc272395db721664d9df9e591dbece","slug":"DSA/C15 二分查找(上)","date":"2021-07-20T03:46:33.000Z","updated":"2021-08-26T09:21:16.000Z","comments":true,"path":"api/articles/DSA/C15 二分查找(上).json","cover":[],"text":"二分查找（上）：如何用最省内存的方式实现快速查找功能？无处不在的二分思想 二分查找针对的是一个有序的数据集合，查找思想有点类似分治思想。每次都通过跟区间的中间元素对比，将待查找的区间缩小为之前的一半，直到找到要查找的元素，或者区间被缩小为 0 O(logn)惊人的查找速度 log...","link":"","photos":[],"count_time":{"symbolsCount":"1.3k","symbolsTime":"1 mins."},"categories":[{"name":"DSA","slug":"DSA","count":41,"path":"api/categories/DSA.json"}],"tags":[{"name":"DSA","slug":"DSA","count":41,"path":"api/tags/DSA.json"}],"author":{"name":"Rambo","slug":"blog-author","avatar":"https://img-blog.csdnimg.cn/20210313122054101.png","link":"/","description":"Still Water Runs Deep","socials":{"github":"","twitter":"","stackoverflow":"","wechat":"","qq":"","weibo":"","zhihu":"","csdn":"","juejin":"","customs":{}}}}]}